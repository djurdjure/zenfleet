# ~/projects/zenfleet/docker-compose.yml
# Version corrigée pour résoudre l'erreur "package.json: not found"

networks:
  zenfleet_network:
    driver: bridge

volumes:
  zenfleet_postgres_data:
    driver: local
  zenfleet_redis_data:
    driver: local
  puppeteer_cache:
    driver: local

services:
  # Service PHP (Application Laravel)
  php:
    build:
      context: .  # Contexte à la racine du projet
      dockerfile: ./docker/php/Dockerfile
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    container_name: zenfleet_php
    restart: unless-stopped
    volumes:
      - ./:/var/www/html
    networks:
      - zenfleet_network
    depends_on:
      database:
        condition: service_healthy
      redis:
        condition: service_healthy
      node:
        condition: service_healthy
    environment:
      # Configuration PostgreSQL harmonisée
      DB_CONNECTION: pgsql
      DB_HOST: database
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-zenfleet_db}
      DB_USERNAME: ${DB_USERNAME:-zenfleet_user}
      DB_PASSWORD: ${DB_PASSWORD:-zenfleet_pass}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # Configuration du service PDF
      PDF_SERVICE_URL: http://node:3000/generate-pdf
      PDF_SERVICE_HEALTH_URL: http://node:3000/health

  # Service Nginx (Serveur Web)
  nginx:
    build:
      context: .  # Contexte à la racine du projet
      dockerfile: ./docker/nginx/Dockerfile
    container_name: zenfleet_nginx
    restart: unless-stopped
    ports:
      - "${FORWARD_NGINX_HTTP_PORT:-80}:80"
      - "${FORWARD_NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/zenfleet.conf:/etc/nginx/conf.d/zenfleet.conf:ro
    networks:
      - zenfleet_network
    depends_on:
      - php

  # Service Node.js (Service de génération PDF avec Express 5.x et Puppeteer 24.x)
  # Service Node.js (dédié au frontend ET à la génération PDF)
  # Service Node.js (dédié au service de génération PDF)
  # Service Node.js (dédié au service de génération PDF)
  node:
    build:
      context: .
      dockerfile: ./docker/node/Dockerfile
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    container_name: zenfleet_node
    restart: unless-stopped
    volumes:
      #- ./:/var/www/html # Monte le code source pour la compilation des assets
      #- /var/www/html/node_modules # Volume anonyme pour node_modules
      # Monte le code source pour le développement en direct
      - ./pdf-service:/app
      # --- CORRECTION FINALE ---
      # Crée un volume anonyme pour node_modules. Docker y mettra le contenu de l'image
      # et ce volume ne sera pas écrasé par le bind mount ci-dessus.
      - /app/node_modules
      # --- FIN DE LA CORRECTION ---
      - puppeteer_cache:/home/zenfleet_user/.cache/puppeteer
    networks:
      - zenfleet_network
    deploy:
      resources:
        limits:
          memory: 1.5G
        reservations:
          memory: 768M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s


  # Service PostgreSQL (Base de données)
  database:
    image: postgres:15-alpine
    container_name: zenfleet_database
    restart: unless-stopped
    ports:
      - "${FORWARD_DB_PORT:-5432}:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE:-zenfleet_db}
      POSTGRES_USER: ${DB_USERNAME:-zenfleet_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-zenfleet_pass}
      # Configuration optimisée pour PostgreSQL
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    volumes:
      - zenfleet_postgres_data:/var/lib/postgresql/data
    networks:
      - zenfleet_network
    # Configuration PostgreSQL personnalisée
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-zenfleet_user} -d ${DB_DATABASE:-zenfleet_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Redis (Cache, Queues)
  redis:
    image: redis:7-alpine
    container_name: zenfleet_redis
    restart: unless-stopped
    ports:
      - "${FORWARD_REDIS_PORT:-6379}:6379"
    volumes:
      - zenfleet_redis_data:/data
    networks:
      - zenfleet_network
    # Configuration Redis optimisée pour ZenFleet
    command: >
      redis-server
      --appendonly yes
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --tcp-keepalive 300
      --timeout 0
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5