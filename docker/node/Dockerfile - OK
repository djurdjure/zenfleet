# ~/projects/zenfleet/docker/node/Dockerfile - Version de Production Finale et Complète

FROM node:20-bullseye
ARG USER_ID
ARG GROUP_ID

# --- MISE À JOUR FINALE ---
# Étape 1 : Installer TOUTES les dépendances système requises par Chrome Headless
# Cette liste exhaustive garantit la compatibilité et prévient les erreurs de librairies partagées.
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Utilitaires de base
    gosu \
    ca-certificates \
    netcat-openbsd \
    sudo \
    # Polices de caractères pour un rendu correct
    fonts-liberation \
    # Dépendances directes de Puppeteer/Chrome listées dans la documentation officielle
    libasound2 \
    libatk-bridge2.0-0 \
    libatspi2.0-0 \
    libcups2 \
    libdbus-1-3 \
    libdrm2 \
    libgbm1 \
    libgtk-3-0 \
    libnss3 \
    libx11-xcb1 \
    libxcomposite1 \
    libxcursor1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxi6 \
    libxrandr2 \
    libxrender1 \
    libxss1 \
    libxtst6 \
    && rm -rf /var/lib/apt/lists/*
# --- FIN DE LA MISE À JOUR ---

# Étape 2 : Création/modification robuste de l'utilisateur (inchangé)
RUN export TARGET_USER=zenfleet_user && \
    export TARGET_GROUP=zenfleet_user && \
    export TARGET_UID=${USER_ID:-1000} && \
    export TARGET_GID=${GROUP_ID:-1000} && \
    if getent group $TARGET_GID >/dev/null; then \
        EXISTING_GROUP_NAME=$(getent group $TARGET_GID | cut -d: -f1); \
        if [ "$EXISTING_GROUP_NAME" != "$TARGET_GROUP" ]; then groupmod -n $TARGET_GROUP $EXISTING_GROUP_NAME; fi; \
    else \
        groupadd -g $TARGET_GID $TARGET_GROUP; \
    fi && \
    if getent passwd $TARGET_UID >/dev/null; then \
        EXISTING_USER_NAME=$(getent passwd $TARGET_UID | cut -d: -f1); \
        usermod -l $TARGET_USER -g $TARGET_GROUP -d /home/$TARGET_USER -m $EXISTING_USER_NAME; \
    else \
        useradd -u $TARGET_UID -g $TARGET_GROUP -m -s /bin/bash $TARGET_USER; \
    fi

# Étape 3 : Définir le chemin du cache de Puppeteer comme variable d'environnement (inchangé)
ENV PUPPETEER_CACHE_DIR=/home/zenfleet_user/.cache/puppeteer

# Étape 4 : Créer le répertoire de cache et s'assurer que l'utilisateur en est propriétaire (inchangé)
RUN mkdir -p ${PUPPETEER_CACHE_DIR} && chown -R zenfleet_user:zenfleet_user /home/zenfleet_user

# Étape 5 : Définir le répertoire de travail (inchangé)
WORKDIR /app

# Étape 6 : Copier le manifeste des dépendances (inchangé)
COPY pdf-service/package.json ./package.json

# Étape 7 : Installer les dépendances. (inchangé)
RUN yarn install --production && npx puppeteer browsers install chrome

# Étape 8 : Copier le code source de l'application (inchangé)
COPY pdf-service/ .

# Étape 9 : Donner les permissions sur le code de l'application (inchangé)
RUN chown -R zenfleet_user:zenfleet_user /app

# Étape 10 : Configurer l'entrypoint (inchangé)
COPY ./docker/node/entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

# Étape 11 : Commande par défaut (inchangé)
CMD ["node", "server.js"]