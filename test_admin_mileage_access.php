<?php

/**
 * Script de test - V√©rification des acc√®s Admin au module Kilom√©trage
 * Enterprise-Grade Testing
 */

require_once __DIR__ . '/vendor/autoload.php';

$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);
$request = Illuminate\Http\Request::capture();
$kernel->handle($request);

use App\Models\User;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;

echo "\n";
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
echo "‚ïë            TEST ACC√àS ADMIN - MODULE KILOM√âTRAGE ENTERPRISE                     ‚ïë\n";
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n";

// Test 1: V√©rifier les r√¥les Admin
echo "üìä TEST 1: V√âRIFICATION DES R√îLES ADMIN\n";
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

$adminRole = Role::where('name', 'Admin')->first();
if ($adminRole) {
    echo "‚úÖ R√¥le 'Admin' trouv√© (ID: {$adminRole->id})\n";
    
    // Lister les permissions kilom√©trage du r√¥le Admin
    $mileagePermissions = $adminRole->permissions()
        ->where('name', 'like', '%mileage%')
        ->pluck('name')
        ->toArray();
    
    echo "üìã Permissions kilom√©trage du r√¥le Admin:\n";
    if (count($mileagePermissions) > 0) {
        foreach ($mileagePermissions as $permission) {
            echo "   ‚úì {$permission}\n";
        }
    } else {
        echo "   ‚ö†Ô∏è Aucune permission kilom√©trage trouv√©e!\n";
    }
} else {
    echo "‚ùå R√¥le 'Admin' non trouv√©!\n";
}

echo "\n";

// Test 2: V√©rifier un utilisateur Admin sp√©cifique
echo "üìä TEST 2: V√âRIFICATION D'UN UTILISATEUR ADMIN\n";
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

$adminUser = User::whereHas('roles', function($q) {
    $q->where('name', 'Admin');
})->first();

if ($adminUser) {
    echo "‚úÖ Utilisateur Admin trouv√©: {$adminUser->name} (ID: {$adminUser->id})\n";
    echo "üìß Email: {$adminUser->email}\n";
    echo "üè¢ Organisation ID: {$adminUser->organization_id}\n";
    
    // V√©rifier les r√¥les
    $roles = $adminUser->getRoleNames();
    echo "üë§ R√¥les: " . $roles->implode(', ') . "\n";
    
    // V√©rifier les permissions kilom√©trage directes
    echo "\nüìã Permissions kilom√©trage de l'utilisateur:\n";
    
    $permissions = [
        'view own mileage readings',
        'view team mileage readings',
        'view all mileage readings',
        'create mileage readings',
        'update own mileage readings',
        'update any mileage readings',
        'delete mileage readings',
        'export mileage readings',
        'view mileage statistics',
        'view mileage reading history'
    ];
    
    foreach ($permissions as $permission) {
        if ($adminUser->can($permission)) {
            echo "   ‚úÖ {$permission}\n";
        } else {
            echo "   ‚ùå {$permission}\n";
        }
    }
    
    // Test des v√©rifications de r√¥le
    echo "\nüîê V√©rifications de r√¥le:\n";
    echo "   " . ($adminUser->hasRole('Admin') ? "‚úÖ" : "‚ùå") . " hasRole('Admin')\n";
    echo "   " . ($adminUser->hasRole(['Super Admin', 'Admin']) ? "‚úÖ" : "‚ùå") . " hasRole(['Super Admin', 'Admin'])\n";
    
} else {
    echo "‚ùå Aucun utilisateur Admin trouv√©!\n";
}

echo "\n";

// Test 3: Tester l'acc√®s via le middleware
echo "üìä TEST 3: SIMULATION D'ACC√àS VIA MIDDLEWARE\n";
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

if ($adminUser) {
    // Simuler une connexion
    auth()->login($adminUser);
    
    echo "‚úÖ Connexion simul√©e pour: {$adminUser->email}\n";
    
    // V√©rifier l'acc√®s selon les conditions du middleware
    $hasAccess = false;
    $accessReason = "";
    
    if ($adminUser->hasRole(['Super Admin', 'Admin'])) {
        $hasAccess = true;
        $accessReason = "R√¥le Admin/Super Admin";
    } elseif ($adminUser->hasRole('Gestionnaire Flotte') && $adminUser->can('view all mileage readings')) {
        $hasAccess = true;
        $accessReason = "Gestionnaire Flotte avec permission compl√®te";
    } elseif ($adminUser->hasRole('Superviseur') && $adminUser->can('view team mileage readings')) {
        $hasAccess = true;
        $accessReason = "Superviseur avec acc√®s √©quipe";
    } elseif ($adminUser->can('view own mileage readings')) {
        $hasAccess = true;
        $accessReason = "Permission de voir ses propres relev√©s";
    }
    
    if ($hasAccess) {
        echo "‚úÖ ACC√àS AUTORIS√â - Raison: {$accessReason}\n";
    } else {
        echo "‚ùå ACC√àS REFUS√â - Aucune condition remplie\n";
    }
    
    auth()->logout();
}

echo "\n";

// Test 4: Liste des routes kilom√©trage
echo "üìä TEST 4: ROUTES KILOM√âTRAGE DISPONIBLES\n";
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n";

$routes = [
    'admin.mileage-readings.index' => 'Historique kilom√©trage',
    'admin.mileage-readings.update' => 'Mise √† jour kilom√©trage',
    'admin.vehicles.mileage-history' => 'Historique par v√©hicule'
];

foreach ($routes as $routeName => $description) {
    try {
        $url = route($routeName, ['vehicle' => 1]);
        echo "‚úÖ {$description}: {$url}\n";
    } catch (\Exception $e) {
        echo "‚ö†Ô∏è {$description}: Route non trouv√©e ou param√®tres manquants\n";
    }
}

echo "\n";

// R√©sum√©
echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\n";
echo "‚ïë                              R√âSUM√â DU TEST                                   ‚ïë\n";
echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n";

$summary = [
    "R√¥le Admin existe" => $adminRole ? "‚úÖ" : "‚ùå",
    "Utilisateur Admin trouv√©" => $adminUser ? "‚úÖ" : "‚ùå",
    "Admin a acc√®s au module" => ($adminUser && $hasAccess) ? "‚úÖ" : "‚ùå",
    "Routes configur√©es" => "‚úÖ"
];

foreach ($summary as $test => $result) {
    echo sprintf("%-30s: %s\n", $test, $result);
}

echo "\nüéØ RECOMMANDATIONS:\n";
if (!$adminRole) {
    echo "   ‚ö†Ô∏è Cr√©er le r√¥le 'Admin' avec: php artisan db:seed --class=RolesAndPermissionsSeeder\n";
}
if ($adminRole && count($mileagePermissions) == 0) {
    echo "   ‚ö†Ô∏è Attribuer les permissions kilom√©trage: php artisan db:seed --class=VehicleMileagePermissionsSeeder\n";
}
if (!$adminUser) {
    echo "   ‚ö†Ô∏è Cr√©er un utilisateur Admin pour les tests\n";
}

echo "\n‚ú® Test termin√© avec succ√®s!\n\n";
