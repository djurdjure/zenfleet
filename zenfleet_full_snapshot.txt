ZENFLEET Full Project Snapshot - Mon Jul 21 23:36:11 CET 2025
===================================================


--- SECTION: Fichiers de Configuration Racine ---

#############################################
./docker-compose.yml
#############################################
# ~/projects/zenfleet/docker-compose.yml

#version: '3.8'

networks:
  zenfleet_network:
    driver: bridge

volumes:
  zenfleet_postgres_data:
    driver: local
  zenfleet_redis_data:
    driver: local

services:
  # Service PHP (Application Laravel)
  php:
    build:
      context: ./docker/php
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    container_name: zenfleet_php
    restart: unless-stopped
    volumes:
      - ./:/var/www/html # Monte le code source de l'application
      # Le volume php_socket est utilisé pour la communication entre Nginx et PHP-FPM
      # mais nous utilisons le réseau Docker, donc ce n'est pas strictement nécessaire ici.
      # Le nommage php:9000 dans Nginx gère cela.
    networks:
      - zenfleet_network
    depends_on:
      - database
      - redis
    environment:
      # Ces variables seront utilisées par Laravel pour se connecter à la BDD
      DB_CONNECTION: pgsql
      DB_HOST: database # Nom du service de la base de données
      DB_PORT: 5432
      DB_DATABASE: ${DB_DATABASE:-zenfleet_db}
      DB_USERNAME: ${DB_USERNAME:-zenfleet_user}
      DB_PASSWORD: ${DB_PASSWORD:-zenfleet_pass}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # D'autres variables d'environnement pour Laravel peuvent être ajoutées ici
      # APP_KEY: (sera généré par artisan)
      # APP_ENV: local
      # APP_DEBUG: true

  # Service Nginx (Serveur Web)
  nginx:
    build:
      context: ./docker/nginx
    container_name: zenfleet_nginx
    restart: unless-stopped
    ports:
      - "${FORWARD_NGINX_HTTP_PORT:-80}:80"
      - "${FORWARD_NGINX_HTTPS_PORT:-443}:443" # Si vous configurez SSL
    volumes:
      - ./:/var/www/html # Accès aux fichiers statiques et au code source
      - ./docker/nginx/zenfleet.conf:/etc/nginx/conf.d/zenfleet.conf:ro # Assure que la config est bien celle du host
      # Volume pour les logs Nginx (optionnel, peut être utile pour le débogage)
      # - ./docker/nginx/logs:/var/log/nginx
    networks:
      - zenfleet_network
    depends_on:
      - php # Nginx a besoin que PHP-FPM soit prêt

  # Service Node.js (pour la compilation des assets frontend)
  node:
    build:
      context: ./docker/node
      args:
        USER_ID: ${UID:-1000}
        GROUP_ID: ${GID:-1000}
    container_name: zenfleet_node
    volumes:
      - ./:/var/www/html # Monte le code source pour la compilation des assets
      - /var/www/html/node_modules # Volume anonyme pour node_modules
    # Le CMD par défaut du Dockerfile node est `tail -f /dev/null`
    # Pour le développement avec hot-reloading (ex: Vite), on pourrait surcharger ici:
    # command: sh -c "yarn install && yarn dev"
    networks:
      - zenfleet_network
    tty: true # Garde le conteneur en vie pour les commandes interactives

  # Service PostgreSQL (Base de données)
  database:
    image: postgres:15-alpine # Image officielle PostgreSQL
    container_name: zenfleet_database
    restart: unless-stopped
    ports:
      - "${FORWARD_DB_PORT:-5432}:5432" # Expose le port pour accès externe (ex: pgAdmin)
    environment:
      POSTGRES_DB: ${DB_DATABASE:-zenfleet_db}
      POSTGRES_USER: ${DB_USERNAME:-zenfleet_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-zenfleet_pass}
    volumes:
      - zenfleet_postgres_data:/var/lib/postgresql/data # Persiste les données
    networks:
      - zenfleet_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-zenfleet_user} -d ${DB_DATABASE:-zenfleet_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service Redis (Cache, Queues)
  redis:
    image: redis:7-alpine # Image officielle Redis
    container_name: zenfleet_redis
    restart: unless-stopped
    ports:
      - "${FORWARD_REDIS_PORT:-6379}:6379" # Expose le port pour accès externe si besoin
    volumes:
      - zenfleet_redis_data:/data # Persiste les données Redis
    networks:
      - zenfleet_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

--- END OF FILE: ./docker-compose.yml ---

#############################################
./vite.config.js
#############################################
import { defineConfig } from 'vite';
import laravel from 'laravel-vite-plugin';

export default defineConfig({
    plugins: [
        laravel({
            input: [
                'resources/css/app.css',
                'resources/js/app.js',
            ],
            refresh: true,
        }),
    ],
});

--- END OF FILE: ./vite.config.js ---

#############################################
./tailwind.config.js
#############################################
import defaultTheme from 'tailwindcss/defaultTheme';
import forms from '@tailwindcss/forms';

/** @type {import('tailwindcss').Config} */
export default {
    content: [
        './vendor/laravel/framework/src/Illuminate/Pagination/resources/views/*.blade.php',
        './storage/framework/views/*.php',
        './resources/views/**/*.blade.php',
    ],

    theme: {
        extend: {
            fontFamily: {
                sans: ['Figtree', ...defaultTheme.fontFamily.sans],
            },
        },
    },

    plugins: [forms],
};

--- END OF FILE: ./tailwind.config.js ---

#############################################
./postcss.config.js
#############################################
export default {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    },
};

--- END OF FILE: ./postcss.config.js ---

#############################################
./package.json
#############################################
{
    "private": true,
    "type": "module",
    "scripts": {
        "dev": "vite",
        "build": "vite build"
    },
    "devDependencies": {
        "@tailwindcss/forms": "^0.5.2",
        "alpinejs": "^3.4.2",
        "autoprefixer": "^10.4.2",
        "axios": "^1.6.4",
        "laravel-vite-plugin": "^1.0.0",
        "postcss": "^8.4.31",
        "tailwindcss": "^3.1.0",
        "vite": "^5.0.0"
    },
    "dependencies": {
        "apexcharts": "^4.7.0",
        "tom-select": "^2.4.3"
    }
}

--- END OF FILE: ./package.json ---

#############################################
./composer.json
#############################################
{
    "name": "laravel/laravel",
    "type": "project",
    "description": "The skeleton application for the Laravel framework.",
    "keywords": ["laravel", "framework"],
    "license": "MIT",
    "require": {
        "php": "^8.1",
        "doctrine/dbal": "^3.9",
        "guzzlehttp/guzzle": "^7.2",
        "laravel/framework": "^10.10",
        "laravel/sanctum": "^3.3",
        "laravel/tinker": "^2.8",
        "league/csv": "^9.23",
        "spatie/laravel-permission": "^6.19"
    },
    "require-dev": {
        "fakerphp/faker": "^1.9.1",
        "laravel/breeze": "^1.29",
        "laravel/pint": "^1.0",
        "laravel/sail": "^1.18",
        "mockery/mockery": "^1.4.4",
        "nunomaduro/collision": "^7.0",
        "phpunit/phpunit": "^10.1",
        "spatie/laravel-ignition": "^2.0"
    },
    "autoload": {
        "psr-4": {
            "App\\": "app/",
            "Database\\Factories\\": "database/factories/",
            "Database\\Seeders\\": "database/seeders/"
        }
    },
    "autoload-dev": {
        "psr-4": {
            "Tests\\": "tests/"
        }
    },
    "scripts": {
        "post-autoload-dump": [
            "Illuminate\\Foundation\\ComposerScripts::postAutoloadDump",
            "@php artisan package:discover --ansi"
        ],
        "post-update-cmd": [
            "@php artisan vendor:publish --tag=laravel-assets --ansi --force"
        ],
        "post-root-package-install": [
            "@php -r \"file_exists('.env') || copy('.env.example', '.env');\""
        ],
        "post-create-project-cmd": [
            "@php artisan key:generate --ansi"
        ]
    },
    "extra": {
        "laravel": {
            "dont-discover": []
        }
    },
    "config": {
        "optimize-autoloader": true,
        "preferred-install": "dist",
        "sort-packages": true,
        "allow-plugins": {
            "pestphp/pest-plugin": true,
            "php-http/discovery": true
        }
    },
    "minimum-stability": "stable",
    "prefer-stable": true
}

--- END OF FILE: ./composer.json ---

#############################################
./.env.example
#############################################
APP_NAME=Laravel
APP_ENV=local
APP_KEY=
APP_DEBUG=true
APP_URL=http://localhost

LOG_CHANNEL=stack
LOG_DEPRECATIONS_CHANNEL=null
LOG_LEVEL=debug

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=

BROADCAST_DRIVER=log
CACHE_DRIVER=file
FILESYSTEM_DISK=local
QUEUE_CONNECTION=sync
SESSION_DRIVER=file
SESSION_LIFETIME=120

MEMCACHED_HOST=127.0.0.1

REDIS_HOST=127.0.0.1
REDIS_PASSWORD=null
REDIS_PORT=6379

MAIL_MAILER=smtp
MAIL_HOST=mailpit
MAIL_PORT=1025
MAIL_USERNAME=null
MAIL_PASSWORD=null
MAIL_ENCRYPTION=null
MAIL_FROM_ADDRESS="hello@example.com"
MAIL_FROM_NAME="${APP_NAME}"

AWS_ACCESS_KEY_ID=
AWS_SECRET_ACCESS_KEY=
AWS_DEFAULT_REGION=us-east-1
AWS_BUCKET=
AWS_USE_PATH_STYLE_ENDPOINT=false

PUSHER_APP_ID=
PUSHER_APP_KEY=
PUSHER_APP_SECRET=
PUSHER_HOST=
PUSHER_PORT=443
PUSHER_SCHEME=https
PUSHER_APP_CLUSTER=mt1

VITE_APP_NAME="${APP_NAME}"
VITE_PUSHER_APP_KEY="${PUSHER_APP_KEY}"
VITE_PUSHER_HOST="${PUSHER_HOST}"
VITE_PUSHER_PORT="${PUSHER_PORT}"
VITE_PUSHER_SCHEME="${PUSHER_SCHEME}"
VITE_PUSHER_APP_CLUSTER="${PUSHER_APP_CLUSTER}"

--- END OF FILE: ./.env.example ---

#############################################
./artisan
#############################################
#!/usr/bin/env php
<?php

define('LARAVEL_START', microtime(true));

/*
|--------------------------------------------------------------------------
| Register The Auto Loader
|--------------------------------------------------------------------------
|
| Composer provides a convenient, automatically generated class loader
| for our application. We just need to utilize it! We'll require it
| into the script here so that we do not have to worry about the
| loading of any of our classes manually. It's great to relax.
|
*/

require __DIR__.'/vendor/autoload.php';

$app = require_once __DIR__.'/bootstrap/app.php';

/*
|--------------------------------------------------------------------------
| Run The Artisan Application
|--------------------------------------------------------------------------
|
| When we run the console application, the current CLI command will be
| executed in this console and the response sent back to a terminal
| or another output device for the developers. Here goes nothing!
|
*/

$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);

$status = $kernel->handle(
    $input = new Symfony\Component\Console\Input\ArgvInput,
    new Symfony\Component\Console\Output\ConsoleOutput
);

/*
|--------------------------------------------------------------------------
| Shutdown The Application
|--------------------------------------------------------------------------
|
| Once Artisan has finished running, we will fire off the shutdown events
| so that any final work may be done by the application before we shut
| down the process. This is the last thing to happen to the request.
|
*/

$kernel->terminate($input, $status);

exit($status);

--- END OF FILE: ./artisan ---



--- SECTION: Répertoires de Code Source ---


#############################################
./app/View/Components/AppLayout.php
#############################################
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class AppLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.app');
    }
}

--- END OF FILE: ./app/View/Components/AppLayout.php ---


#############################################
./app/View/Components/GuestLayout.php
#############################################
<?php

namespace App\View\Components;

use Illuminate\View\Component;
use Illuminate\View\View;

class GuestLayout extends Component
{
    /**
     * Get the view / contents that represents the component.
     */
    public function render(): View
    {
        return view('layouts.guest');
    }
}

--- END OF FILE: ./app/View/Components/GuestLayout.php ---


#############################################
./app/Models/Driver.php
#############################################
<?php
namespace App\Models;
use App\Models\Concerns\BelongsToOrganization;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
class Driver extends Model
{
    use HasFactory, SoftDeletes, BelongsToOrganization;
    protected $fillable = [
        'user_id', 'employee_number', 'first_name', 'last_name', 'photo_path', 'birth_date', 
        'blood_type', 'address', 'personal_phone', 'personal_email', 'license_number', 
        'license_category', 'license_issue_date', 'license_authority', 'license_expiry_date', 
        'recruitment_date', 'contract_end_date', 'status_id', 'emergency_contact_name', 
        'emergency_contact_phone', 'organization_id',
    ];

    protected $casts = [
        'birth_date' => 'date',
        'license_issue_date' => 'date',
        'license_expiry_date' => 'date', // <-- AJOUT
        'recruitment_date' => 'date',
        'contract_end_date' => 'date',
    ];

    /**
     * Relation: Un chauffeur peut être un utilisateur du système.
     */
    public function user(): BelongsTo
    {
        return $this->belongsTo(User::class);
    }

    /**
     * Relation: Un chauffeur a un statut.
     */
    public function driverStatus(): BelongsTo
    {
        return $this->belongsTo(DriverStatus::class, 'status_id');
    }
     /**
     * Relation : Un chauffeur peut avoir plusieurs affectations.
     */
    public function assignments(): HasMany
    {
        return $this->hasMany(Assignment::class);
    }

    /**
    * Vérifie si le chauffeur a une affectation actuellement en cours.
    */

    public function isCurrentlyAssigned(): bool
   {
      return $this->assignments()->whereNull('end_datetime')->exists();
   }


}

--- END OF FILE: ./app/Models/Driver.php ---


#############################################
./app/Models/TransmissionType.php
#############################################
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class TransmissionType extends Model
{
    use HasFactory;
    // Indique à Laravel que ce modèle n'utilise pas les colonnes created_at et updated_at.
    public $timestamps = false;

    // Définit le champ 'name' comme étant assignable en masse.
    protected $fillable = ['name'];

}

--- END OF FILE: ./app/Models/TransmissionType.php ---


#############################################
./app/Models/VehicleStatus.php
#############################################
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class VehicleStatus extends Model
{
    use HasFactory;
    // Indique à Laravel que ce modèle n'utilise pas les colonnes created_at et updated_at.
    public $timestamps = false;

    // Définit le champ 'name' comme étant assignable en masse.
    protected $fillable = ['name'];

}

--- END OF FILE: ./app/Models/VehicleStatus.php ---


#############################################
./app/Models/Vehicle.php
#############################################
<?php
namespace App\Models;
use App\Models\Concerns\BelongsToOrganization;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
class Vehicle extends Model
{
    use HasFactory, SoftDeletes, BelongsToOrganization;
    protected $fillable = [
        'registration_plate', 'vin', 'brand', 'model', 'color', 'photo_path', 'vehicle_type_id', 
        'fuel_type_id', 'transmission_type_id', 'status_id', 'manufacturing_year', 
        'acquisition_date', 'purchase_price', 'current_value', 'initial_mileage', 
        'current_mileage', 'engine_displacement_cc', 'power_hp', 'seats', 'notes', 'organization_id',
    ];

    protected $casts = [
        'acquisition_date' => 'date',
    ];

    public function vehicleType(): BelongsTo { return $this->belongsTo(VehicleType::class); }
    public function fuelType(): BelongsTo { return $this->belongsTo(FuelType::class); }
    public function transmissionType(): BelongsTo { return $this->belongsTo(TransmissionType::class); }
    public function vehicleStatus(): BelongsTo { return $this->belongsTo(VehicleStatus::class, 'status_id'); }
    public function assignments(): HasMany { return $this->hasMany(Assignment::class); }
    public function maintenancePlans(): HasMany { return $this->hasMany(\App\Models\Maintenance\MaintenancePlan::class); }
    public function maintenanceLogs(): HasMany { return $this->hasMany(\App\Models\Maintenance\MaintenanceLog::class); }
}
--- END OF FILE: ./app/Models/Vehicle.php ---


#############################################
./app/Models/Concerns/BelongsToOrganization.php
#############################################
<?php

namespace App\Models\Concerns;

use App\Models\Organization;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Facades\Auth;

trait BelongsToOrganization
{
    protected static function bootBelongsToOrganization()
    {
        // Filtre automatiquement toutes les requêtes de LECTURE
        static::addGlobalScope('organization', function (Builder $builder) {
            if (Auth::check() && Auth::user()->organization_id) {
                // Le Super Admin n'est PAS filtré, il voit tout.
                if (!Auth::user()->hasRole('Super Admin')) {
                    $builder->where($builder->getModel()->getTable() . '.organization_id', Auth::user()->organization_id);
                }
            }
        });

        // Lie automatiquement chaque NOUVEL enregistrement à l'organisation de l'utilisateur
        static::creating(function (Model $model) {
            if (Auth::check() && !isset($model->organization_id)) {
                $model->organization_id = Auth::user()->organization_id;
            }
        });
    }

    public function organization(): BelongsTo
    {
        return $this->belongsTo(Organization::class);
    }
}
--- END OF FILE: ./app/Models/Concerns/BelongsToOrganization.php ---


#############################################
./app/Models/DriverStatus.php
#############################################
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class DriverStatus extends Model
{
    use HasFactory;
    public $timestamps = false;
    protected $fillable = ['name'];
}

--- END OF FILE: ./app/Models/DriverStatus.php ---


#############################################
./app/Models/ValidationLevel.php
#############################################
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class ValidationLevel extends Model
{
    use HasFactory;

    /**
     * Indicates if the model should be timestamped.
     * Laravel handles timestamps by default if the columns exist,
     * so no 'public $timestamps = true;' is explicitly needed.
     * Only set 'public $timestamps = false;' if you DON'T have/want them.
     */

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'level_number',
        'name',
        'description',
    ];

    /**
     * Define the relationship with users.
     * Un niveau de validation peut être associé à plusieurs utilisateurs.
     */
    public function users()
    {
        return $this->belongsToMany(User::class, 'user_validation_levels');
    }
}

--- END OF FILE: ./app/Models/ValidationLevel.php ---


#############################################
./app/Models/Handover/VehicleHandoverDetail.php
#############################################
<?php
namespace App\Models\Handover;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class VehicleHandoverDetail extends Model
{
    use HasFactory;
    public $timestamps = false;
    protected $fillable = ['handover_form_id', 'category', 'item', 'status'];
    public function handoverForm(): BelongsTo { return $this->belongsTo(VehicleHandoverForm::class, 'handover_form_id'); }
}

--- END OF FILE: ./app/Models/Handover/VehicleHandoverDetail.php ---


#############################################
./app/Models/Handover/VehicleHandoverForm.php
#############################################
<?php
namespace App\Models\Handover;

use App\Models\Concerns\BelongsToOrganization;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
class VehicleHandoverForm extends Model
{
    use HasFactory, SoftDeletes, BelongsToOrganization;
    protected $fillable = [
        'assignment_id', 'issue_date', 'current_mileage', 'general_observations', 
        'additional_observations', 'signed_form_path', 'organization_id',
    ];




    protected $casts = ['issue_date' => 'date'];
    public function assignment(): BelongsTo { return $this->belongsTo(Assignment::class); }
    public function details(): HasMany { return $this->hasMany(VehicleHandoverDetail::class, 'handover_form_id'); }

    /**
     * Mark this handover form as the latest version and mark others as obsolete.
     */
    public function markAsLatestVersion()
    {
        // Mark all other handover forms for this assignment as not latest
        static::where('assignment_id', $this->assignment_id)
            ->where('id', '!=', $this->id)
            ->update(['is_latest_version' => false]);
        
        // Mark this one as latest
        $this->update(['is_latest_version' => true]);
    }
}

--- END OF FILE: ./app/Models/Handover/VehicleHandoverForm.php ---


#############################################
./app/Models/Assignment.php
#############################################
ZENFLEET
Custom Gem

Show thinking
ZENFLEET >> Entendu. Votre approche est la bonne : pour une modification aussi structurelle, il est impératif que nous travaillions sur les mêmes versions de fichiers. C'est la garantie d'une intégration sans erreur.

J'ai analysé en profondeur tous les fichiers que vous m'avez fournis. Votre code est très bien structuré, mais comme nous l'avions suspecté, il manque l'intégration finale du mécanisme multi-sociétés.

En tant qu'architecte de votre projet, je vais vous fournir les versions complètes, finales et optimisées de tous vos modèles. Elles intègrent la logique du "Global Scope" pour garantir une isolation parfaite et sécurisée des données entre les organisations.

Étape 1 : Le Trait BelongsToOrganization.php (Final et Sécurisé)
Cette version est améliorée pour que le Super Admin ne soit pas affecté par le filtre, lui permettant de tout voir.

Fichier à Remplacer : app/Models/Concerns/BelongsToOrganization.php

Contenu Complet et Final :

PHP

<?php

namespace App\Models\Concerns;

use App\Models\Organization;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Support\Facades\Auth;

trait BelongsToOrganization
{
    protected static function bootBelongsToOrganization()
    {
        // Filtre automatiquement toutes les requêtes de LECTURE
        static::addGlobalScope('organization', function (Builder $builder) {
            if (Auth::check() && Auth::user()->organization_id) {
                // Le Super Admin n'est PAS filtré, il voit tout.
                if (!Auth::user()->hasRole('Super Admin')) {
                    $builder->where($builder->getModel()->getTable() . '.organization_id', Auth::user()->organization_id);
                }
            }
        });

        // Lie automatiquement chaque NOUVEL enregistrement à l'organisation de l'utilisateur
        static::creating(function (Model $model) {
            if (Auth::check() && !isset($model->organization_id)) {
                $model->organization_id = Auth::user()->organization_id;
            }
        });
    }

    public function organization(): BelongsTo
    {
        return $this->belongsTo(Organization::class);
    }
}
Étape 2 : Les Modèles Eloquent (Finalisés)
Voici les versions complètes de tous vos modèles, intégrant le trait BelongsToOrganization.

Fichier app/Models/Organization.php
PHP

<?php
namespace App\Models;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Str;
class Organization extends Model
{
    use HasFactory;
    protected $fillable = ['uuid', 'name', 'address', 'contact_email', 'status'];
    protected static function boot() { parent::boot(); static::creating(fn($model) => $model->uuid = $model->uuid ?? (string) Str::uuid()); }
    public function users(): HasMany { return $this->hasMany(User::class); }
    public function vehicles(): HasMany { return $this->hasMany(Vehicle::class); }
    public function drivers(): HasMany { return $this->hasMany(Driver::class); }
}
Fichier app/Models/User.php
PHP

<?php
namespace App\Models;
use App\Models\Concerns\BelongsToOrganization;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;
class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable, HasRoles, SoftDeletes, BelongsToOrganization;
    protected $fillable = ['name', 'first_name', 'last_name', 'email', 'phone', 'password', 'organization_id'];
    protected $hidden = ['password', 'remember_token'];
    protected $casts = ['email_verified_at' => 'datetime', 'password' => 'hashed'];
    public function driver() { return $this->hasOne(Driver::class); }
}
Fichier app/Models/Vehicle.php
PHP

<?php
namespace App\Models;
use App\Models\Concerns\BelongsToOrganization;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
class Vehicle extends Model
{
    use HasFactory, SoftDeletes, BelongsToOrganization;
    protected $fillable = [
        'registration_plate', 'vin', 'brand', 'model', 'color', 'photo_path', 'vehicle_type_id', 
        'fuel_type_id', 'transmission_type_id', 'status_id', 'manufacturing_year', 
        'acquisition_date', 'purchase_price', 'current_value', 'initial_mileage', 
        'current_mileage', 'engine_displacement_cc', 'power_hp', 'seats', 'notes', 'organization_id',
    ];
    // ... (toutes vos relations existantes)
}
Fichier app/Models/Driver.php
PHP

<?php
namespace App\Models;
use App\Models\Concerns\BelongsToOrganization;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
class Driver extends Model
{
    use HasFactory, SoftDeletes, BelongsToOrganization;
    protected $fillable = [
        'user_id', 'employee_number', 'first_name', 'last_name', 'photo_path', 'birth_date', 
        'blood_type', 'address', 'personal_phone', 'personal_email', 'license_number', 
        'license_category', 'license_issue_date', 'license_authority', 'license_expiry_date', 
        'recruitment_date', 'contract_end_date', 'status_id', 'emergency_contact_name', 
        'emergency_contact_phone', 'organization_id',
    ];
    // ... (toutes vos relations existantes)
}
Fichier app/Models/Assignment.php
PHP

<?php
namespace App\Models;
use App\Models\Concerns\BelongsToOrganization;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;
class Assignment extends Model
{
    use HasFactory, SoftDeletes, BelongsToOrganization;
    protected $fillable = [
        'vehicle_id', 'driver_id', 'start_datetime', 'end_datetime', 'start_mileage', 
        'end_mileage', 'reason', 'notes', 'created_by_user_id', 'organization_id',
    ];

    /**
     * Les attributs qui doivent être convertis en types natifs.
     * Laravel convertira automatiquement ces colonnes en instances Carbon.
     */
    protected $casts = [
        'start_datetime' => 'datetime',
        'end_datetime' => 'datetime',
    ];

    /**
     * Relation : Une affectation appartient à un véhicule.
     */
    public function vehicle(): BelongsTo
    {
        return $this->belongsTo(Vehicle::class);
    }

    /**
     * Relation : Une affectation appartient à un chauffeur.
     */
    public function driver(): BelongsTo
    {
        return $this->belongsTo(Driver::class);
    }

    /**
     * Relation : Une affectation est créée par un utilisateur.
     */
    public function creator(): BelongsTo
    {
        return $this->belongsTo(User::class, 'created_by_user_id');
    }

    // Pour la fiche remise
    public function handoverForm(): \Illuminate\Database\Eloquent\Relations\HasOne
    {
        return $this->hasOne(\App\Models\Handover\VehicleHandoverForm::class, 'assignment_id');
    }
}

--- END OF FILE: ./app/Models/Assignment.php ---


#############################################
./app/Models/FuelType.php
#############################################
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class FuelType extends Model
{
    use HasFactory;

    // Indique à Laravel que ce modèle n'utilise pas les colonnes created_at et updated_at.
    public $timestamps = false;

    // Définit le champ 'name' comme étant assignable en masse.
    protected $fillable = ['name'];
}

--- END OF FILE: ./app/Models/FuelType.php ---


#############################################
./app/Models/Organization.php
#############################################
<?php
namespace App\Models;

use App\Models\Handover\VehicleHandoverForm;
use App\Models\Maintenance\MaintenanceLog;
use App\Models\Maintenance\MaintenancePlan;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Support\Str;

class Organization extends Model
{
    use HasFactory;
    protected $fillable = ['uuid', 'name', 'address', 'contact_email', 'status'];

    protected static function boot()
    {
        parent::boot();
        static::creating(function ($model) {
            if (empty($model->uuid)) {
                $model->uuid = (string) Str::uuid();
            }
        });
    }

    public function users(): HasMany { return $this->hasMany(User::class); }
    public function vehicles(): HasMany { return $this->hasMany(Vehicle::class); }
    public function drivers(): HasMany { return $this->hasMany(Driver::class); }
    public function assignments(): HasMany { return $this->hasMany(Assignment::class); }
    public function maintenancePlans(): HasMany { return $this->hasMany(MaintenancePlan::class); }
    public function maintenanceLogs(): HasMany { return $this->hasMany(MaintenanceLog::class); }
    public function handoverForms(): HasMany { return $this->hasMany(VehicleHandoverForm::class); }
}

--- END OF FILE: ./app/Models/Organization.php ---


#############################################
./app/Models/User.php
#############################################
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasOne;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Foundation\Auth\User as Authenticatable;
use Illuminate\Notifications\Notifiable;
use Laravel\Sanctum\HasApiTokens;
use Spatie\Permission\Traits\HasRoles;

class User extends Authenticatable
{
    // CORRECTION : On retire "BelongsToOrganization" et on nettoie les doublons
    use HasApiTokens, HasFactory, Notifiable, HasRoles, SoftDeletes;

    /**
     * The attributes that are mass assignable.
     */
    protected $fillable = [
        'name',
        'first_name',
        'last_name',
        'email',
        'phone',
        'password',
        'organization_id',
    ];

    /**
     * The attributes that should be hidden for serialization.
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * The attributes that should be cast.
     */
    protected $casts = [
        'email_verified_at' => 'datetime',
        'password' => 'hashed',
    ];

    /**
     * Un utilisateur appartient toujours à une organisation.
     */
    public function organization(): BelongsTo
    {
        return $this->belongsTo(Organization::class);
    }

    /**
     * Un utilisateur peut avoir un profil de chauffeur.
     */
    public function driver(): HasOne
    {
        return $this->hasOne(Driver::class);
    }
}
--- END OF FILE: ./app/Models/User.php ---


#############################################
./app/Models/Maintenance/MaintenanceStatus.php
#############################################
<?php

namespace App\Models\Maintenance;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class MaintenanceStatus extends Model
{
    use HasFactory;

    /**
     * Indique si le modèle doit être horodaté.
     *
     * @var bool
     */
    public $timestamps = false;

    /**
     * Les attributs qui peuvent être assignés en masse.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
    ];
}

--- END OF FILE: ./app/Models/Maintenance/MaintenanceStatus.php ---


#############################################
./app/Models/Maintenance/RecurrenceUnit.php
#############################################
<?php

namespace App\Models\Maintenance;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class RecurrenceUnit extends Model
{
    use HasFactory;

    /**
     * Indique si le modèle doit être horodaté.
     *
     * @var bool
     */
    public $timestamps = false;

    /**
     * Les attributs qui peuvent être assignés en masse.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
    ];
}

--- END OF FILE: ./app/Models/Maintenance/RecurrenceUnit.php ---


#############################################
./app/Models/Maintenance/MaintenanceType.php
#############################################
<?php

namespace App\Models\Maintenance;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class MaintenanceType extends Model
{
    use HasFactory;

    /**
     * Indique si le modèle doit être horodaté.
     *
     * @var bool
     */
    public $timestamps = false;

    /**
     * Les attributs qui peuvent être assignés en masse.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'name',
        'description',
    ];
}

--- END OF FILE: ./app/Models/Maintenance/MaintenanceType.php ---


#############################################
./app/Models/Maintenance/MaintenancePlan.php
#############################################
<?php

namespace App\Models\Maintenance;

use App\Models\Concerns\BelongsToOrganization;
use App\Models\Vehicle;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\SoftDeletes;

class MaintenancePlan extends Model
{
    use HasFactory, SoftDeletes, BelongsToOrganization;

    /**
     * Les attributs qui peuvent être assignés en masse.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'vehicle_id',
        'maintenance_type_id',
        'recurrence_value',
        'recurrence_unit_id',
        'next_due_date',
        'next_due_mileage',
        'notes',
        'organization_id',
    ];

    /**
     * Les attributs qui doivent être convertis en types natifs.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'next_due_date' => 'date',
    ];

    /**
     * Relation : Un plan de maintenance appartient à un véhicule.
     */
    public function vehicle(): BelongsTo
    {
        return $this->belongsTo(Vehicle::class);
    }

    /**
     * Relation : Un plan de maintenance est d'un certain type.
     */
    public function maintenanceType(): BelongsTo
    {
        return $this->belongsTo(MaintenanceType::class);
    }

    /**
     * Relation : Un plan de maintenance a une unité de récurrence.
     */
    public function recurrenceUnit(): BelongsTo
    {
        return $this->belongsTo(RecurrenceUnit::class);
    }
}

--- END OF FILE: ./app/Models/Maintenance/MaintenancePlan.php ---


#############################################
./app/Models/Maintenance/MaintenanceLog.php
#############################################
<?php

namespace App\Models\Maintenance;

use App\Models\Concerns\BelongsToOrganization;
use App\Models\Vehicle;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;

class MaintenanceLog extends Model
{
    use HasFactory, SoftDeletes, BelongsToOrganization;

    /**
     * Les attributs qui peuvent être assignés en masse.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'vehicle_id',
        'maintenance_plan_id',
        'maintenance_type_id',
        'maintenance_status_id',
        'performed_on_date',
        'performed_at_mileage',
        'cost',
        'details',
        'performed_by',
        'organization_id',
    ];

    /**
     * Les attributs qui doivent être convertis en types natifs.
     *
     * @var array<string, string>
     */
    protected $casts = [
        'performed_on_date' => 'date',
        'cost' => 'decimal:2',
    ];

    /**
     * Relation : Un log de maintenance appartient à un véhicule.
     */
    public function vehicle(): BelongsTo
    {
        return $this->belongsTo(Vehicle::class);
    }

    /**
     * Relation : Un log peut être lié à un plan de maintenance (pour la maintenance préventive).
     */
    public function maintenancePlan(): BelongsTo
    {
        return $this->belongsTo(MaintenancePlan::class);
    }

    /**
     * Relation : Un log est d'un certain type de maintenance.
     */
    public function maintenanceType(): BelongsTo
    {
        return $this->belongsTo(MaintenanceType::class);
    }

    /**
     * Relation : Un log a un statut.
     */
    public function maintenanceStatus(): BelongsTo
    {
        return $this->belongsTo(MaintenanceStatus::class);
    }
}

--- END OF FILE: ./app/Models/Maintenance/MaintenanceLog.php ---


#############################################
./app/Models/VehicleType.php
#############################################
<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class VehicleType extends Model
{
    use HasFactory;
    // Indique à Laravel que ce modèle n'utilise pas les colonnes created_at et updated_at.
    public $timestamps = false;

    // Définit le champ 'name' comme étant assignable en masse.
    protected $fillable = ['name'];


}

--- END OF FILE: ./app/Models/VehicleType.php ---


#############################################
./app/Console/Kernel.php
#############################################
<?php

namespace App\Console;

use Illuminate\Console\Scheduling\Schedule;
use Illuminate\Foundation\Console\Kernel as ConsoleKernel;

class Kernel extends ConsoleKernel
{
    /**
     * Define the application's command schedule.
     */
    protected function schedule(Schedule $schedule): void
    {
        // $schedule->command('inspire')->hourly();
    }

    /**
     * Register the commands for the application.
     */
    protected function commands(): void
    {
        $this->load(__DIR__.'/Commands');

        require base_path('routes/console.php');
    }
}

--- END OF FILE: ./app/Console/Kernel.php ---


#############################################
./app/Providers/RouteServiceProvider.php
#############################################
<?php

namespace App\Providers;

use Illuminate\Cache\RateLimiting\Limit;
use Illuminate\Foundation\Support\Providers\RouteServiceProvider as ServiceProvider;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Facades\Route;

class RouteServiceProvider extends ServiceProvider
{
    /**
     * The path to your application's "home" route.
     *
     * Typically, users are redirected here after authentication.
     *
     * @var string
     */
    public const HOME = '/dashboard';

    /**
     * Define your route model bindings, pattern filters, and other route configuration.
     */
    public function boot(): void
    {
        RateLimiter::for('api', function (Request $request) {
            return Limit::perMinute(60)->by($request->user()?->id ?: $request->ip());
        });

        $this->routes(function () {
            Route::middleware('api')
                ->prefix('api')
                ->group(base_path('routes/api.php'));

            Route::middleware('web')
                ->group(base_path('routes/web.php'));
        });
    }
}

--- END OF FILE: ./app/Providers/RouteServiceProvider.php ---


#############################################
./app/Providers/BroadcastServiceProvider.php
#############################################
<?php

namespace App\Providers;

use Illuminate\Support\Facades\Broadcast;
use Illuminate\Support\ServiceProvider;

class BroadcastServiceProvider extends ServiceProvider
{
    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        Broadcast::routes();

        require base_path('routes/channels.php');
    }
}

--- END OF FILE: ./app/Providers/BroadcastServiceProvider.php ---


#############################################
./app/Providers/AuthServiceProvider.php
#############################################
<?php

namespace App\Providers;

// use Illuminate\Support\Facades\Gate;
use Illuminate\Foundation\Support\Providers\AuthServiceProvider as ServiceProvider;

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The model to policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [
        //
    ];

    /**
     * Register any authentication / authorization services.
     */
    public function boot(): void
    {
        //
    }
}

--- END OF FILE: ./app/Providers/AuthServiceProvider.php ---


#############################################
./app/Providers/EventServiceProvider.php
#############################################
<?php

namespace App\Providers;

use App\Models\User;                // <--- AJOUTEZ CETTE LIGNE
use App\Observers\UserObserver;    // <--- AJOUTEZ CETTE LIGNE
use App\Models\Driver; // <-- Ajouter
use App\Observers\DriverObserver; // <-- Ajouter
use Illuminate\Auth\Events\Registered;
use Illuminate\Auth\Listeners\SendEmailVerificationNotification;
use Illuminate\Foundation\Support\Providers\EventServiceProvider as ServiceProvider;
use Illuminate\Support\Facades\Event;

class EventServiceProvider extends ServiceProvider
{
    /**
     * The event to listener mappings for the application.
     *
     * @var array<class-string, array<int, class-string>>
     */
    protected $listen = [
        Registered::class => [
            SendEmailVerificationNotification::class,
        ],
    ];

    /**
     * Register any events for your application.
     */
    public function boot(): void
    {
        User::observe(UserObserver::class); // <--- AJOUTEZ CETTE LIGNE
        Driver::observe(DriverObserver::class); // <-- Ajouter cette ligne 
    }

    /**
     * Determine if events and listeners should be automatically discovered.
     */
    public function shouldDiscoverEvents(): bool
    {
        return false;
    }
}

--- END OF FILE: ./app/Providers/EventServiceProvider.php ---


#############################################
./app/Providers/AppServiceProvider.php
#############################################
<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;

class AppServiceProvider extends ServiceProvider
{
    /**
     * Register any application services.
     */
    public function register(): void
    {
        //
    }

    /**
     * Bootstrap any application services.
     */
    public function boot(): void
    {
        //
    }
}

--- END OF FILE: ./app/Providers/AppServiceProvider.php ---


#############################################
./app/Http/Kernel.php
#############################################
<?php

namespace App\Http;

use Illuminate\Foundation\Http\Kernel as HttpKernel;

class Kernel extends HttpKernel
{
    /**
     * The application's global HTTP middleware stack.
     *
     * These middleware are run during every request to your application.
     *
     * @var array<int, class-string|string>
     */

    protected $middleware = [
        // \App\Http\Middleware\TrustHosts::class,
        \App\Http\Middleware\TrustProxies::class,
        \Illuminate\Http\Middleware\HandleCors::class,
        \App\Http\Middleware\PreventRequestsDuringMaintenance::class,
        \Illuminate\Foundation\Http\Middleware\ValidatePostSize::class,
        \App\Http\Middleware\TrimStrings::class,
        \Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull::class,
    ];
	    /**
     * The application's route middleware groups.
     *
     * @var array<string, array<int, class-string|string>>
     */
    protected $middlewareGroups = [
        'web' => [
            \App\Http\Middleware\EncryptCookies::class,
            \Illuminate\Cookie\Middleware\AddQueuedCookiesToResponse::class,
            \Illuminate\Session\Middleware\StartSession::class,
            \Illuminate\View\Middleware\ShareErrorsFromSession::class,
            \App\Http\Middleware\VerifyCsrfToken::class,
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],

        'api' => [
            // \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class,
            \Illuminate\Routing\Middleware\ThrottleRequests::class.':api',
            \Illuminate\Routing\Middleware\SubstituteBindings::class,
        ],
    ];

    /**
     * The application's middleware aliases.
     *
     * Aliases may be used instead of class names to conveniently assign middleware to routes and groups.
     *
     * @var array<string, class-string|string>
     */
    protected $middlewareAliases = [
        'auth' => \App\Http\Middleware\Authenticate::class,
        'auth.basic' => \Illuminate\Auth\Middleware\AuthenticateWithBasicAuth::class,
        'auth.session' => \Illuminate\Session\Middleware\AuthenticateSession::class,
        'cache.headers' => \Illuminate\Http\Middleware\SetCacheHeaders::class,
        'can' => \Illuminate\Auth\Middleware\Authorize::class,
        'guest' => \App\Http\Middleware\RedirectIfAuthenticated::class,
        'password.confirm' => \Illuminate\Auth\Middleware\RequirePassword::class,
        'precognitive' => \Illuminate\Foundation\Http\Middleware\HandlePrecognitiveRequests::class,
        'signed' => \App\Http\Middleware\ValidateSignature::class,
        'throttle' => \Illuminate\Routing\Middleware\ThrottleRequests::class,
        'verified' => \Illuminate\Auth\Middleware\EnsureEmailIsVerified::class,

 // AJOUT PERMANANT :
	'role' => \Spatie\Permission\Middleware\RoleMiddleware::class,            
	'permission' => \Spatie\Permission\Middleware\PermissionMiddleware::class,
	'role_or_permission' => \Spatie\Permission\Middleware\RoleOrPermissionMiddleware::class, 

    ];
}

--- END OF FILE: ./app/Http/Kernel.php ---


#############################################
./app/Http/Middleware/ValidateSignature.php
#############################################
<?php

namespace App\Http\Middleware;

use Illuminate\Routing\Middleware\ValidateSignature as Middleware;

class ValidateSignature extends Middleware
{
    /**
     * The names of the query string parameters that should be ignored.
     *
     * @var array<int, string>
     */
    protected $except = [
        // 'fbclid',
        // 'utm_campaign',
        // 'utm_content',
        // 'utm_medium',
        // 'utm_source',
        // 'utm_term',
    ];
}

--- END OF FILE: ./app/Http/Middleware/ValidateSignature.php ---


#############################################
./app/Http/Middleware/TrustProxies.php
#############################################
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustProxies as Middleware;
use Illuminate\Http\Request;

class TrustProxies extends Middleware
{
    /**
     * The trusted proxies for this application.
     *
     * @var array<int, string>|string|null
     */
    protected $proxies;

    /**
     * The headers that should be used to detect proxies.
     *
     * @var int
     */
    protected $headers =
        Request::HEADER_X_FORWARDED_FOR |
        Request::HEADER_X_FORWARDED_HOST |
        Request::HEADER_X_FORWARDED_PORT |
        Request::HEADER_X_FORWARDED_PROTO |
        Request::HEADER_X_FORWARDED_AWS_ELB;
}

--- END OF FILE: ./app/Http/Middleware/TrustProxies.php ---


#############################################
./app/Http/Middleware/TrustHosts.php
#############################################
<?php

namespace App\Http\Middleware;

use Illuminate\Http\Middleware\TrustHosts as Middleware;

class TrustHosts extends Middleware
{
    /**
     * Get the host patterns that should be trusted.
     *
     * @return array<int, string|null>
     */
    public function hosts(): array
    {
        return [
            $this->allSubdomainsOfApplicationUrl(),
        ];
    }
}

--- END OF FILE: ./app/Http/Middleware/TrustHosts.php ---


#############################################
./app/Http/Middleware/VerifyCsrfToken.php
#############################################
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\VerifyCsrfToken as Middleware;

class VerifyCsrfToken extends Middleware
{
    /**
     * The URIs that should be excluded from CSRF verification.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

--- END OF FILE: ./app/Http/Middleware/VerifyCsrfToken.php ---


#############################################
./app/Http/Middleware/Authenticate.php
#############################################
<?php

namespace App\Http\Middleware;

use Illuminate\Auth\Middleware\Authenticate as Middleware;
use Illuminate\Http\Request;

class Authenticate extends Middleware
{
    /**
     * Get the path the user should be redirected to when they are not authenticated.
     */
    protected function redirectTo(Request $request): ?string
    {
        return $request->expectsJson() ? null : route('login');
    }
}

--- END OF FILE: ./app/Http/Middleware/Authenticate.php ---


#############################################
./app/Http/Middleware/TrimStrings.php
#############################################
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\TrimStrings as Middleware;

class TrimStrings extends Middleware
{
    /**
     * The names of the attributes that should not be trimmed.
     *
     * @var array<int, string>
     */
    protected $except = [
        'current_password',
        'password',
        'password_confirmation',
    ];
}

--- END OF FILE: ./app/Http/Middleware/TrimStrings.php ---


#############################################
./app/Http/Middleware/EncryptCookies.php
#############################################
<?php

namespace App\Http\Middleware;

use Illuminate\Cookie\Middleware\EncryptCookies as Middleware;

class EncryptCookies extends Middleware
{
    /**
     * The names of the cookies that should not be encrypted.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

--- END OF FILE: ./app/Http/Middleware/EncryptCookies.php ---


#############################################
./app/Http/Middleware/RedirectIfAuthenticated.php
#############################################
<?php

namespace App\Http\Middleware;

use App\Providers\RouteServiceProvider;
use Closure;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Symfony\Component\HttpFoundation\Response;

class RedirectIfAuthenticated
{
    /**
     * Handle an incoming request.
     *
     * @param  \Closure(\Illuminate\Http\Request): (\Symfony\Component\HttpFoundation\Response)  $next
     */
    public function handle(Request $request, Closure $next, string ...$guards): Response
    {
        $guards = empty($guards) ? [null] : $guards;

        foreach ($guards as $guard) {
            if (Auth::guard($guard)->check()) {
                return redirect(RouteServiceProvider::HOME);
            }
        }

        return $next($request);
    }
}

--- END OF FILE: ./app/Http/Middleware/RedirectIfAuthenticated.php ---


#############################################
./app/Http/Middleware/PreventRequestsDuringMaintenance.php
#############################################
<?php

namespace App\Http\Middleware;

use Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance as Middleware;

class PreventRequestsDuringMaintenance extends Middleware
{
    /**
     * The URIs that should be reachable while maintenance mode is enabled.
     *
     * @var array<int, string>
     */
    protected $except = [
        //
    ];
}

--- END OF FILE: ./app/Http/Middleware/PreventRequestsDuringMaintenance.php ---


#############################################
./app/Http/Requests/ProfileUpdateRequest.php
#############################################
<?php

namespace App\Http\Requests;

use App\Models\User;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class ProfileUpdateRequest extends FormRequest
{
    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    
public function rules(): array
{
    return [
        'first_name' => ['required', 'string', 'max:255'],
        'last_name' => ['required', 'string', 'max:255'],
        // 'name' => ['required', 'string', 'max:255'], // On peut supprimer cette ligne
        'email' => ['required', 'string', 'lowercase', 'email', 'max:255', Rule::unique(User::class)->ignore($this->user()->id)],
        'phone' => ['nullable', 'string', 'max:50', Rule::unique(User::class)->ignore($this->user()->id)],
    ];
}

}

--- END OF FILE: ./app/Http/Requests/ProfileUpdateRequest.php ---


#############################################
./app/Http/Requests/Auth/LoginRequest.php
#############################################
<?php

namespace App\Http\Requests\Auth;

use Illuminate\Auth\Events\Lockout;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\RateLimiter;
use Illuminate\Support\Str;
use Illuminate\Validation\ValidationException;

class LoginRequest extends FormRequest
{
    /**
     * Determine if the user is authorized to make this request.
     */
    public function authorize(): bool
    {
        return true;
    }

    /**
     * Get the validation rules that apply to the request.
     *
     * @return array<string, \Illuminate\Contracts\Validation\Rule|array|string>
     */
    public function rules(): array
    {
        return [
            'email' => ['required', 'string', 'email'],
            'password' => ['required', 'string'],
        ];
    }

    /**
     * Attempt to authenticate the request's credentials.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function authenticate(): void
    {
        $this->ensureIsNotRateLimited();

        if (! Auth::attempt($this->only('email', 'password'), $this->boolean('remember'))) {
            RateLimiter::hit($this->throttleKey());

            throw ValidationException::withMessages([
                'email' => trans('auth.failed'),
            ]);
        }

        RateLimiter::clear($this->throttleKey());
    }

    /**
     * Ensure the login request is not rate limited.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function ensureIsNotRateLimited(): void
    {
        if (! RateLimiter::tooManyAttempts($this->throttleKey(), 5)) {
            return;
        }

        event(new Lockout($this));

        $seconds = RateLimiter::availableIn($this->throttleKey());

        throw ValidationException::withMessages([
            'email' => trans('auth.throttle', [
                'seconds' => $seconds,
                'minutes' => ceil($seconds / 60),
            ]),
        ]);
    }

    /**
     * Get the rate limiting throttle key for the request.
     */
    public function throttleKey(): string
    {
        return Str::transliterate(Str::lower($this->string('email')).'|'.$this->ip());
    }
}

--- END OF FILE: ./app/Http/Requests/Auth/LoginRequest.php ---


#############################################
./app/Http/Requests/Admin/Organization/UpdateOrganizationRequest.php
#############################################
<?php
namespace App\Http\Requests\Admin\Organization;
use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;
class UpdateOrganizationRequest extends FormRequest
{
    public function authorize(): bool { return $this->user()->can('edit organizations'); }
    public function rules(): array {
        $organizationId = $this->route('organization')->id;
        return [ 'name' => ['required','string','max:255', Rule::unique('organizations')->ignore($organizationId)] ];
    }
}

--- END OF FILE: ./app/Http/Requests/Admin/Organization/UpdateOrganizationRequest.php ---


#############################################
./app/Http/Requests/Admin/Organization/StoreOrganizationRequest.php
#############################################
<?php
namespace App\Http\Requests\Admin\Organization;
use Illuminate\Foundation\Http\FormRequest;
class StoreOrganizationRequest extends FormRequest
{
    public function authorize(): bool { return $this->user()->can('create organizations'); }
    public function rules(): array {
        return [ 'name' => 'required|string|max:255|unique:organizations,name' ];
    }
}

--- END OF FILE: ./app/Http/Requests/Admin/Organization/StoreOrganizationRequest.php ---


#############################################
./app/Http/Requests/Admin/Driver/StoreDriverRequest.php
#############################################
<?php

namespace App\Http\Requests\Admin\Driver;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StoreDriverRequest extends FormRequest
{
    /**
     * Détermine si l'utilisateur est autorisé à faire cette requête.
     */
    public function authorize(): bool
    {
        return $this->user()->can('create drivers');
    }

    /**
     * Récupère les règles de validation qui s'appliquent à la requête.
     */
    public function rules(): array
    {
        return [
            // Étape 1
            'first_name' => ['required', 'string', 'max:255'],
            'last_name' => ['required', 'string', 'max:255'],
            'birth_date' => ['nullable', 'date'],
            'personal_phone' => ['nullable', 'string', 'max:50'],
            'address' => ['nullable', 'string', 'max:1000'],
            'blood_type' => ['nullable', 'string', 'max:10'],
            'photo' => ['nullable', 'image', 'mimes:jpeg,png,jpg,gif', 'max:2048'],

            // Étape 2
            'employee_number' => ['nullable', 'string', 'max:100', Rule::unique('drivers')->whereNull('deleted_at')],
            'recruitment_date' => ['nullable', 'date'],
            'contract_end_date' => ['nullable', 'date', 'after_or_equal:recruitment_date'],
            'status_id' => ['required', 'exists:driver_statuses,id'],
            'user_id' => ['nullable', 'sometimes', 'exists:users,id', Rule::unique('drivers')->whereNull('deleted_at')],

            // Étape 3
            'license_number' => ['nullable', 'string', 'max:100'],
            'license_category' => ['nullable', 'string', 'max:50'],
            'license_issue_date' => ['nullable', 'date'],
            'license_authority' => ['nullable', 'string', 'max:255'],
            'emergency_contact_name' => ['nullable', 'string', 'max:255'],
            'emergency_contact_phone' => ['nullable', 'string', 'max:50'],
        ];
    }
}

--- END OF FILE: ./app/Http/Requests/Admin/Driver/StoreDriverRequest.php ---


#############################################
./app/Http/Requests/Admin/Driver/UpdateDriverRequest.php
#############################################
<?php

namespace App\Http\Requests\Admin\Driver;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdateDriverRequest extends FormRequest
{
    public function authorize(): bool
    {
        return $this->user()->can('edit drivers');
    }

    public function rules(): array
    {
        $driverId = $this->route('driver')->id;

        return [
            'first_name' => ['required', 'string', 'max:255'],
            'last_name' => ['required', 'string', 'max:255'],
            'employee_number' => ['nullable', 'string', 'max:100', Rule::unique('drivers')->ignore($driverId)->whereNull('deleted_at')],
            'user_id' => ['nullable', 'sometimes', 'exists:users,id', Rule::unique('drivers')->ignore($driverId)->whereNull('deleted_at')],
            'status_id' => ['required', 'exists:driver_statuses,id'],
            // ... (toutes les autres règles identiques à StoreDriverRequest)
            'photo' => ['nullable', 'image', 'mimes:jpeg,png,jpg,gif', 'max:2048'],
            'blood_type' => ['nullable', 'string', 'max:10'],
            'birth_date' => ['nullable', 'date'],
            'personal_phone' => ['nullable', 'string', 'max:50'],
            'address' => ['nullable', 'string', 'max:1000'],
            'recruitment_date' => ['nullable', 'date'],
            'contract_end_date' => ['nullable', 'date', 'after_or_equal:recruitment_date'],
            'license_number' => ['nullable', 'string', 'max:100'],
            'license_category' => ['nullable', 'string', 'max:50'],
            'license_issue_date' => ['nullable', 'date'],
            'license_authority' => ['nullable', 'string', 'max:255'],
            'emergency_contact_name' => ['nullable', 'string', 'max:255'],
            'emergency_contact_phone' => ['nullable', 'string', 'max:50'],


        ];
    }
}

--- END OF FILE: ./app/Http/Requests/Admin/Driver/UpdateDriverRequest.php ---


#############################################
./app/Http/Requests/Admin/Vehicle/UpdateVehicleRequest.php
#############################################
<?php

namespace App\Http\Requests\Admin\Vehicle;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class UpdateVehicleRequest extends FormRequest
{
    public function authorize(): bool
    {
        return $this->user()->can('edit vehicles');
    }

    public function rules(): array
    {
        $vehicleId = $this->route('vehicle')->id;

        return [
            'registration_plate' => ['required', 'string', 'max:50', Rule::unique('vehicles')->ignore($vehicleId)->whereNull('deleted_at')],
            'vin' => ['nullable', 'string', 'size:17', Rule::unique('vehicles')->ignore($vehicleId)->whereNull('deleted_at')],
            'brand' => ['required', 'string', 'max:100'],
            'model' => ['required', 'string', 'max:100'],
            'color' => ['nullable', 'string', 'max:50'],
            'vehicle_type_id' => ['required', 'exists:vehicle_types,id'],
            'fuel_type_id' => ['required', 'exists:fuel_types,id'],
            'transmission_type_id' => ['required', 'exists:transmission_types,id'],
            'status_id' => ['required', 'exists:vehicle_statuses,id'],
            'manufacturing_year' => ['nullable', 'integer', 'digits:4', 'min:1950', 'max:'.(date('Y') + 1)],
            'acquisition_date' => ['nullable', 'date'],
            'purchase_price' => ['nullable', 'numeric', 'min:0'],
            'current_value' => ['nullable', 'numeric', 'min:0'],
            'initial_mileage' => ['nullable', 'integer', 'min:0'],
            'current_mileage' => ['nullable', 'integer', 'min:0', 'gte:' . $this->route('vehicle')->current_mileage],
            'engine_displacement_cc' => ['nullable', 'integer', 'min:0'],
            'power_hp' => ['nullable', 'integer', 'min:0'],
            'seats' => ['nullable', 'integer', 'min:1'],
            'notes' => ['nullable', 'string'],
            'photo' => ['nullable', 'image', 'mimes:jpeg,png,jpg,gif', 'max:2048'],
        ];
    }
}



--- END OF FILE: ./app/Http/Requests/Admin/Vehicle/UpdateVehicleRequest.php ---


#############################################
./app/Http/Requests/Admin/Vehicle/StoreVehicleRequest.php
#############################################
<?php

namespace App\Http\Requests\Admin\Vehicle;

use Illuminate\Foundation\Http\FormRequest;
use Illuminate\Validation\Rule;

class StoreVehicleRequest extends FormRequest
{
    /**
     * Détermine si l'utilisateur est autorisé à faire cette requête.
     */
    public function authorize(): bool
    {
        return $this->user()->can('create vehicles');
    }

    /**
     * Récupère les règles de validation qui s'appliquent à la requête.
     */
    public function rules(): array
    {
        return [
            'registration_plate' => ['required', 'string', 'max:50', Rule::unique('vehicles')->whereNull('deleted_at')],
            'vin' => ['nullable', 'string', 'size:17', Rule::unique('vehicles')->whereNull('deleted_at')],
            'brand' => ['required', 'string', 'max:100'],
            'model' => ['required', 'string', 'max:100'],
            'color' => ['nullable', 'string', 'max:50'],
            'vehicle_type_id' => ['required', 'exists:vehicle_types,id'],
            'fuel_type_id' => ['required', 'exists:fuel_types,id'],
            'transmission_type_id' => ['required', 'exists:transmission_types,id'],
            'status_id' => ['required', 'exists:vehicle_statuses,id'],
            'manufacturing_year' => ['nullable', 'integer', 'digits:4', 'min:1950', 'max:'.(date('Y') + 1)],
            'acquisition_date' => ['nullable', 'date'],
            'purchase_price' => ['nullable', 'numeric', 'min:0'],
            'current_value' => ['nullable', 'numeric', 'min:0'],
            'initial_mileage' => ['nullable', 'integer', 'min:0'],
            'current_mileage' => ['nullable', 'integer', 'min:0', 'gte:initial_mileage'], // This rule is for creation, should be initial_mileage
            'engine_displacement_cc' => ['nullable', 'integer', 'min:0'],
            'power_hp' => ['nullable', 'integer', 'min:0'],
            'seats' => ['nullable', 'integer', 'min:1'],
            'notes' => ['nullable', 'string'],
            'photo' => ['nullable', 'image', 'mimes:jpeg,png,jpg,gif', 'max:2048'],
        ];
    }
}



--- END OF FILE: ./app/Http/Requests/Admin/Vehicle/StoreVehicleRequest.php ---


#############################################
./app/Http/Controllers/Controller.php
#############################################
<?php

namespace App\Http\Controllers;

use Illuminate\Foundation\Auth\Access\AuthorizesRequests;
use Illuminate\Foundation\Validation\ValidatesRequests;
use Illuminate\Routing\Controller as BaseController;

class Controller extends BaseController
{
    use AuthorizesRequests, ValidatesRequests;
}

--- END OF FILE: ./app/Http/Controllers/Controller.php ---


#############################################
./app/Http/Controllers/ProfileController.php
#############################################
<?php

namespace App\Http\Controllers;

use App\Http\Requests\ProfileUpdateRequest;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Redirect;
use Illuminate\View\View;

class ProfileController extends Controller
{
    /**
     * Display the user's profile form.
     */
    public function edit(Request $request): View
    {
        return view('profile.edit', [
            'user' => $request->user(),
        ]);
    }

    /**
     * Update the user's profile information.
     */

   public function update(ProfileUpdateRequest $request): RedirectResponse
    {
    // La requête $request->validated() contiendra 'first_name', 'last_name', 'email', 'phone'
    // L'UserObserver s'occupera de mettre à jour 'name'
    $request->user()->fill($request->validated());

    if ($request->user()->isDirty('email')) {
        $request->user()->email_verified_at = null;
    }

    $request->user()->save();

    return Redirect::route('profile.edit')->with('status', 'profile-updated');
   }


    /**
     * Delete the user's account.
     */
    public function destroy(Request $request): RedirectResponse
    {
        $request->validateWithBag('userDeletion', [
            'password' => ['required', 'current_password'],
        ]);

        $user = $request->user();

        Auth::logout();

        $user->delete();

        $request->session()->invalidate();
        $request->session()->regenerateToken();

        return Redirect::to('/');
    }
}

--- END OF FILE: ./app/Http/Controllers/ProfileController.php ---


#############################################
./app/Http/Controllers/Auth/VerifyEmailController.php
#############################################
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Auth\EmailVerificationRequest;
use Illuminate\Http\RedirectResponse;

class VerifyEmailController extends Controller
{
    /**
     * Mark the authenticated user's email address as verified.
     */
    public function __invoke(EmailVerificationRequest $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(RouteServiceProvider::HOME.'?verified=1');
        }

        if ($request->user()->markEmailAsVerified()) {
            event(new Verified($request->user()));
        }

        return redirect()->intended(RouteServiceProvider::HOME.'?verified=1');
    }
}

--- END OF FILE: ./app/Http/Controllers/Auth/VerifyEmailController.php ---


#############################################
./app/Http/Controllers/Auth/PasswordResetLinkController.php
#############################################
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Password;
use Illuminate\View\View;

class PasswordResetLinkController extends Controller
{
    /**
     * Display the password reset link request view.
     */
    public function create(): View
    {
        return view('auth.forgot-password');
    }

    /**
     * Handle an incoming password reset link request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'email' => ['required', 'email'],
        ]);

        // We will send the password reset link to this user. Once we have attempted
        // to send the link, we will examine the response then see the message we
        // need to show to the user. Finally, we'll send out a proper response.
        $status = Password::sendResetLink(
            $request->only('email')
        );

        return $status == Password::RESET_LINK_SENT
                    ? back()->with('status', __($status))
                    : back()->withInput($request->only('email'))
                            ->withErrors(['email' => __($status)]);
    }
}

--- END OF FILE: ./app/Http/Controllers/Auth/PasswordResetLinkController.php ---


#############################################
./app/Http/Controllers/Auth/EmailVerificationNotificationController.php
#############################################
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class EmailVerificationNotificationController extends Controller
{
    /**
     * Send a new email verification notification.
     */
    public function store(Request $request): RedirectResponse
    {
        if ($request->user()->hasVerifiedEmail()) {
            return redirect()->intended(RouteServiceProvider::HOME);
        }

        $request->user()->sendEmailVerificationNotification();

        return back()->with('status', 'verification-link-sent');
    }
}

--- END OF FILE: ./app/Http/Controllers/Auth/EmailVerificationNotificationController.php ---


#############################################
./app/Http/Controllers/Auth/NewPasswordController.php
#############################################
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Auth\Events\PasswordReset;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Password;
use Illuminate\Support\Str;
use Illuminate\Validation\Rules;
use Illuminate\View\View;

class NewPasswordController extends Controller
{
    /**
     * Display the password reset view.
     */
    public function create(Request $request): View
    {
        return view('auth.reset-password', ['request' => $request]);
    }

    /**
     * Handle an incoming new password request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'token' => ['required'],
            'email' => ['required', 'email'],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Here we will attempt to reset the user's password. If it is successful we
        // will update the password on an actual user model and persist it to the
        // database. Otherwise we will parse the error and return the response.
        $status = Password::reset(
            $request->only('email', 'password', 'password_confirmation', 'token'),
            function ($user) use ($request) {
                $user->forceFill([
                    'password' => Hash::make($request->password),
                    'remember_token' => Str::random(60),
                ])->save();

                event(new PasswordReset($user));
            }
        );

        // If the password was successfully reset, we will redirect the user back to
        // the application's home authenticated view. If there is an error we can
        // redirect them back to where they came from with their error message.
        return $status == Password::PASSWORD_RESET
                    ? redirect()->route('login')->with('status', __($status))
                    : back()->withInput($request->only('email'))
                            ->withErrors(['email' => __($status)]);
    }
}

--- END OF FILE: ./app/Http/Controllers/Auth/NewPasswordController.php ---


#############################################
./app/Http/Controllers/Auth/PasswordController.php
#############################################
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules\Password;

class PasswordController extends Controller
{
    /**
     * Update the user's password.
     */
    public function update(Request $request): RedirectResponse
    {
        $validated = $request->validateWithBag('updatePassword', [
            'current_password' => ['required', 'current_password'],
            'password' => ['required', Password::defaults(), 'confirmed'],
        ]);

        $request->user()->update([
            'password' => Hash::make($validated['password']),
        ]);

        return back()->with('status', 'password-updated');
    }
}

--- END OF FILE: ./app/Http/Controllers/Auth/PasswordController.php ---


#############################################
./app/Http/Controllers/Auth/EmailVerificationPromptController.php
#############################################
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;

class EmailVerificationPromptController extends Controller
{
    /**
     * Display the email verification prompt.
     */
    public function __invoke(Request $request): RedirectResponse|View
    {
        return $request->user()->hasVerifiedEmail()
                    ? redirect()->intended(RouteServiceProvider::HOME)
                    : view('auth.verify-email');
    }
}

--- END OF FILE: ./app/Http/Controllers/Auth/EmailVerificationPromptController.php ---


#############################################
./app/Http/Controllers/Auth/RegisteredUserController.php
#############################################
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Registered;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules; // Assurez-vous que cette importation est présente

class RegisteredUserController extends Controller
{
    /**
     * Display the registration view.
     */
    public function create(): \Illuminate\View\View // Type de retour ajusté pour PHP 8+
    {
        return view('auth.register');
    }

    /**
     * Handle an incoming registration request.
     *
     * @throws \Illuminate\Validation\ValidationException
     */
    public function store(Request $request): RedirectResponse
    {
        $request->validate([
            'first_name' => ['required', 'string', 'max:255'],
            'last_name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'lowercase', 'email', 'max:255', 'unique:'.User::class],
            'phone' => ['nullable', 'string', 'max:50', 'unique:'.User::class], // Règle unique pour le téléphone aussi
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
        ]);

        // Le champ 'name' sera automatiquement rempli par UserObserver
        // lors de l'événement 'saving' ou 'creating'.
        $user = User::create([
            'first_name' => $request->first_name,
            'last_name' => $request->last_name,
            'email' => $request->email,
            'phone' => $request->phone,
            'password' => Hash::make($request->password),
        ]);

        event(new Registered($user));

        Auth::login($user);

        return redirect(RouteServiceProvider::HOME);
    }
}

--- END OF FILE: ./app/Http/Controllers/Auth/RegisteredUserController.php ---


#############################################
./app/Http/Controllers/Auth/AuthenticatedSessionController.php
#############################################
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Http\Requests\Auth\LoginRequest;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\View\View;

class AuthenticatedSessionController extends Controller
{
    /**
     * Display the login view.
     */
    public function create(): View
    {
        return view('auth.login');
    }

    /**
     * Handle an incoming authentication request.
     */
    public function store(LoginRequest $request): RedirectResponse
    {
        $request->authenticate();

        $request->session()->regenerate();

        return redirect()->intended(RouteServiceProvider::HOME);
    }

    /**
     * Destroy an authenticated session.
     */
    public function destroy(Request $request): RedirectResponse
    {
        Auth::guard('web')->logout();

        $request->session()->invalidate();

        $request->session()->regenerateToken();

        return redirect('/');
    }
}

--- END OF FILE: ./app/Http/Controllers/Auth/AuthenticatedSessionController.php ---


#############################################
./app/Http/Controllers/Auth/ConfirmablePasswordController.php
#############################################
<?php

namespace App\Http\Controllers\Auth;

use App\Http\Controllers\Controller;
use App\Providers\RouteServiceProvider;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\ValidationException;
use Illuminate\View\View;

class ConfirmablePasswordController extends Controller
{
    /**
     * Show the confirm password view.
     */
    public function show(): View
    {
        return view('auth.confirm-password');
    }

    /**
     * Confirm the user's password.
     */
    public function store(Request $request): RedirectResponse
    {
        if (! Auth::guard('web')->validate([
            'email' => $request->user()->email,
            'password' => $request->password,
        ])) {
            throw ValidationException::withMessages([
                'password' => __('auth.password'),
            ]);
        }

        $request->session()->put('auth.password_confirmed_at', time());

        return redirect()->intended(RouteServiceProvider::HOME);
    }
}

--- END OF FILE: ./app/Http/Controllers/Auth/ConfirmablePasswordController.php ---


#############################################
./app/Http/Controllers/Admin/UserController.php
#############################################
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\User;
use App\Models\Organization;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;
use Illuminate\Validation\Rules;
use Illuminate\View\View;
use Spatie\Permission\Models\Role;

class UserController extends Controller
{
    public function index(): View
    {
        $this->authorize('view users');
        $users = User::with(['roles', 'organization'])->orderBy('id', 'desc')->paginate(15);
        return view('admin.users.index', compact('users'));
    }

    public function create(): View
    {
        $this->authorize('create users');
        $roles = Role::all();
        $organizations = Organization::withoutGlobalScope('organization')->orderBy('name')->get();
        return view('admin.users.create', compact('roles', 'organizations'));
    }

    public function store(Request $request): RedirectResponse
    {
        $this->authorize('create users');
        $validated = $request->validate([
            'first_name' => ['required', 'string', 'max:255'],
            'last_name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:'.User::class],
            'password' => ['required', 'confirmed', Rules\Password::defaults()],
            'organization_id' => ['required', 'exists:organizations,id'],
            'roles' => 'sometimes|array',
            'roles.*' => 'exists:roles,id', // Valide que les IDs existent
        ]);

        $user = User::create([
            'first_name' => $validated['first_name'],
            'last_name' => $validated['last_name'],
            'email' => $validated['email'],
            'password' => Hash::make($validated['password']),
            'organization_id' => $validated['organization_id'],
        ]);

        // CORRECTION : On récupère les modèles de Rôle avant de synchroniser
        if (!empty($validated['roles'])) {
            $rolesToSync = Role::whereIn('id', $validated['roles'])->get();
            $user->syncRoles($rolesToSync);
        }

        return redirect()->route('admin.users.index')->with('success', 'Utilisateur créé avec succès.');
    }

    public function edit(User $user): View
    {
        $this->authorize('edit users');
        $roles = Role::all();
        $organizations = Organization::withoutGlobalScope('organization')->orderBy('name')->get();
        return view('admin.users.edit', compact('user', 'roles', 'organizations'));
    }

    public function update(Request $request, User $user): RedirectResponse
    {
        $this->authorize('edit users');
        $validated = $request->validate([
            'first_name' => ['required', 'string', 'max:255'],
            'last_name' => ['required', 'string', 'max:255'],
            'email' => ['required', 'string', 'email', 'max:255', 'unique:users,email,'.$user->id],
            'organization_id' => ['required', 'exists:organizations,id'],
            'roles' => 'sometimes|array',
            'roles.*' => 'exists:roles,id',
            'password' => ['nullable', 'confirmed', Rules\Password::defaults()],
        ]);

        $userData = [
            'first_name' => $validated['first_name'],
            'last_name' => $validated['last_name'],
            'email' => $validated['email'],
            'organization_id' => $validated['organization_id'],
        ];
        if (!empty($validated['password'])) {
            $userData['password'] = Hash::make($validated['password']);
        }

        $user->update($userData);

        // CORRECTION : On récupère les modèles de Rôle avant de synchroniser
        $rolesToSync = Role::whereIn('id', $validated['roles'] ?? [])->get();
        $user->syncRoles($rolesToSync);

        return redirect()->route('admin.users.index')->with('success', 'Utilisateur mis à jour avec succès.');
    }

    public function destroy(User $user): RedirectResponse
    {
        $this->authorize('delete users');
        if (auth()->id() == $user->id) {
            return back()->with('error', 'Vous ne pouvez pas supprimer votre propre compte.');
        }
        $user->delete();
        return redirect()->route('admin.users.index')->with('success', 'Utilisateur supprimé avec succès.');
    }
}
--- END OF FILE: ./app/Http/Controllers/Admin/UserController.php ---


#############################################
./app/Http/Controllers/Admin/OrganizationController.php
#############################################
<?php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Http\Requests\Admin\Organization\StoreOrganizationRequest;
use App\Http\Requests\Admin\Organization\UpdateOrganizationRequest;
use App\Models\Organization;
use Illuminate\Http\RedirectResponse;
use Illuminate\View\View;

class OrganizationController extends Controller
{
    public function index(): View
    {
        $this->authorize('view organizations');
        // On désactive le scope global pour que l'Admin puisse voir toutes les organisations
        $organizations = Organization::withoutGlobalScope('organization')
            ->withCount('users') // Compte les utilisateurs pour l'affichage
            ->paginate(15);
        return view('admin.organizations.index', compact('organizations'));
    }

    public function create(): View
    {
        $this->authorize('create organizations');
        return view('admin.organizations.create');
    }

    public function store(StoreOrganizationRequest $request): RedirectResponse
    {
        Organization::create($request->validated());
        return redirect()->route('admin.organizations.index')->with('success', 'Organisation créée avec succès.');
    }

    public function edit(Organization $organization): View
    {
        $this->authorize('edit organizations');
        return view('admin.organizations.edit', compact('organization'));
    }

    public function update(UpdateOrganizationRequest $request, Organization $organization): RedirectResponse
    {
        $organization->update($request->validated());
        return redirect()->route('admin.organizations.index')->with('success', 'Organisation mise à jour avec succès.');
    }

    public function destroy(Organization $organization): RedirectResponse
    {
        $this->authorize('delete organizations');
        // A FAIRE : Ajouter une logique pour empêcher la suppression de sa propre organisation
        $organization->delete();
        return redirect()->route('admin.organizations.index')->with('success', 'Organisation supprimée. Attention, toutes les données associées (véhicules, chauffeurs, etc.) ont également été supprimées.');
    }
}

--- END OF FILE: ./app/Http/Controllers/Admin/OrganizationController.php ---


#############################################
./app/Http/Controllers/Admin/Handover/VehicleHandoverController.php
#############################################
<?php
// /app/Http/Controllers/Admin/Handover/VehicleHandoverController.php

namespace App\Http\Controllers\Admin\Handover;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\Handover\VehicleHandoverForm;
use App\Models\Handover\VehicleHandoverDetail;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Str;
use Illuminate\View\View;

class VehicleHandoverController extends Controller
{
    // ... les méthodes create() et store() restent inchangées ...
    public function create(Assignment $assignment): View
    {
        $assignment->load(['vehicle.vehicleType', 'driver']);
        return view('admin.handovers.vehicles.create', compact('assignment'));
    }

    public function store(Request $request): RedirectResponse
    {
        $validated = $request->validate([
            'assignment_id' => 'required|exists:assignments,id|unique:vehicle_handover_forms,assignment_id',
            'issue_date' => 'required|date',
            'general_observations' => 'nullable|string|max:2000',
            'checklist' => 'required|array',
            'checklist.*.*' => 'required|in:Bon,Moyen,Mauvais,N/A,Oui,Non',
        ]);
        
        $assignment = Assignment::with('vehicle')->findOrFail($validated['assignment_id']);

        DB::transaction(function () use ($validated, $assignment) {
            $handoverForm = VehicleHandoverForm::create([
                'assignment_id' => $validated['assignment_id'],
                'issue_date' => $validated['issue_date'],
                'current_mileage' => $assignment->vehicle->current_mileage,
                'general_observations' => $validated['general_observations'],
            ]);

            foreach ($validated['checklist'] as $category => $items) {
                foreach ($items as $itemKey => $status) {
                    VehicleHandoverDetail::create([
                        'handover_form_id' => $handoverForm->id,
                        'category' => str_replace('_', ' ', $category),
                        'item' => str_replace('_', ' ', $itemKey),
                        'status' => $status,
                    ]);
                }
            }
        });

        return redirect()->route('admin.assignments.index')->with('success', 'Fiche de remise créée avec succès.');
    }

    public function show(VehicleHandoverForm $handover): View
    {
        $handover->load(['assignment.vehicle.vehicleType', 'assignment.driver', 'details']);
        $checklist = $handover->details->groupBy('category');
        return view('admin.handovers.vehicles.show', ['handoverForm' => $handover, 'checklist' => $checklist]);
    }


        public function edit(VehicleHandoverForm $handover): View
    {
        // On charge l'affectation pour pouvoir éditer son motif
        $handover->load(['assignment.vehicle.vehicleType', 'assignment.driver', 'details']);

        $detailsMap = $handover->details->mapWithKeys(function ($detail) {
            return [Str::slug($detail->category, '_') . '.' . Str::slug($detail->item, '_') => $detail->status];
        });

        return view('admin.handovers.vehicles.edit', compact('handover', 'detailsMap'));
    }

    public function update(Request $request, VehicleHandoverForm $handover): RedirectResponse
    {
        $validated = $request->validate([
            'issue_date' => 'required|date',
            'general_observations' => 'nullable|string|max:2000',
            'reason' => 'nullable|string|max:500', // Validation du motif
            'checklist' => 'required|array',
            'checklist.*.*' => 'required|in:Bon,Moyen,Mauvais,N/A,Oui,Non',
        ]);

        DB::transaction(function () use ($validated, $request, $handover) {
            // **LA CORRECTION CLÉ**
            // 1. Mettre à jour le motif sur le modèle d'affectation parent
            $handover->assignment()->update([
                'reason' => $request->reason,
            ]);

            // 2. Mettre à jour les champs propres à la fiche de remise
            $handover->update([
                'issue_date' => $validated['issue_date'],
                'general_observations' => $validated['general_observations'],
            ]);

            // 3. Mettre à jour la checklist
            $handover->details()->delete();
            foreach ($validated['checklist'] as $category => $items) {
                foreach ($items as $itemKey => $status) {
                    VehicleHandoverDetail::create([
                        'handover_form_id' => $handover->id,
                        'category' => str_replace('_', ' ', $category),
                        'item' => str_replace('_', ' ', $itemKey),
                        'status' => $status,
                    ]);
                }
            }
        });

        return redirect()->route('admin.handovers.vehicles.show', $handover)->with('success', 'Fiche de remise mise à jour avec succès.');
    }


    /**
     * Gère le téléversement de la fiche signée et archivée.
     */
    public function uploadSigned(Request $request, VehicleHandoverForm $handover): RedirectResponse
    {
        $validated = $request->validate([
            'signed_form' => ['required', 'file', 'mimes:pdf,jpg,jpeg,png', 'max:5120'], // 5MB max
        ]);

        // Supprimer l'ancienne fiche signée si elle existe
        if ($handover->signed_form_path) {
            Storage::disk('public')->delete($handover->signed_form_path);
        }

        // Enregistrer le nouveau fichier
        $path = $request->file('signed_form')->store('handovers/signed', 'public');
        $handover->update(['signed_form_path' => $path]);

        return back()->with('success', 'Fiche signée téléversée avec succès.');
    }

}
--- END OF FILE: ./app/Http/Controllers/Admin/Handover/VehicleHandoverController.php ---


#############################################
./app/Http/Controllers/Admin/DriverController.php
#############################################
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Driver;
use App\Models\DriverStatus;
use App\Models\User;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Validation\Rule;
use Illuminate\View\View;
use App\Http\Requests\Admin\Driver\StoreDriverRequest; // <-- AJOUT
use App\Http\Requests\Admin\Driver\UpdateDriverRequest; // <-- AJOUT

class DriverController extends Controller
{
    // ... (index et create sont déjà corrects) ...
    ////////_____OK
    public function index(Request $request): View
    {
        $this->authorize('view drivers');

        $perPage = $request->query('per_page', 15);
        $query = Driver::query()->with(['driverStatus', 'user']);

        // AJOUT : Logique pour voir les archives
        if ($request->query('view_deleted')) {
            $query->onlyTrashed();
        }

        // Filtre par Statut
        if ($request->filled('status_id')) {
            $query->where('status_id', $request->status_id);
        }

        // Moteur de Recherche (CORRIGÉ pour être insensible à la casse)
        if ($request->filled('search')) {
            $searchTerm = strtolower($request->search); // Convertit le terme de recherche en minuscules
            $query->where(function ($q) use ($searchTerm) {
                $q->whereRaw('LOWER(first_name) LIKE ?', ["%{$searchTerm}%"])
                  ->orWhereRaw('LOWER(last_name) LIKE ?', ["%{$searchTerm}%"])
                  ->orWhereRaw("LOWER(CONCAT(first_name, ' ', last_name)) LIKE ?", ["%{$searchTerm}%"])
                  ->orWhereRaw('LOWER(employee_number) LIKE ?', ["%{$searchTerm}%"])
                  ->orWhereRaw('LOWER(license_number) LIKE ?', ["%{$searchTerm}%"]);
            });
        }

        $drivers = $query->orderBy('last_name')->orderBy('first_name')->paginate($perPage)->withQueryString();
        $driverStatuses = DriverStatus::orderBy('name')->get();

        return view('admin.drivers.index', [
            'drivers' => $drivers,
            'driverStatuses' => $driverStatuses,
            'filters' => $request->only(['search', 'status_id', 'per_page', 'view_deleted']),
        ]);
    }



    public function store(StoreDriverRequest $request): RedirectResponse
    {
        $validatedData = $request->validated();
        if ($request->hasFile('photo')) {
            $validatedData['photo_path'] = $request->file('photo')->store('drivers/photos', 'public');
        }
        Driver::create($validatedData);
        return redirect()->route('admin.drivers.index')->with('success', 'Nouveau chauffeur ajouté avec succès.');
    }
    ////////____OK
    public function edit(Driver $driver): View
    {
        $this->authorize('edit drivers');
        $linkableUsers = User::whereDoesntHave('driver')->orWhere('id', $driver->user_id)->orderBy('name')->get();
        $driverStatuses = DriverStatus::orderBy('name')->get();
        return view('admin.drivers.edit', compact('driver', 'linkableUsers', 'driverStatuses'));
    }

    public function update(UpdateDriverRequest $request, Driver $driver): RedirectResponse
    {
        $validatedData = $request->validated();
        if ($request->hasFile('photo')) {
            if ($driver->photo_path) {
                Storage::disk('public')->delete($driver->photo_path);
            }
            $validatedData['photo_path'] = $request->file('photo')->store('drivers/photos', 'public');
        }
        $driver->update($validatedData);
        return redirect()->route('admin.drivers.index')->with('success', "Le chauffeur {$driver->first_name} {$driver->last_name} a été mis à jour.");
    }

    // ... (destroy, restore, forceDelete sont déjà corrects) ...

      /**
     * Affiche la liste des chauffeurs avec une recherche insensible à la casse.
     */

    public function create(): View
    {
        $this->authorize('create drivers');
        $linkableUsers = User::whereDoesntHave('driver')->orderBy('name')->get();
        $driverStatuses = DriverStatus::orderBy('name')->get();
        return view('admin.drivers.create', compact('linkableUsers', 'driverStatuses'));
    }


    public function destroy(Driver $driver): RedirectResponse
    {
        $this->authorize('delete drivers');
        $driver->delete();
        return redirect()->route('admin.drivers.index')->with('success', "Le chauffeur {$driver->first_name} a été archivé.");
    }

     public function restore($driverId): RedirectResponse
    {
        $this->authorize('restore drivers');
        $driver = Driver::onlyTrashed()->findOrFail($driverId);
        $driver->restore();
        return redirect()->route('admin.drivers.index', ['view_deleted' => 'true'])->with('success', "Le chauffeur {$driver->first_name} a été restauré.");
    }

    public function forceDelete($driverId): RedirectResponse
    {
        $this->authorize('force delete drivers');
        $driver = Driver::onlyTrashed()->findOrFail($driverId);
        if ($driver->photo_path) {
            Storage::disk('public')->delete($driver->photo_path);
        }
        $driver->forceDelete();
        return redirect()->route('admin.drivers.index', ['view_deleted' => 'true'])->with('success', 'Le chauffeur a été supprimé définitivement.');
    }

    private function getValidationRules(?int $driverId = null): array
    {
        return [
            'first_name' => ['required', 'string', 'max:255'],
            'last_name' => ['required', 'string', 'max:255'],
            'employee_number' => ['nullable', 'string', 'max:100', Rule::unique('drivers')->ignore($driverId)->whereNull('deleted_at')],
            'user_id' => ['nullable', 'sometimes', 'exists:users,id', Rule::unique('drivers')->ignore($driverId)->whereNull('deleted_at')],
            'status_id' => ['required', 'exists:driver_statuses,id'],
            'birth_date' => ['nullable', 'date'],
            'personal_phone' => ['nullable', 'string', 'max:50'],
            'address' => ['nullable', 'string', 'max:1000'],
            'license_number' => ['nullable', 'string', 'max:100'],
            'license_category' => ['nullable', 'string', 'max:50'],
            'license_issue_date' => ['nullable', 'date'],
            'license_authority' => ['nullable', 'string', 'max:255'],
            'recruitment_date' => ['nullable', 'date'],
            'contract_end_date' => ['nullable', 'date', 'after_or_equal:recruitment_date'],
            'emergency_contact_name' => ['nullable', 'string', 'max:255'],
            'emergency_contact_phone' => ['nullable', 'string', 'max:50'],
            'photo' => ['nullable', 'image', 'mimes:jpeg,png,jpg,gif', 'max:2048'],
            'blood_type' => ['nullable', 'string', 'max:10'],
            'personal_email' => ['nullable', 'email', 'max:255'],
        ];
    }





}


--- END OF FILE: ./app/Http/Controllers/Admin/DriverController.php ---


#############################################
./app/Http/Controllers/Admin/VehicleController.php
#############################################
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\FuelType;
use App\Models\TransmissionType;
use App\Models\Vehicle;
use App\Models\VehicleStatus;
use App\Models\VehicleType;
use Carbon\Carbon;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;
use Illuminate\Validation\Rule;
use Illuminate\View\View;
use League\Csv\Reader;
use League\Csv\Statement;
// On importe nos nouvelles Form Requests
use App\Http\Requests\Admin\Vehicle\StoreVehicleRequest;
use App\Http\Requests\Admin\Vehicle\UpdateVehicleRequest;





class VehicleController extends Controller
{
    /**
     * Affiche la liste des véhicules.
     */
    public function index(Request $request): View
    {
        $this->authorize('view vehicles');
        $perPage = $request->query('per_page', 15);
        $query = Vehicle::query()->with(['vehicleType', 'vehicleStatus']);

        // AJOUT : Logique pour voir les archives
        if ($request->query('view_deleted')) {
            $query->onlyTrashed();
        }

        if ($request->filled('status_id')) {
            $query->where('status_id', $request->status_id);
        }

        if ($request->filled('search')) {
            $searchTerm = strtolower($request->search);
            $query->where(function ($q) use ($searchTerm) {
                $q->whereRaw('LOWER(registration_plate) LIKE ?', ['%' . $searchTerm . '%'])
                ->orWhereRaw('LOWER(brand) LIKE ?', ['%' . $searchTerm . '%'])
                ->orWhereRaw('LOWER(model) LIKE ?', ['%' . $searchTerm . '%'])
                ->orWhereHas('vehicleType', function ($subQuery) use ($searchTerm) {
                    $subQuery->whereRaw('LOWER(name) LIKE ?', ['%' . $searchTerm . '%']);
                });
            });
        }

        $vehicles = $query->orderBy('id', 'desc')->paginate($perPage)->withQueryString();
        $vehicleStatuses = VehicleStatus::orderBy('name')->get();

        return view('admin.vehicles.index', [
            'vehicles' => $vehicles,
            'vehicleStatuses' => $vehicleStatuses,
            'filters' => $request->only(['search', 'status_id', 'per_page', 'view_deleted']),
        ]);
    }


        /**
     * Affiche le formulaire de création.
     */
    public function create(): View
    {
        $this->authorize('create vehicles');
        $vehicleTypes = VehicleType::orderBy('name')->get();
        $fuelTypes = FuelType::orderBy('name')->get();
        $transmissionTypes = TransmissionType::orderBy('name')->get();
        $vehicleStatuses = VehicleStatus::orderBy('name')->get();
        return view('admin.vehicles.create', compact('vehicleTypes', 'fuelTypes', 'transmissionTypes', 'vehicleStatuses'));
    }


     /**
     * Enregistre un nouveau véhicule.
     */
    public function store(StoreVehicleRequest $request): RedirectResponse
    {
        $this->authorize('create vehicles');
        $validatedData = $request->validated();

        if ($request->hasFile('photo')) {
            $validatedData['photo_path'] = $request->file('photo')->store('vehicles/photos', 'public');
        }
        $validatedData['current_mileage'] = $validatedData['initial_mileage'];

        Vehicle::create($validatedData);
        return redirect()->route('admin.vehicles.index')->with('success', 'Nouveau véhicule ajouté avec succès.');
    }


    /**
     * Affiche une ressource spécifique.
     */
    public function show(Vehicle $vehicle)
    {
        $this->authorize('view vehicles');
        return redirect()->route('admin.vehicles.edit', $vehicle);
    }

        /**
     * Affiche le formulaire de modification.
     */
    public function edit(Vehicle $vehicle): View
    {
        $this->authorize('edit vehicles');
        $vehicleTypes = VehicleType::orderBy('name')->get();
        $fuelTypes = FuelType::orderBy('name')->get();
        $transmissionTypes = TransmissionType::orderBy('name')->get();
        $vehicleStatuses = VehicleStatus::orderBy('name')->get();
        return view('admin.vehicles.edit', compact('vehicle', 'vehicleTypes', 'fuelTypes', 'transmissionTypes', 'vehicleStatuses'));
    }


    /**
     * Met à jour un véhicule existant en utilisant une Form Request.
     */
    public function update(UpdateVehicleRequest $request, Vehicle $vehicle): RedirectResponse
    {
        $validatedData = $request->validated();
        if ($request->hasFile('photo')) {
            if ($vehicle->photo_path) {
                Storage::disk('public')->delete($vehicle->photo_path);
            }
            $validatedData['photo_path'] = $request->file('photo')->store('vehicles/photos', 'public');
        }
        $vehicle->update($validatedData);
        return redirect()->route('admin.vehicles.index')->with('success', 'Les informations du véhicule ont été mises à jour.');
    }



  //////////////////////////// ARCHIVER SUPPRIMER ET RESTAURER

     /**
     * Archive un véhicule.
     */
    public function destroy(Vehicle $vehicle): RedirectResponse
    {
        $this->authorize('delete vehicles');
        $vehicle->delete();
        return redirect()->route('admin.vehicles.index')->with('success', "Le véhicule {$vehicle->registration_plate} a été archivé.");
    }

    /**
     * Restaure un véhicule archivé.
     */
    public function restore($vehicleId): RedirectResponse
    {
        $this->authorize('restore vehicles');
        $vehicle = Vehicle::onlyTrashed()->findOrFail($vehicleId);
        $vehicle->restore();
        return redirect()->route('admin.vehicles.index', ['view_deleted' => 'true'])->with('success', "Le véhicule {$vehicle->registration_plate} a été restauré.");
    }

    /**
     * Supprime définitivement un véhicule.
     */
    public function forceDelete($vehicleId): RedirectResponse
    {
        $this->authorize('force delete vehicles');
        $vehicle = Vehicle::onlyTrashed()->findOrFail($vehicleId);
        if ($vehicle->photo_path) {
            Storage::disk('public')->delete($vehicle->photo_path);
        }
        $vehicle->forceDelete();
        return redirect()->route('admin.vehicles.index', ['view_deleted' => 'true'])->with('success', 'Le véhicule a été supprimé définitivement.');
    }

    //////////////////////////  FIN DES METHODES DE SUPPRIMER RESTAURER


    /**
     * Affiche le formulaire pour l'importation de véhicules via un fichier CSV.
     */
    public function showImportForm(): View
    {
        $this->authorize('create vehicles');
        return view('admin.vehicles.import');
    }

    /**
     * Génère et télécharge un fichier CSV modèle avec des en-têtes en français et un exemple.
     */
    public function downloadTemplate()
    {
        $this->authorize('create vehicles');
        $headers = ['Content-Type' => 'text/csv; charset=utf-8', 'Content-Disposition' => 'attachment; filename="template_import_vehicules.csv"'];
        $columns = array_keys($this->getImportHeaderMap());
        $exampleRow = [
            'AA-123-BB', '1G1YB2D33E4F56789', 'Renault', 'Clio', 'Grise',
            'Berline', 'Diesel', 'Manuelle', 'En service',
            '2022', '15/01/2023', '2500000.00', '2400000.00',
            '15000', '1461', '90', '5', 'Véhicule de service pour le département commercial.'
        ];
        $callback = function() use ($columns, $exampleRow) {
            $file = fopen('php://output', 'w');
            fprintf($file, chr(0xEF).chr(0xBB).chr(0xBF));
            fputcsv($file, $columns);
            fputcsv($file, $exampleRow);
            fclose($file);
        };
        return response()->stream($callback, 200, $headers);
    }

    /**
     * Traite le fichier CSV uploadé pour l'importation de véhicules.
     */
    public function handleImport(Request $request): RedirectResponse
    {
        $this->authorize('create vehicles');
        $request->validate(['csv_file' => ['required', 'file', 'mimes:csv,txt']]);

        $vehicleTypes = VehicleType::pluck('id', 'name')->mapWithKeys(fn($id, $name) => [strtolower($name) => $id]);
        $fuelTypes = FuelType::pluck('id', 'name')->mapWithKeys(fn($id, $name) => [strtolower($name) => $id]);
        $transmissionTypes = TransmissionType::pluck('id', 'name')->mapWithKeys(fn($id, $name) => [strtolower($name) => $id]);
        $vehicleStatuses = VehicleStatus::pluck('id', 'name')->mapWithKeys(fn($id, $name) => [strtolower($name) => $id]);

        $headerMap = $this->getImportHeaderMap();

        $path = $request->file('csv_file')->getRealPath();
        $csv = Reader::createFromPath($path, 'r');
        $headerFromFile = array_map(fn($h) => trim(preg_replace('/^\\x{FEFF}/u', '', $h)), $csv->fetchOne());
        $csv->setHeaderOffset(0);
        $records = Statement::create()->process($csv, $headerFromFile);

        $successCount = 0;
        $errorRows = [];
        $rowNumber = 1;

        foreach ($records as $record) {
            $rowNumber++;

            $data = [];
            foreach ($headerMap as $frenchHeader => $systemKey) {
                $value = $record[$frenchHeader] ?? null;
                $data[$systemKey] = ($value === '' || $value === null) ? null : trim($value);
            }

            if (empty($data['vehicle_type_name'])) $data['vehicle_type_name'] = 'Berline';
            if (empty($data['transmission_type_name'])) $data['transmission_type_name'] = 'Manuelle';
            if (empty($data['status_name'])) $data['status_name'] = 'En attente';

            if (!empty($data['acquisition_date'])) {
                try {
                    $data['acquisition_date'] = Carbon::createFromFormat('d/m/Y', $data['acquisition_date'])->format('Y-m-d');
                } catch (\Exception $e) {
                    // Laisser la date originale, le validateur Laravel échouera.
                }
            }

            $dataToValidate = $this->prepareDataForValidation($data, $vehicleTypes, $fuelTypes, $transmissionTypes, $vehicleStatuses);

            $validator = Validator::make($dataToValidate, $this->getValidationRules());

            if ($validator->fails()) {
                $errorRows[] = ['row_number' => $rowNumber, 'errors' => $validator->errors()->all(), 'data' => $record];
            } else {
                $validatedData = $validator->validated();
                $validatedData["current_mileage"] = $validatedData["initial_mileage"] ?? 0;

                Vehicle::create($validatedData);
                $successCount++;
            }
        }

        return redirect()->route('admin.vehicles.import.results')
            ->with('successCount', $successCount)
            ->with('errorRows', $errorRows);
    }

    /**
     * Affiche la page des résultats de l'importation.
     */
    public function showImportResults(): View
    {
        $successCount = session('successCount', 0);
        $errorRows = session('errorRows', []);
        return view('admin.vehicles.import-results', compact('successCount', 'errorRows'));
    }

    /**
     * Méthode privée pour centraliser la map des en-têtes CSV.
     */
    private function getImportHeaderMap(): array
    {
        return [
            'Immatriculation*' => 'registration_plate', 'N° de Série (VIN)' => 'vin',
            'Marque*' => 'brand', 'Modèle*' => 'model', 'Couleur' => 'color',
            'Type de Véhicule*' => 'vehicle_type_name', 'Type de Carburant*' => 'fuel_type_name',
            'Type de Transmission*' => 'transmission_type_name', 'Statut Initial*' => 'status_name',
            'Année de Fabrication' => 'manufacturing_year', 'Date d\'Acquisition' => 'acquisition_date',
            'Prix d\'Achat (DA)' => 'purchase_price', 'Valeur Actuelle (DA)' => 'current_value',
            'Kilométrage Initial' => 'initial_mileage', 'Cylindrée (cc)' => 'engine_displacement_cc',
            'Puissance (CV)' => 'power_hp', 'Nombre de Places' => 'seats', 'Notes' => 'notes',
        ];
    }

    /**
     * Prépare les données pour la validation.
     */
    private function prepareDataForValidation(array $data, $vehicleTypes, $fuelTypes, $transmissionTypes, $vehicleStatuses): array
    {
        $dataToValidate = $data;
        $dataToValidate['vehicle_type_id'] = $vehicleTypes[strtolower($data['vehicle_type_name'] ?? '')] ?? null;
        $dataToValidate['fuel_type_id'] = $fuelTypes[strtolower($data['fuel_type_name'] ?? '')] ?? null;
        $dataToValidate['transmission_type_id'] = $transmissionTypes[strtolower($data['transmission_type_name'] ?? '')] ?? null;
        $dataToValidate['status_id'] = $vehicleStatuses[strtolower($data['status_name'] ?? '')] ?? null;

        // Assurer que les champs numériques vides deviennent 0 pour la validation/création
        $dataToValidate['initial_mileage'] = $data['initial_mileage'] ?? 0;

        return $dataToValidate;
    }

     /**
     * Centralise les règles de validation pour les véhicules.
     */
    private function getValidationRules(?int $vehicleId = null): array
    {
        $rules = [
            'registration_plate' => ['required', 'string', 'max:50', Rule::unique('vehicles')->ignore($vehicleId)->whereNull('deleted_at')],
            'vin' => ['nullable', 'string', 'size:17', Rule::unique('vehicles')->ignore($vehicleId)->whereNull('deleted_at')],
            'brand' => ['required', 'string', 'max:100'],
            'model' => ['required', 'string', 'max:100'],
            'color' => ['nullable', 'string', 'max:50'],
            'vehicle_type_id' => ['required', 'exists:vehicle_types,id'],
            'fuel_type_id' => ['required', 'exists:fuel_types,id'],
            'transmission_type_id' => ['required', 'exists:transmission_types,id'],
            'status_id' => ['required', 'exists:vehicle_statuses,id'],
            'manufacturing_year' => ['nullable', 'integer', 'digits:4'],
            'acquisition_date' => ['nullable', 'date'],
            'purchase_price' => ['nullable', 'numeric', 'min:0'],
            'current_value' => ['nullable', 'numeric', 'min:0'],
            'engine_displacement_cc' => ['nullable', 'integer', 'min:0'],
            'power_hp' => ['nullable', 'integer', 'min:0'],
            'seats' => ['nullable', 'integer', 'min:1'],
            'notes' => ['nullable', 'string'],
            'photo' => ['nullable', 'image', 'mimes:jpeg,png,jpg,gif', 'max:2048'],
        ];

        if ($vehicleId) {
            // Règle pour la mise à jour
            $vehicle = Vehicle::find($vehicleId);
            $rules['current_mileage'] = ['required', 'integer', 'min:0', 'gte:' . ($vehicle->current_mileage ?? 0)];
        } else {
            // Règles pour la création
            $rules["initial_mileage"] = ["nullable", "integer", "min:0"];
            $rules["current_mileage"] = ["nullable", "integer", "min:0"];
        }

        return $rules;
    }
}



--- END OF FILE: ./app/Http/Controllers/Admin/VehicleController.php ---


#############################################
./app/Http/Controllers/Admin/DashboardController.php
#############################################
<?php
namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\View\View;

class DashboardController extends Controller
{
    /**
     * Affiche le tableau de bord principal de l'application.
     */
    public function index(): View
    {
        // Pour l'instant, il affiche une vue simple.
        // Plus tard, nous y ajouterons des statistiques globales.
        return view('dashboard'); 
    }
}

--- END OF FILE: ./app/Http/Controllers/Admin/DashboardController.php ---


#############################################
./app/Http/Controllers/Admin/AssignmentController.php
#############################################
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\Assignment;
use App\Models\Driver;
use App\Models\DriverStatus;
use App\Models\User;
use App\Models\Vehicle;
use App\Models\VehicleStatus;
use Carbon\Carbon;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Validator; // <--- L'INSTRUCTION CAPITALE QUI MANQUAIT
use Illuminate\Validation\Rule;
use Illuminate\View\View;

class AssignmentController extends Controller
{


    ////////////////____________ lE RESTE DES FONCTIONS
    /**
     * Affiche la liste des affectations avec filtres, recherche et pagination.
     */
    /**
     * Affiche la liste des affectations avec une recherche insensible à la casse.
     */
    public function index(Request $request): View
    {
        $this->authorize('view assignments');

        $perPage = $request->query('per_page', 15);
        $query = Assignment::with(['vehicle', 'driver']);

        // Moteur de Recherche (CORRIGÉ pour être insensible à la casse)
        if ($request->filled('search')) {
            $searchTerm = strtolower($request->search);
            $query->where(function ($q) use ($searchTerm) {
                $q->whereHas('vehicle', function ($subQuery) use ($searchTerm) {
                    $subQuery->whereRaw('LOWER(registration_plate) LIKE ?', ["%{$searchTerm}%"])
                             ->orWhereRaw('LOWER(brand) LIKE ?', ["%{$searchTerm}%"])
                             ->orWhereRaw('LOWER(model) LIKE ?', ["%{$searchTerm}%"]);
                })
                ->orWhereHas('driver', function ($subQuery) use ($searchTerm) {
                    $subQuery->whereRaw('LOWER(first_name) LIKE ?', ["%{$searchTerm}%"])
                             ->orWhereRaw('LOWER(last_name) LIKE ?', ["%{$searchTerm}%"])
                             ->orWhereRaw("LOWER(CONCAT(first_name, ' ', last_name)) LIKE ?", ["%{$searchTerm}%"]);
                });
            });
        }

        $assignments = $query->orderBy('start_datetime', 'desc')->paginate($perPage)->withQueryString();

        return view('admin.assignments.index', [
            'assignments' => $assignments,
            'filters' => $request->only(['search', 'per_page']),
        ]);
    }
    
     /**
     * Affiche le formulaire de création en ne listant que les ressources disponibles.
     */
    public function create(): View
    {
        $this->authorize('create assignments');
        
        // CORRIGÉ : On ne cherche que les véhicules au "Parking"
        $availableVehicles = Vehicle::whereHas('vehicleStatus', function ($q) {
            $q->where('name', 'Parking');
        })->whereDoesntHave('assignments', function ($q) {
            $q->whereNull('end_datetime');
        })->get();

        // CORRIGÉ : On ne cherche que les chauffeurs "Disponibles"
        $availableDrivers = Driver::whereHas('driverStatus', function ($q) {
            $q->where('name', 'Disponible');
        })->whereDoesntHave('assignments', function ($q) {
            $q->whereNull('end_datetime');
        })->get();

        return view('admin.assignments.create', compact('availableVehicles', 'availableDrivers'));
    }

    /**
     * Enregistre une nouvelle affectation et met à jour les statuts.
     */
    public function store(Request $request): RedirectResponse
    {
        $this->authorize('create assignments');

        $validated = $request->validate([
            'vehicle_id' => ['required', 'exists:vehicles,id'],
            'driver_id' => ['required', 'exists:drivers,id'],
            'start_datetime' => ['required', 'date'],
            'start_mileage' => ['required', 'integer', 'min:0'],
            'reason' => ['nullable', 'string', 'max:1000'],
            'notes' => ['nullable', 'string', 'max:1000'],
        ]);
        
        $vehicle = Vehicle::findOrFail($validated['vehicle_id']);
        if ($vehicle->isCurrentlyAssigned()) {
            return back()->withInput()->withErrors(['vehicle_id' => 'Ce véhicule est déjà en cours d\'affectation.']);
        }

        $driver = Driver::findOrFail($validated['driver_id']);
        if ($driver->isCurrentlyAssigned()) {
            return back()->withInput()->withErrors(['driver_id' => 'Ce chauffeur est déjà en cours d\'affectation.']);
        }

        $assignmentData = $validated;
        $assignmentData['created_by_user_id'] = Auth::id();
        Assignment::create($assignmentData);

        // MISE À JOUR : Changement de statut vers "En mission"
        $vehicle->update([
            'current_mileage' => $validated['start_mileage'],
            'status_id' => VehicleStatus::where('name', 'En mission')->firstOrFail()->id,
        ]);
        $driver->update(['status_id' => DriverStatus::where('name', 'En mission')->firstOrFail()->id]);
        
        return redirect()->route('admin.assignments.index')->with('success', 'Nouvelle affectation créée avec succès.');
    }

    /**
     * Termine une affectation et met à jour les statuts.
     */
    public function end(Request $request, Assignment $assignment): JsonResponse|RedirectResponse
    {
        $this->authorize('end assignments');

        $validator = Validator::make($request->all(), [
            'end_datetime' => ['required', 'date', 'after_or_equal:' . $assignment->start_datetime],
            'end_mileage' => ['required', 'integer', 'gte:' . $assignment->start_mileage],
        ]);

        if ($validator->fails()) {
            return $request->expectsJson()
                ? response()->json(['errors' => $validator->errors()], 422)
                : back()->withErrors($validator)->withInput();
        }

        $validated = $validator->validated();
        $assignment->update($validated);

        // MISE À JOUR : Libération avec les nouveaux statuts
        $assignment->vehicle->update([
            'status_id' => VehicleStatus::where('name', 'Parking')->firstOrFail()->id,
            'current_mileage' => $validated['end_mileage'],
        ]);
        $assignment->driver->update(['status_id' => DriverStatus::where('name', 'Disponible')->firstOrFail()->id]);
        
        return $request->expectsJson()
            ? response()->json(['success' => true, 'message' => 'Affectation terminée avec succès.'])
            : redirect()->route('admin.assignments.index')->with('success', 'Affectation terminée avec succès.');
    }


  /**
     * Affiche le formulaire pour modifier les détails d'une affectation.
     */
    public function edit(Assignment $assignment): View
    {
        $this->authorize('edit assignments');

        // On charge les relations nécessaires pour la vue
        $assignment->load(['vehicle', 'driver']);

        return view('admin.assignments.edit', compact('assignment'));
    }

    /**
     * Met à jour les détails d'une affectation.
     */
    public function update(Request $request, Assignment $assignment): RedirectResponse
    {
        $this->authorize('edit assignments');

        $validated = $request->validate([
            'reason' => ['nullable', 'string', 'max:1000'],
            'notes' => ['nullable', 'string', 'max:1000'],
        ]);

        $assignment->update($validated);

        return redirect()->route('admin.assignments.index')->with('success', 'Affectation mise à jour avec succès.');
    }





}

--- END OF FILE: ./app/Http/Controllers/Admin/AssignmentController.php ---


#############################################
./app/Http/Controllers/Admin/Maintenance/MaintenanceLogController.php
#############################################
<?php

namespace App\Http\Controllers\Admin\Maintenance;

use App\Http\Controllers\Controller;
use App\Models\Maintenance\MaintenanceLog;
use App\Models\Maintenance\MaintenancePlan;
use App\Models\Maintenance\MaintenanceStatus;
use App\Models\Vehicle;
use Carbon\Carbon;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;

class MaintenanceLogController extends Controller
{
    /**
     * Enregistre une nouvelle intervention de maintenance et met à jour le plan associé.
     */
    public function store(Request $request): RedirectResponse
    {
        $this->authorize('log maintenance');

        // On récupère le plan pour la validation du kilométrage
        $plan = MaintenancePlan::with('vehicle')->find($request->input('maintenance_plan_id'));

        $validated = $request->validate([
            'vehicle_id' => ['required', 'exists:vehicles,id'],
            'maintenance_type_id' => ['required', 'exists:maintenance_types,id'],
            'maintenance_plan_id' => ['nullable', 'exists:maintenance_plans,id'],
            'performed_on_date' => ['required', 'date'],
            'performed_at_mileage' => ['required', 'integer', 'gte:' . ($plan ? $plan->vehicle->current_mileage : 0)],
            'cost' => ['nullable', 'numeric', 'min:0'],
            'details' => ['nullable', 'string', 'max:2000'],
            'performed_by' => ['nullable', 'string', 'max:255'],
        ]);

        $statusTerminee = MaintenanceStatus::where('name', 'Terminée')->firstOrFail();
        $validated['maintenance_status_id'] = $statusTerminee->id;

        MaintenanceLog::create($validated);

        if ($plan) {
            $recurrenceUnit = $plan->recurrenceUnit;
            $recurrenceValue = $plan->recurrence_value;

            if ($recurrenceUnit->name === 'Kilomètres') {
                $plan->next_due_mileage = $validated['performed_at_mileage'] + $recurrenceValue;
            } elseif ($recurrenceUnit->name === 'Jours') {
                $plan->next_due_date = Carbon::parse($validated['performed_on_date'])->addDays($recurrenceValue);
            } elseif ($recurrenceUnit->name === 'Mois') {
                $plan->next_due_date = Carbon::parse($validated['performed_on_date'])->addMonths($recurrenceValue);
            }
            $plan->save();
        }

        // Mettre à jour le kilométrage principal du véhicule
        $vehicle = Vehicle::find($validated['vehicle_id']);
        if ($vehicle && $validated['performed_at_mileage'] > $vehicle->current_mileage) {
            $vehicle->update(['current_mileage' => $validated['performed_at_mileage']]);
        }

        return back()->with('success', 'Intervention de maintenance enregistrée avec succès.');
    }
}

--- END OF FILE: ./app/Http/Controllers/Admin/Maintenance/MaintenanceLogController.php ---


#############################################
./app/Http/Controllers/Admin/Maintenance/DashboardController.php
#############################################
<?php

namespace App\Http\Controllers\Admin\Maintenance;

use App\Http\Controllers\Controller;
use App\Models\Maintenance\MaintenancePlan;
use App\Models\Vehicle;
use Carbon\Carbon;
use Illuminate\View\View;
use Illuminate\Support\Facades\DB;

class DashboardController extends Controller
{
    public function index(): View
    {
        // --- Données pour le Graphique d'État de la Flotte ---
        $vehicleStats = Vehicle::query()
            ->join('vehicle_statuses', 'vehicles.status_id', '=', 'vehicle_statuses.id')
            ->select('vehicle_statuses.name', DB::raw('count(vehicles.id) as count'))
            ->groupBy('vehicle_statuses.name')
            ->pluck('count', 'name');

        // --- Données pour les Jauges d'Urgence de Maintenance ---
        $urgentPlans = MaintenancePlan::with('vehicle', 'maintenanceType')
            ->where(function ($query) {
                // Échéance par date dans les 45 prochains jours ou dépassée
                $query->where('next_due_date', '<=', Carbon::now()->addDays(45));
            })
            ->orWhere(function ($query) {
                // Échéance par kilométrage proche (à 2000 km ou moins) ou dépassée
                $query->whereNotNull('next_due_mileage')
                      ->whereHas('vehicle', function($vehicleQuery) {
                          $vehicleQuery->whereRaw('maintenance_plans.next_due_mileage - vehicles.current_mileage <= 2000');
                      });
            })
            ->whereHas('vehicle', fn($q) => $q->whereNull('deleted_at')) // Uniquement pour les véhicules actifs
            ->orderBy('next_due_date', 'asc')
            ->limit(6) // On limite à 6 pour un affichage clair
            ->get()
            ->map(function ($plan) {
                // Calcul du pourcentage d'urgence pour la jauge
                $urgencyPercent = 0;
                if ($plan->next_due_mileage && $plan->vehicle && $plan->vehicle->current_mileage > 0) {
                    $urgencyPercent = round(($plan->vehicle->current_mileage / $plan->next_due_mileage) * 100);
                }
                // La logique de date pourrait être plus complexe, on se base sur le kilométrage pour la jauge

                return [
                    'id' => $plan->id,
                    'vehicle_name' => $plan->vehicle->brand . ' ' . $plan->vehicle->model,
                    'plate' => $plan->vehicle->registration_plate,
                    'maintenance_type' => $plan->maintenanceType->name,
                    'urgency_percent' => min($urgencyPercent, 100), // Plafonner à 100%
                    'next_due' => $plan->next_due_mileage ? number_format($plan->next_due_mileage, 0, ',', ' ') . ' km' : $plan->next_due_date->format('d/m/Y'),
                ];
            });

        return view('admin.maintenance.dashboard', [
            'vehicleStats' => $vehicleStats,
            'urgentPlans' => $urgentPlans,
        ]);
    }
}

--- END OF FILE: ./app/Http/Controllers/Admin/Maintenance/DashboardController.php ---


#############################################
./app/Http/Controllers/Admin/Maintenance/MaintenancePlanController.php
#############################################
<?php

namespace App\Http\Controllers\Admin\Maintenance;

use App\Http\Controllers\Controller;
use App\Models\Maintenance\MaintenancePlan;
use App\Models\Maintenance\MaintenanceType;
use App\Models\Maintenance\RecurrenceUnit;
use App\Models\Vehicle;
use Carbon\Carbon;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\Validation\Rule;
use Illuminate\View\View;



class MaintenancePlanController extends Controller
{
    /**
     * Affiche la liste des plans de maintenance.
     */

 /**
     * Affiche la liste des plans de maintenance avec filtres.
     */
public function index(Request $request): View
    {
        $this->authorize('manage maintenance plans');

        $query = MaintenancePlan::with(['vehicle', 'maintenanceType', 'recurrenceUnit']);

        if ($request->filled('vehicle_id')) {
            $query->where('vehicle_id', $request->vehicle_id);
        }
        if ($request->filled('maintenance_type_id')) {
            $query->where('maintenance_type_id', $request->maintenance_type_id);
        }

        $query->orderBy('next_due_date', 'asc');
        $plans = $query->paginate(15)->withQueryString();

        // On prépare un tableau simple et propre pour la vue
        $plansForJs = $plans->getCollection()->mapWithKeys(function ($plan) {
            return [$plan->id => [
                'id' => $plan->id,
                'vehicle_id' => $plan->vehicle_id,
                'maintenance_type_id' => $plan->maintenance_type_id,
                'recurrence_value' => $plan->recurrence_value,
                'notes' => $plan->notes,
                'next_due_date' => $plan->next_due_date ? $plan->next_due_date->format('Y-m-d') : null,
                'next_due_mileage' => $plan->next_due_mileage,
                'vehicle' => $plan->vehicle ? $plan->vehicle->only('brand', 'model', 'registration_plate', 'current_mileage') : null,
                'maintenance_type' => $plan->maintenanceType ? $plan->maintenanceType->only('name') : null,
                'recurrence_unit' => $plan->recurrenceUnit ? $plan->recurrenceUnit->only('name') : null,
            ]];
        });

        $vehicles = Vehicle::orderBy('brand')->get();
        $maintenanceTypes = MaintenanceType::orderBy('name')->get();
	$recurrenceUnits = RecurrenceUnit::all();


        return view('admin.maintenance.plans.index', [
            'plans' => $plans,
            'plansForJs' => $plansForJs,
            'vehicles' => $vehicles,
            'maintenanceTypes' => $maintenanceTypes,
	    'recurrenceUnits' => $recurrenceUnits,
	    'filters' => $request->only(['vehicle_id', 'maintenance_type_id']),
        ]);
    }


         /**
     * Affiche le formulaire de création de plan de maintenance.
     */
    public function create(): View
    {
        $this->authorize('manage maintenance plans');

        // On passe simplement les données brutes nécessaires aux listes déroulantes.
        $vehicles = Vehicle::whereDoesntHave('maintenancePlans')->orderBy('brand')->get();
        $maintenanceTypes = MaintenanceType::orderBy('name')->get();
        $recurrenceUnits = RecurrenceUnit::all();

        return view('admin.maintenance.plans.create', compact('vehicles', 'maintenanceTypes', 'recurrenceUnits'));
    }

    /**
     * Affiche le formulaire de modification (cette méthode n'est plus utilisée,
     * car l'édition se fait via une modale directement dans la page index).
     * On la garde par convention pour un contrôleur de ressource.
     */
    public function edit(MaintenancePlan $plan): RedirectResponse
    {
        return redirect()->route('admin.maintenance.plans.index');
    }

    /**
     * Met à jour un plan de maintenance existant.
     */
    public function update(Request $request, MaintenancePlan $plan): RedirectResponse
    {
        $this->authorize('manage maintenance plans');

        $validated = $request->validate([
            'recurrence_value' => ['required', 'integer', 'min:1'],
            'recurrence_unit_id' => ['required', 'exists:recurrence_units,id'],
            'next_due_date' => ['nullable', 'date'],
            'next_due_mileage' => ['nullable', 'integer', 'min:0'],
            'notes' => ['nullable', 'string', 'max:2000'],
        ]);

        $plan->update($validated);

        return back()->with('success', 'Plan de maintenance mis à jour avec succès.');
    }


    /**
     * Enregistre un nouveau plan de maintenance.
     */
    public function store(Request $request): RedirectResponse
    {
        $this->authorize('manage maintenance plans');

        $validated = $request->validate([
            'vehicle_id' => ['required', 'exists:vehicles,id'],
            'maintenance_type_id' => ['required', 'exists:maintenance_types,id'],
            'recurrence_value' => ['required', 'integer', 'min:1'],
            'recurrence_unit_id' => ['required', 'exists:recurrence_units,id'],
            'next_due_date' => ['nullable', 'date'],
            'next_due_mileage' => ['nullable', 'integer', 'min:0'],
            'notes' => ['nullable', 'string', 'max:2000'],
        ]);

        $planData = $validated;

        // Calcul automatique de la première échéance si non fournie
        if (empty($planData['next_due_date']) && empty($planData['next_due_mileage'])) {
            $vehicle = Vehicle::find($planData['vehicle_id']);
            $recurrenceUnit = RecurrenceUnit::find($planData['recurrence_unit_id']);
            $recurrenceValue = $planData['recurrence_value'];

            if ($recurrenceUnit->name === 'Kilomètres') {
                $planData['next_due_mileage'] = $vehicle->current_mileage + $recurrenceValue;
            } elseif ($recurrenceUnit->name === 'Jours') {
                $planData['next_due_date'] = Carbon::now()->addDays($recurrenceValue);
            } elseif ($recurrenceUnit->name === 'Mois') {
                $planData['next_due_date'] = Carbon::now()->addMonths($recurrenceValue);
            }
        }

        MaintenancePlan::create($planData);

        return redirect()->route('admin.maintenance.plans.index')->with('success', 'Nouveau plan de maintenance ajouté avec succès.');
    }


}

--- END OF FILE: ./app/Http/Controllers/Admin/Maintenance/MaintenancePlanController.php ---


#############################################
./app/Http/Controllers/Admin/RoleController.php
#############################################
<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use Illuminate\Http\RedirectResponse;
use Illuminate\Http\Request;
use Illuminate\View\View;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\Models\Role;

class RoleController extends Controller
{
    /**
     * Affiche la liste des rôles.
     */
    public function index(): View
    {
        $roles = Role::orderBy('name')->get();

        return view('admin.roles.index', compact('roles'));
    }

    /**
     * Affiche le formulaire pour modifier un rôle et ses permissions.
     */
    public function edit(Role $role): View
    {
        // Récupère toutes les permissions disponibles pour les afficher
        $permissions = Permission::all();

        return view('admin.roles.edit', compact('role', 'permissions'));
    }

    /**
     * Met à jour un rôle avec les permissions sélectionnées.
     */
/**
 * Met à jour un rôle avec les permissions sélectionnées.
 */
public function update(Request $request, Role $role): RedirectResponse
{
    // 1. Valider que les données entrantes sont bien des IDs de permissions valides
    $validated = $request->validate([
        'permissions' => 'sometimes|array',
        'permissions.*' => 'exists:permissions,id', // Valide que chaque ID existe dans la table 'permissions'
    ]);

    // 2. Récupérer le tableau d'IDs de permissions depuis la requête validée
    $permissionIds = $validated['permissions'] ?? [];

    // 3. Trouver les objets Permission correspondant à ces IDs
    $permissions = Permission::whereIn('id', $permissionIds)->get();

    // 4. Synchroniser les permissions en utilisant la collection d'objets Permission.
    // C'est la méthode la plus robuste qui élimine toute ambiguïté.
    $role->syncPermissions($permissions);

    return redirect()->route('admin.roles.index')
        ->with('success', "Les permissions pour le rôle '{$role->name}' ont été mises à jour.");
}




}

--- END OF FILE: ./app/Http/Controllers/Admin/RoleController.php ---


#############################################
./app/Exceptions/Handler.php
#############################################
<?php

namespace App\Exceptions;

use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * The list of the inputs that are never flashed to the session on validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     */
    public function register(): void
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }
}

--- END OF FILE: ./app/Exceptions/Handler.php ---


#############################################
./app/Observers/DriverObserver.php
#############################################
<?php
namespace App\Observers;
use App\Models\Driver;
use Carbon\Carbon;

class DriverObserver
{
    /**
     * Gère l'événement "saving" du modèle Driver.
     */
    public function saving(Driver $driver): void
    {
        if ($driver->isDirty('license_issue_date') && !is_null($driver->license_issue_date)) {
            $driver->license_expiry_date = Carbon::parse($driver->license_issue_date)->addYears(10);
        }
    }
}

--- END OF FILE: ./app/Observers/DriverObserver.php ---


#############################################
./app/Observers/UserObserver.php
#############################################
<?php

namespace App\Observers;

use App\Models\User;

class UserObserver
{
    /**
     * Handle the User "saving" event.
     *
     * This method is called before a user is created or updated.
     * We use it to automatically populate the 'name' field
     * from 'first_name' and 'last_name'.
     *
     * @param  \App\Models\User  $user
     * @return void
     */
    public function saving(User $user): void
    {
        // Vérifie si first_name ou last_name ont été modifiés ou sont en cours de définition
        if ($user->isDirty('first_name') || $user->isDirty('last_name') || !$user->exists) {
            $firstName = $user->first_name ?? '';
            $lastName = $user->last_name ?? '';

            $user->name = trim($firstName . ' ' . $lastName);

            // Si le nom est vide après le trim (cas où first_name et last_name sont vides ou null),
            // et que la colonne 'name' ne peut être null, on pourrait lui assigner une valeur par défaut
            // ou s'appuyer sur la validation pour que first_name/last_name soient requis.
            // Breeze s'attend à ce que 'name' ne soit pas null.
            if (empty($user->name) && !empty($user->email)) {
                // Fallback simple si le nom est vide mais que l'email existe (ex: pour les anciens utilisateurs sans first/last name)
                // Ou vous pourriez choisir de lever une exception ou de mettre une valeur placeholder.
                // Pour l'instant, on s'attend à ce que first_name/last_name soient fournis à la création.
            }
        }
    }

    /**
     * Handle the User "created" event.
     *
     * @param  \App\Models\User  $user
     * @return void
     */
    public function created(User $user): void
    {
        //
    }

    /**
     * Handle the User "updated" event.
     *
     * @param  \App\Models\User  $user
     * @return void
     */
    public function updated(User $user): void
    {
        //
    }

    /**
     * Handle the User "deleted" event.
     *
     * @param  \App\Models\User  $user
     * @return void
     */
    public function deleted(User $user): void
    {
        //
    }

    /**
     * Handle the User "restored" event.
     *
     * @param  \App\Models\User  $user
     * @return void
     */
    public function restored(User $user): void
    {
        //
    }

    /**
     * Handle the User "force deleted" event.
     *
     * @param  \App\Models\User  $user
     * @return void
     */
    public function forceDeleted(User $user): void
    {
        //
    }
}

--- END OF FILE: ./app/Observers/UserObserver.php ---


#############################################
./config/session.php
#############################################
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Session Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default session "driver" that will be used on
    | requests. By default, we will use the lightweight native driver but
    | you may specify any of the other wonderful drivers provided here.
    |
    | Supported: "file", "cookie", "database", "apc",
    |            "memcached", "redis", "dynamodb", "array"
    |
    */

    'driver' => env('SESSION_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Session Lifetime
    |--------------------------------------------------------------------------
    |
    | Here you may specify the number of minutes that you wish the session
    | to be allowed to remain idle before it expires. If you want them
    | to immediately expire on the browser closing, set that option.
    |
    */

    'lifetime' => env('SESSION_LIFETIME', 120),

    'expire_on_close' => false,

    /*
    |--------------------------------------------------------------------------
    | Session Encryption
    |--------------------------------------------------------------------------
    |
    | This option allows you to easily specify that all of your session data
    | should be encrypted before it is stored. All encryption will be run
    | automatically by Laravel and you can use the Session like normal.
    |
    */

    'encrypt' => false,

    /*
    |--------------------------------------------------------------------------
    | Session File Location
    |--------------------------------------------------------------------------
    |
    | When using the native session driver, we need a location where session
    | files may be stored. A default has been set for you but a different
    | location may be specified. This is only needed for file sessions.
    |
    */

    'files' => storage_path('framework/sessions'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Connection
    |--------------------------------------------------------------------------
    |
    | When using the "database" or "redis" session drivers, you may specify a
    | connection that should be used to manage these sessions. This should
    | correspond to a connection in your database configuration options.
    |
    */

    'connection' => env('SESSION_CONNECTION'),

    /*
    |--------------------------------------------------------------------------
    | Session Database Table
    |--------------------------------------------------------------------------
    |
    | When using the "database" session driver, you may specify the table we
    | should use to manage the sessions. Of course, a sensible default is
    | provided for you; however, you are free to change this as needed.
    |
    */

    'table' => 'sessions',

    /*
    |--------------------------------------------------------------------------
    | Session Cache Store
    |--------------------------------------------------------------------------
    |
    | While using one of the framework's cache driven session backends you may
    | list a cache store that should be used for these sessions. This value
    | must match with one of the application's configured cache "stores".
    |
    | Affects: "apc", "dynamodb", "memcached", "redis"
    |
    */

    'store' => env('SESSION_STORE'),

    /*
    |--------------------------------------------------------------------------
    | Session Sweeping Lottery
    |--------------------------------------------------------------------------
    |
    | Some session drivers must manually sweep their storage location to get
    | rid of old sessions from storage. Here are the chances that it will
    | happen on a given request. By default, the odds are 2 out of 100.
    |
    */

    'lottery' => [2, 100],

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Name
    |--------------------------------------------------------------------------
    |
    | Here you may change the name of the cookie used to identify a session
    | instance by ID. The name specified here will get used every time a
    | new session cookie is created by the framework for every driver.
    |
    */

    'cookie' => env(
        'SESSION_COOKIE',
        Str::slug(env('APP_NAME', 'laravel'), '_').'_session'
    ),

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Path
    |--------------------------------------------------------------------------
    |
    | The session cookie path determines the path for which the cookie will
    | be regarded as available. Typically, this will be the root path of
    | your application but you are free to change this when necessary.
    |
    */

    'path' => '/',

    /*
    |--------------------------------------------------------------------------
    | Session Cookie Domain
    |--------------------------------------------------------------------------
    |
    | Here you may change the domain of the cookie used to identify a session
    | in your application. This will determine which domains the cookie is
    | available to in your application. A sensible default has been set.
    |
    */

    'domain' => env('SESSION_DOMAIN'),

    /*
    |--------------------------------------------------------------------------
    | HTTPS Only Cookies
    |--------------------------------------------------------------------------
    |
    | By setting this option to true, session cookies will only be sent back
    | to the server if the browser has a HTTPS connection. This will keep
    | the cookie from being sent to you when it can't be done securely.
    |
    */

    'secure' => env('SESSION_SECURE_COOKIE'),

    /*
    |--------------------------------------------------------------------------
    | HTTP Access Only
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will prevent JavaScript from accessing the
    | value of the cookie and the cookie will only be accessible through
    | the HTTP protocol. You are free to modify this option if needed.
    |
    */

    'http_only' => true,

    /*
    |--------------------------------------------------------------------------
    | Same-Site Cookies
    |--------------------------------------------------------------------------
    |
    | This option determines how your cookies behave when cross-site requests
    | take place, and can be used to mitigate CSRF attacks. By default, we
    | will set this value to "lax" since this is a secure default value.
    |
    | Supported: "lax", "strict", "none", null
    |
    */

    'same_site' => 'lax',

    /*
    |--------------------------------------------------------------------------
    | Partitioned Cookies
    |--------------------------------------------------------------------------
    |
    | Setting this value to true will tie the cookie to the top-level site for
    | a cross-site context. Partitioned cookies are accepted by the browser
    | when flagged "secure" and the Same-Site attribute is set to "none".
    |
    */

    'partitioned' => false,

];

--- END OF FILE: ./config/session.php ---


#############################################
./config/broadcasting.php
#############################################
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Broadcaster
    |--------------------------------------------------------------------------
    |
    | This option controls the default broadcaster that will be used by the
    | framework when an event needs to be broadcast. You may set this to
    | any of the connections defined in the "connections" array below.
    |
    | Supported: "pusher", "ably", "redis", "log", "null"
    |
    */

    'default' => env('BROADCAST_DRIVER', 'null'),

    /*
    |--------------------------------------------------------------------------
    | Broadcast Connections
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the broadcast connections that will be used
    | to broadcast events to other systems or over websockets. Samples of
    | each available type of connection are provided inside this array.
    |
    */

    'connections' => [

        'pusher' => [
            'driver' => 'pusher',
            'key' => env('PUSHER_APP_KEY'),
            'secret' => env('PUSHER_APP_SECRET'),
            'app_id' => env('PUSHER_APP_ID'),
            'options' => [
                'cluster' => env('PUSHER_APP_CLUSTER'),
                'host' => env('PUSHER_HOST') ?: 'api-'.env('PUSHER_APP_CLUSTER', 'mt1').'.pusher.com',
                'port' => env('PUSHER_PORT', 443),
                'scheme' => env('PUSHER_SCHEME', 'https'),
                'encrypted' => true,
                'useTLS' => env('PUSHER_SCHEME', 'https') === 'https',
            ],
            'client_options' => [
                // Guzzle client options: https://docs.guzzlephp.org/en/stable/request-options.html
            ],
        ],

        'ably' => [
            'driver' => 'ably',
            'key' => env('ABLY_KEY'),
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
        ],

        'log' => [
            'driver' => 'log',
        ],

        'null' => [
            'driver' => 'null',
        ],

    ],

];

--- END OF FILE: ./config/broadcasting.php ---


#############################################
./config/permission.php
#############################################
<?php

return [

    'models' => [

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * Eloquent model should be used to retrieve your permissions. Of course, it
         * is often just the "Permission" model but you may use whatever you like.
         *
         * The model you want to use as a Permission model needs to implement the
         * `Spatie\Permission\Contracts\Permission` contract.
         */

        'permission' => Spatie\Permission\Models\Permission::class,

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * Eloquent model should be used to retrieve your roles. Of course, it
         * is often just the "Role" model but you may use whatever you like.
         *
         * The model you want to use as a Role model needs to implement the
         * `Spatie\Permission\Contracts\Role` contract.
         */

        'role' => Spatie\Permission\Models\Role::class,

    ],

    'table_names' => [

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your roles. We have chosen a basic
         * default value but you may easily change it to any table you like.
         */

        'roles' => 'roles',

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * table should be used to retrieve your permissions. We have chosen a basic
         * default value but you may easily change it to any table you like.
         */

        'permissions' => 'permissions',

        /*
         * When using the "HasPermissions" trait from this package, we need to know which
         * table should be used to retrieve your models permissions. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'model_has_permissions' => 'model_has_permissions',

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your models roles. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'model_has_roles' => 'model_has_roles',

        /*
         * When using the "HasRoles" trait from this package, we need to know which
         * table should be used to retrieve your roles permissions. We have chosen a
         * basic default value but you may easily change it to any table you like.
         */

        'role_has_permissions' => 'role_has_permissions',
    ],

    'column_names' => [
        /*
         * Change this if you want to name the related pivots other than defaults
         */
        'role_pivot_key' => null, // default 'role_id',
        'permission_pivot_key' => null, // default 'permission_id',

        /*
         * Change this if you want to name the related model primary key other than
         * `model_id`.
         *
         * For example, this would be nice if your primary keys are all UUIDs. In
         * that case, name this `model_uuid`.
         */

        'model_morph_key' => 'model_id',

        /*
         * Change this if you want to use the teams feature and your related model's
         * foreign key is other than `team_id`.
         */

        'team_foreign_key' => 'team_id',
    ],

    /*
     * When set to true, the method for checking permissions will be registered on the gate.
     * Set this to false if you want to implement custom logic for checking permissions.
     */

    'register_permission_check_method' => true,

    /*
     * When set to true, Laravel\Octane\Events\OperationTerminated event listener will be registered
     * this will refresh permissions on every TickTerminated, TaskTerminated and RequestTerminated
     * NOTE: This should not be needed in most cases, but an Octane/Vapor combination benefited from it.
     */
    'register_octane_reset_listener' => false,

    /*
     * Events will fire when a role or permission is assigned/unassigned:
     * \Spatie\Permission\Events\RoleAttached
     * \Spatie\Permission\Events\RoleDetached
     * \Spatie\Permission\Events\PermissionAttached
     * \Spatie\Permission\Events\PermissionDetached
     *
     * To enable, set to true, and then create listeners to watch these events.
     */
    'events_enabled' => false,

    /*
     * Teams Feature.
     * When set to true the package implements teams using the 'team_foreign_key'.
     * If you want the migrations to register the 'team_foreign_key', you must
     * set this to true before doing the migration.
     * If you already did the migration then you must make a new migration to also
     * add 'team_foreign_key' to 'roles', 'model_has_roles', and 'model_has_permissions'
     * (view the latest version of this package's migration file)
     */

    'teams' => false,

    /*
     * The class to use to resolve the permissions team id
     */
    'team_resolver' => \Spatie\Permission\DefaultTeamResolver::class,

    /*
     * Passport Client Credentials Grant
     * When set to true the package will use Passports Client to check permissions
     */

    'use_passport_client_credentials' => false,

    /*
     * When set to true, the required permission names are added to exception messages.
     * This could be considered an information leak in some contexts, so the default
     * setting is false here for optimum safety.
     */

    'display_permission_in_exception' => false,

    /*
     * When set to true, the required role names are added to exception messages.
     * This could be considered an information leak in some contexts, so the default
     * setting is false here for optimum safety.
     */

    'display_role_in_exception' => false,

    /*
     * By default wildcard permission lookups are disabled.
     * See documentation to understand supported syntax.
     */

    'enable_wildcard_permission' => false,

    /*
     * The class to use for interpreting wildcard permissions.
     * If you need to modify delimiters, override the class and specify its name here.
     */
    // 'wildcard_permission' => Spatie\Permission\WildcardPermission::class,

    /* Cache-specific settings */

    'cache' => [

        /*
         * By default all permissions are cached for 24 hours to speed up performance.
         * When permissions or roles are updated the cache is flushed automatically.
         */

        'expiration_time' => \DateInterval::createFromDateString('24 hours'),

        /*
         * The cache key used to store all permissions.
         */

        'key' => 'spatie.permission.cache',

        /*
         * You may optionally indicate a specific cache driver to use for permission and
         * role caching using any of the `store` drivers listed in the cache.php config
         * file. Using 'default' here means to use the `default` set in cache.php.
         */

        'store' => 'default',
    ],
];

--- END OF FILE: ./config/permission.php ---


#############################################
./config/hashing.php
#############################################
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Hash Driver
    |--------------------------------------------------------------------------
    |
    | This option controls the default hash driver that will be used to hash
    | passwords for your application. By default, the bcrypt algorithm is
    | used; however, you remain free to modify this option if you wish.
    |
    | Supported: "bcrypt", "argon", "argon2id"
    |
    */

    'driver' => 'bcrypt',

    /*
    |--------------------------------------------------------------------------
    | Bcrypt Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Bcrypt algorithm. This will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'bcrypt' => [
        'rounds' => env('BCRYPT_ROUNDS', 12),
        'verify' => true,
    ],

    /*
    |--------------------------------------------------------------------------
    | Argon Options
    |--------------------------------------------------------------------------
    |
    | Here you may specify the configuration options that should be used when
    | passwords are hashed using the Argon algorithm. These will allow you
    | to control the amount of time it takes to hash the given password.
    |
    */

    'argon' => [
        'memory' => 65536,
        'threads' => 1,
        'time' => 4,
        'verify' => true,
    ],

];

--- END OF FILE: ./config/hashing.php ---


#############################################
./config/queue.php
#############################################
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Queue Connection Name
    |--------------------------------------------------------------------------
    |
    | Laravel's queue API supports an assortment of back-ends via a single
    | API, giving you convenient access to each back-end using the same
    | syntax for every one. Here you may define a default connection.
    |
    */

    'default' => env('QUEUE_CONNECTION', 'sync'),

    /*
    |--------------------------------------------------------------------------
    | Queue Connections
    |--------------------------------------------------------------------------
    |
    | Here you may configure the connection information for each server that
    | is used by your application. A default configuration has been added
    | for each back-end shipped with Laravel. You are free to add more.
    |
    | Drivers: "sync", "database", "beanstalkd", "sqs", "redis", "null"
    |
    */

    'connections' => [

        'sync' => [
            'driver' => 'sync',
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'jobs',
            'queue' => 'default',
            'retry_after' => 90,
            'after_commit' => false,
        ],

        'beanstalkd' => [
            'driver' => 'beanstalkd',
            'host' => 'localhost',
            'queue' => 'default',
            'retry_after' => 90,
            'block_for' => 0,
            'after_commit' => false,
        ],

        'sqs' => [
            'driver' => 'sqs',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'prefix' => env('SQS_PREFIX', 'https://sqs.us-east-1.amazonaws.com/your-account-id'),
            'queue' => env('SQS_QUEUE', 'default'),
            'suffix' => env('SQS_SUFFIX'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'after_commit' => false,
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'default',
            'queue' => env('REDIS_QUEUE', 'default'),
            'retry_after' => 90,
            'block_for' => null,
            'after_commit' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Job Batching
    |--------------------------------------------------------------------------
    |
    | The following options configure the database and table that store job
    | batching information. These options can be updated to any database
    | connection and table which has been defined by your application.
    |
    */

    'batching' => [
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'job_batches',
    ],

    /*
    |--------------------------------------------------------------------------
    | Failed Queue Jobs
    |--------------------------------------------------------------------------
    |
    | These options configure the behavior of failed queue job logging so you
    | can control which database and table are used to store the jobs that
    | have failed. You may change them to any database / table you wish.
    |
    */

    'failed' => [
        'driver' => env('QUEUE_FAILED_DRIVER', 'database-uuids'),
        'database' => env('DB_CONNECTION', 'mysql'),
        'table' => 'failed_jobs',
    ],

];

--- END OF FILE: ./config/queue.php ---


#############################################
./config/database.php
#############################################
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Database Connection Name
    |--------------------------------------------------------------------------
    |
    | Here you may specify which of the database connections below you wish
    | to use as your default connection for all database work. Of course
    | you may use many connections at once using the Database library.
    |
    */

    'default' => env('DB_CONNECTION', 'mysql'),

    /*
    |--------------------------------------------------------------------------
    | Database Connections
    |--------------------------------------------------------------------------
    |
    | Here are each of the database connections setup for your application.
    | Of course, examples of configuring each database platform that is
    | supported by Laravel is shown below to make development simple.
    |
    |
    | All database work in Laravel is done through the PHP PDO facilities
    | so make sure you have the driver for your particular database of
    | choice installed on your machine before you begin development.
    |
    */

    'connections' => [

        'sqlite' => [
            'driver' => 'sqlite',
            'url' => env('DATABASE_URL'),
            'database' => env('DB_DATABASE', database_path('database.sqlite')),
            'prefix' => '',
            'foreign_key_constraints' => env('DB_FOREIGN_KEYS', true),
        ],

        'mysql' => [
            'driver' => 'mysql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '3306'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'unix_socket' => env('DB_SOCKET', ''),
            'charset' => 'utf8mb4',
            'collation' => 'utf8mb4_unicode_ci',
            'prefix' => '',
            'prefix_indexes' => true,
            'strict' => true,
            'engine' => null,
            'options' => extension_loaded('pdo_mysql') ? array_filter([
                PDO::MYSQL_ATTR_SSL_CA => env('MYSQL_ATTR_SSL_CA'),
            ]) : [],
        ],

        'pgsql' => [
            'driver' => 'pgsql',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', '127.0.0.1'),
            'port' => env('DB_PORT', '5432'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            'search_path' => 'public',
            'sslmode' => 'prefer',
        ],

        'sqlsrv' => [
            'driver' => 'sqlsrv',
            'url' => env('DATABASE_URL'),
            'host' => env('DB_HOST', 'localhost'),
            'port' => env('DB_PORT', '1433'),
            'database' => env('DB_DATABASE', 'forge'),
            'username' => env('DB_USERNAME', 'forge'),
            'password' => env('DB_PASSWORD', ''),
            'charset' => 'utf8',
            'prefix' => '',
            'prefix_indexes' => true,
            // 'encrypt' => env('DB_ENCRYPT', 'yes'),
            // 'trust_server_certificate' => env('DB_TRUST_SERVER_CERTIFICATE', 'false'),
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Migration Repository Table
    |--------------------------------------------------------------------------
    |
    | This table keeps track of all the migrations that have already run for
    | your application. Using this information, we can determine which of
    | the migrations on disk haven't actually been run in the database.
    |
    */

    'migrations' => 'migrations',

    /*
    |--------------------------------------------------------------------------
    | Redis Databases
    |--------------------------------------------------------------------------
    |
    | Redis is an open source, fast, and advanced key-value store that also
    | provides a richer body of commands than a typical key-value system
    | such as APC or Memcached. Laravel makes it easy to dig right in.
    |
    */

    'redis' => [

        'client' => env('REDIS_CLIENT', 'phpredis'),

        'options' => [
            'cluster' => env('REDIS_CLUSTER', 'redis'),
            'prefix' => env('REDIS_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_database_'),
        ],

        'default' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_DB', '0'),
        ],

        'cache' => [
            'url' => env('REDIS_URL'),
            'host' => env('REDIS_HOST', '127.0.0.1'),
            'username' => env('REDIS_USERNAME'),
            'password' => env('REDIS_PASSWORD'),
            'port' => env('REDIS_PORT', '6379'),
            'database' => env('REDIS_CACHE_DB', '1'),
        ],

    ],

];

--- END OF FILE: ./config/database.php ---


#############################################
./config/sanctum.php
#############################################
<?php

use Laravel\Sanctum\Sanctum;

return [

    /*
    |--------------------------------------------------------------------------
    | Stateful Domains
    |--------------------------------------------------------------------------
    |
    | Requests from the following domains / hosts will receive stateful API
    | authentication cookies. Typically, these should include your local
    | and production domains which access your API via a frontend SPA.
    |
    */

    'stateful' => explode(',', env('SANCTUM_STATEFUL_DOMAINS', sprintf(
        '%s%s',
        'localhost,localhost:3000,127.0.0.1,127.0.0.1:8000,::1',
        Sanctum::currentApplicationUrlWithPort()
    ))),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Guards
    |--------------------------------------------------------------------------
    |
    | This array contains the authentication guards that will be checked when
    | Sanctum is trying to authenticate a request. If none of these guards
    | are able to authenticate the request, Sanctum will use the bearer
    | token that's present on an incoming request for authentication.
    |
    */

    'guard' => ['web'],

    /*
    |--------------------------------------------------------------------------
    | Expiration Minutes
    |--------------------------------------------------------------------------
    |
    | This value controls the number of minutes until an issued token will be
    | considered expired. This will override any values set in the token's
    | "expires_at" attribute, but first-party sessions are not affected.
    |
    */

    'expiration' => null,

    /*
    |--------------------------------------------------------------------------
    | Token Prefix
    |--------------------------------------------------------------------------
    |
    | Sanctum can prefix new tokens in order to take advantage of numerous
    | security scanning initiatives maintained by open source platforms
    | that notify developers if they commit tokens into repositories.
    |
    | See: https://docs.github.com/en/code-security/secret-scanning/about-secret-scanning
    |
    */

    'token_prefix' => env('SANCTUM_TOKEN_PREFIX', ''),

    /*
    |--------------------------------------------------------------------------
    | Sanctum Middleware
    |--------------------------------------------------------------------------
    |
    | When authenticating your first-party SPA with Sanctum you may need to
    | customize some of the middleware Sanctum uses while processing the
    | request. You may change the middleware listed below as required.
    |
    */

    'middleware' => [
        'authenticate_session' => Laravel\Sanctum\Http\Middleware\AuthenticateSession::class,
        'encrypt_cookies' => App\Http\Middleware\EncryptCookies::class,
        'verify_csrf_token' => App\Http\Middleware\VerifyCsrfToken::class,
    ],

];

--- END OF FILE: ./config/sanctum.php ---


#############################################
./config/auth.php
#############################################
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Authentication Defaults
    |--------------------------------------------------------------------------
    |
    | This option controls the default authentication "guard" and password
    | reset options for your application. You may change these defaults
    | as required, but they're a perfect start for most applications.
    |
    */

    'defaults' => [
        'guard' => 'web',
        'passwords' => 'users',
    ],

    /*
    |--------------------------------------------------------------------------
    | Authentication Guards
    |--------------------------------------------------------------------------
    |
    | Next, you may define every authentication guard for your application.
    | Of course, a great default configuration has been defined for you
    | here which uses session storage and the Eloquent user provider.
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | Supported: "session"
    |
    */

    'guards' => [
        'web' => [
            'driver' => 'session',
            'provider' => 'users',
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | User Providers
    |--------------------------------------------------------------------------
    |
    | All authentication drivers have a user provider. This defines how the
    | users are actually retrieved out of your database or other storage
    | mechanisms used by this application to persist your user's data.
    |
    | If you have multiple user tables or models you may configure multiple
    | sources which represent each model / table. These sources may then
    | be assigned to any extra authentication guards you have defined.
    |
    | Supported: "database", "eloquent"
    |
    */

    'providers' => [
        'users' => [
            'driver' => 'eloquent',
            'model' => App\Models\User::class,
        ],

        // 'users' => [
        //     'driver' => 'database',
        //     'table' => 'users',
        // ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Resetting Passwords
    |--------------------------------------------------------------------------
    |
    | You may specify multiple password reset configurations if you have more
    | than one user table or model in the application and you want to have
    | separate password reset settings based on the specific user types.
    |
    | The expiry time is the number of minutes that each reset token will be
    | considered valid. This security feature keeps tokens short-lived so
    | they have less time to be guessed. You may change this as needed.
    |
    | The throttle setting is the number of seconds a user must wait before
    | generating more password reset tokens. This prevents the user from
    | quickly generating a very large amount of password reset tokens.
    |
    */

    'passwords' => [
        'users' => [
            'provider' => 'users',
            'table' => 'password_reset_tokens',
            'expire' => 60,
            'throttle' => 60,
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Password Confirmation Timeout
    |--------------------------------------------------------------------------
    |
    | Here you may define the amount of seconds before a password confirmation
    | times out and the user is prompted to re-enter their password via the
    | confirmation screen. By default, the timeout lasts for three hours.
    |
    */

    'password_timeout' => 10800,

];

--- END OF FILE: ./config/auth.php ---


#############################################
./config/logging.php
#############################################
<?php

use Monolog\Handler\NullHandler;
use Monolog\Handler\StreamHandler;
use Monolog\Handler\SyslogUdpHandler;
use Monolog\Processor\PsrLogMessageProcessor;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Log Channel
    |--------------------------------------------------------------------------
    |
    | This option defines the default log channel that gets used when writing
    | messages to the logs. The name specified in this option should match
    | one of the channels defined in the "channels" configuration array.
    |
    */

    'default' => env('LOG_CHANNEL', 'stack'),

    /*
    |--------------------------------------------------------------------------
    | Deprecations Log Channel
    |--------------------------------------------------------------------------
    |
    | This option controls the log channel that should be used to log warnings
    | regarding deprecated PHP and library features. This allows you to get
    | your application ready for upcoming major versions of dependencies.
    |
    */

    'deprecations' => [
        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),
        'trace' => false,
    ],

    /*
    |--------------------------------------------------------------------------
    | Log Channels
    |--------------------------------------------------------------------------
    |
    | Here you may configure the log channels for your application. Out of
    | the box, Laravel uses the Monolog PHP logging library. This gives
    | you a variety of powerful log handlers / formatters to utilize.
    |
    | Available Drivers: "single", "daily", "slack", "syslog",
    |                    "errorlog", "monolog",
    |                    "custom", "stack"
    |
    */

    'channels' => [
        'stack' => [
            'driver' => 'stack',
            'channels' => ['single'],
            'ignore_exceptions' => false,
        ],

        'single' => [
            'driver' => 'single',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'daily' => [
            'driver' => 'daily',
            'path' => storage_path('logs/laravel.log'),
            'level' => env('LOG_LEVEL', 'debug'),
            'days' => 14,
            'replace_placeholders' => true,
        ],

        'slack' => [
            'driver' => 'slack',
            'url' => env('LOG_SLACK_WEBHOOK_URL'),
            'username' => 'Laravel Log',
            'emoji' => ':boom:',
            'level' => env('LOG_LEVEL', 'critical'),
            'replace_placeholders' => true,
        ],

        'papertrail' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => env('LOG_PAPERTRAIL_HANDLER', SyslogUdpHandler::class),
            'handler_with' => [
                'host' => env('PAPERTRAIL_URL'),
                'port' => env('PAPERTRAIL_PORT'),
                'connectionString' => 'tls://'.env('PAPERTRAIL_URL').':'.env('PAPERTRAIL_PORT'),
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'stderr' => [
            'driver' => 'monolog',
            'level' => env('LOG_LEVEL', 'debug'),
            'handler' => StreamHandler::class,
            'formatter' => env('LOG_STDERR_FORMATTER'),
            'with' => [
                'stream' => 'php://stderr',
            ],
            'processors' => [PsrLogMessageProcessor::class],
        ],

        'syslog' => [
            'driver' => 'syslog',
            'level' => env('LOG_LEVEL', 'debug'),
            'facility' => LOG_USER,
            'replace_placeholders' => true,
        ],

        'errorlog' => [
            'driver' => 'errorlog',
            'level' => env('LOG_LEVEL', 'debug'),
            'replace_placeholders' => true,
        ],

        'null' => [
            'driver' => 'monolog',
            'handler' => NullHandler::class,
        ],

        'emergency' => [
            'path' => storage_path('logs/laravel.log'),
        ],
    ],

];

--- END OF FILE: ./config/logging.php ---


#############################################
./config/cache.php
#############################################
<?php

use Illuminate\Support\Str;

return [

    /*
    |--------------------------------------------------------------------------
    | Default Cache Store
    |--------------------------------------------------------------------------
    |
    | This option controls the default cache connection that gets used while
    | using this caching library. This connection is used when another is
    | not explicitly specified when executing a given caching function.
    |
    */

    'default' => env('CACHE_DRIVER', 'file'),

    /*
    |--------------------------------------------------------------------------
    | Cache Stores
    |--------------------------------------------------------------------------
    |
    | Here you may define all of the cache "stores" for your application as
    | well as their drivers. You may even define multiple stores for the
    | same cache driver to group types of items stored in your caches.
    |
    | Supported drivers: "apc", "array", "database", "file",
    |         "memcached", "redis", "dynamodb", "octane", "null"
    |
    */

    'stores' => [

        'apc' => [
            'driver' => 'apc',
        ],

        'array' => [
            'driver' => 'array',
            'serialize' => false,
        ],

        'database' => [
            'driver' => 'database',
            'table' => 'cache',
            'connection' => null,
            'lock_connection' => null,
        ],

        'file' => [
            'driver' => 'file',
            'path' => storage_path('framework/cache/data'),
            'lock_path' => storage_path('framework/cache/data'),
        ],

        'memcached' => [
            'driver' => 'memcached',
            'persistent_id' => env('MEMCACHED_PERSISTENT_ID'),
            'sasl' => [
                env('MEMCACHED_USERNAME'),
                env('MEMCACHED_PASSWORD'),
            ],
            'options' => [
                // Memcached::OPT_CONNECT_TIMEOUT => 2000,
            ],
            'servers' => [
                [
                    'host' => env('MEMCACHED_HOST', '127.0.0.1'),
                    'port' => env('MEMCACHED_PORT', 11211),
                    'weight' => 100,
                ],
            ],
        ],

        'redis' => [
            'driver' => 'redis',
            'connection' => 'cache',
            'lock_connection' => 'default',
        ],

        'dynamodb' => [
            'driver' => 'dynamodb',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
            'table' => env('DYNAMODB_CACHE_TABLE', 'cache'),
            'endpoint' => env('DYNAMODB_ENDPOINT'),
        ],

        'octane' => [
            'driver' => 'octane',
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Cache Key Prefix
    |--------------------------------------------------------------------------
    |
    | When utilizing the APC, database, memcached, Redis, or DynamoDB cache
    | stores there might be other applications using the same cache. For
    | that reason, you may prefix every cache key to avoid collisions.
    |
    */

    'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),

];

--- END OF FILE: ./config/cache.php ---


#############################################
./config/services.php
#############################################
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Third Party Services
    |--------------------------------------------------------------------------
    |
    | This file is for storing the credentials for third party services such
    | as Mailgun, Postmark, AWS and more. This file provides the de facto
    | location for this type of information, allowing packages to have
    | a conventional file to locate the various service credentials.
    |
    */

    'mailgun' => [
        'domain' => env('MAILGUN_DOMAIN'),
        'secret' => env('MAILGUN_SECRET'),
        'endpoint' => env('MAILGUN_ENDPOINT', 'api.mailgun.net'),
        'scheme' => 'https',
    ],

    'postmark' => [
        'token' => env('POSTMARK_TOKEN'),
    ],

    'ses' => [
        'key' => env('AWS_ACCESS_KEY_ID'),
        'secret' => env('AWS_SECRET_ACCESS_KEY'),
        'region' => env('AWS_DEFAULT_REGION', 'us-east-1'),
    ],

];

--- END OF FILE: ./config/services.php ---


#############################################
./config/app.php
#############################################
<?php

use Illuminate\Support\Facades\Facade;
use Illuminate\Support\ServiceProvider;



return [

    /*
    |--------------------------------------------------------------------------
    | Application Name
    |--------------------------------------------------------------------------
    |
    | This value is the name of your application. This value is used when the
    | framework needs to place the application's name in a notification or
    | any other location as required by the application or its packages.
    |
    */

    'name' => env('APP_NAME', 'Laravel'),

    /*
    |--------------------------------------------------------------------------
    | Application Environment
    |--------------------------------------------------------------------------
    |
    | This value determines the "environment" your application is currently
    | running in. This may determine how you prefer to configure various
    | services the application utilizes. Set this in your ".env" file.
    |
    */

    'env' => env('APP_ENV', 'production'),

    /*
    |--------------------------------------------------------------------------
    | Application Debug Mode
    |--------------------------------------------------------------------------
    |
    | When your application is in debug mode, detailed error messages with
    | stack traces will be shown on every error that occurs within your
    | application. If disabled, a simple generic error page is shown.
    |
    */

    'debug' => (bool) env('APP_DEBUG', false),

    /*
    |--------------------------------------------------------------------------
    | Application URL
    |--------------------------------------------------------------------------
    |
    | This URL is used by the console to properly generate URLs when using
    | the Artisan command line tool. You should set this to the root of
    | your application so that it is used when running Artisan tasks.
    |
    */

    'url' => env('APP_URL', 'http://localhost'),

    'asset_url' => env('ASSET_URL'),

    /*
    |--------------------------------------------------------------------------
    | Application Timezone
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default timezone for your application, which
    | will be used by the PHP date and date-time functions. We have gone
    | ahead and set this to a sensible default for you out of the box.
    |
    */

    'timezone' => 'Africa/Algiers',
    
    /*
    |--------------------------------------------------------------------------
    | Application Locale Configuration
    |--------------------------------------------------------------------------
    |
    | The application locale determines the default locale that will be used
    | by the translation service provider. You are free to set this value
    | to any of the locales which will be supported by the application.
    |
    */

    'locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Application Fallback Locale
    |--------------------------------------------------------------------------
    |
    | The fallback locale determines the locale to use when the current one
    | is not available. You may change the value to correspond to any of
    | the language folders that are provided through your application.
    |
    */

    'fallback_locale' => 'en',

    /*
    |--------------------------------------------------------------------------
    | Faker Locale
    |--------------------------------------------------------------------------
    |
    | This locale will be used by the Faker PHP library when generating fake
    | data for your database seeds. For example, this will be used to get
    | localized telephone numbers, street address information and more.
    |
    */

    'faker_locale' => 'en_US',

    /*
    |--------------------------------------------------------------------------
    | Encryption Key
    |--------------------------------------------------------------------------
    |
    | This key is used by the Illuminate encrypter service and should be set
    | to a random, 32 character string, otherwise these encrypted strings
    | will not be safe. Please do this before deploying an application!
    |
    */

    'key' => env('APP_KEY'),

    'cipher' => 'AES-256-CBC',

    /*
    |--------------------------------------------------------------------------
    | Maintenance Mode Driver
    |--------------------------------------------------------------------------
    |
    | These configuration options determine the driver used to determine and
    | manage Laravel's "maintenance mode" status. The "cache" driver will
    | allow maintenance mode to be controlled across multiple machines.
    |
    | Supported drivers: "file", "cache"
    |
    */

    'maintenance' => [
        'driver' => 'file',
        // 'store' => 'redis',
    ],

    /*
    |--------------------------------------------------------------------------
    | Autoloaded Service Providers
    |--------------------------------------------------------------------------
    |
    | The service providers listed here will be automatically loaded on the
    | request to your application. Feel free to add your own services to
    | this array to grant expanded functionality to your applications.
    |
    */

    'providers' => ServiceProvider::defaultProviders()->merge([
        /*
         * Package Service Providers...
         */

        /*
         * Application Service Providers...
         */
        App\Providers\AppServiceProvider::class,
        App\Providers\AuthServiceProvider::class,
        // App\Providers\BroadcastServiceProvider::class,
        App\Providers\EventServiceProvider::class,
	App\Providers\RouteServiceProvider::class,
        Spatie\Permission\PermissionServiceProvider::class,
    ])->toArray(),

    /*
    |--------------------------------------------------------------------------
    | Class Aliases
    |--------------------------------------------------------------------------
    |
    | This array of class aliases will be registered when this application
    | is started. However, feel free to register as many as you wish as
    | the aliases are "lazy" loaded so they don't hinder performance.
    |
    */

    'aliases' => Facade::defaultAliases()->merge([
        // 'Example' => App\Facades\Example::class,
    ])->toArray(),

];

--- END OF FILE: ./config/app.php ---


#############################################
./config/mail.php
#############################################
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Mailer
    |--------------------------------------------------------------------------
    |
    | This option controls the default mailer that is used to send any email
    | messages sent by your application. Alternative mailers may be setup
    | and used as needed; however, this mailer will be used by default.
    |
    */

    'default' => env('MAIL_MAILER', 'smtp'),

    /*
    |--------------------------------------------------------------------------
    | Mailer Configurations
    |--------------------------------------------------------------------------
    |
    | Here you may configure all of the mailers used by your application plus
    | their respective settings. Several examples have been configured for
    | you and you are free to add your own as your application requires.
    |
    | Laravel supports a variety of mail "transport" drivers to be used while
    | sending an e-mail. You will specify which one you are using for your
    | mailers below. You are free to add additional mailers as required.
    |
    | Supported: "smtp", "sendmail", "mailgun", "ses", "ses-v2",
    |            "postmark", "log", "array", "failover", "roundrobin"
    |
    */

    'mailers' => [
        'smtp' => [
            'transport' => 'smtp',
            'url' => env('MAIL_URL'),
            'host' => env('MAIL_HOST', 'smtp.mailgun.org'),
            'port' => env('MAIL_PORT', 587),
            'encryption' => env('MAIL_ENCRYPTION', 'tls'),
            'username' => env('MAIL_USERNAME'),
            'password' => env('MAIL_PASSWORD'),
            'timeout' => null,
            'local_domain' => env('MAIL_EHLO_DOMAIN'),
        ],

        'ses' => [
            'transport' => 'ses',
        ],

        'postmark' => [
            'transport' => 'postmark',
            // 'message_stream_id' => null,
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'mailgun' => [
            'transport' => 'mailgun',
            // 'client' => [
            //     'timeout' => 5,
            // ],
        ],

        'sendmail' => [
            'transport' => 'sendmail',
            'path' => env('MAIL_SENDMAIL_PATH', '/usr/sbin/sendmail -bs -i'),
        ],

        'log' => [
            'transport' => 'log',
            'channel' => env('MAIL_LOG_CHANNEL'),
        ],

        'array' => [
            'transport' => 'array',
        ],

        'failover' => [
            'transport' => 'failover',
            'mailers' => [
                'smtp',
                'log',
            ],
        ],

        'roundrobin' => [
            'transport' => 'roundrobin',
            'mailers' => [
                'ses',
                'postmark',
            ],
        ],
    ],

    /*
    |--------------------------------------------------------------------------
    | Global "From" Address
    |--------------------------------------------------------------------------
    |
    | You may wish for all e-mails sent by your application to be sent from
    | the same address. Here, you may specify a name and address that is
    | used globally for all e-mails that are sent by your application.
    |
    */

    'from' => [
        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),
        'name' => env('MAIL_FROM_NAME', 'Example'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Markdown Mail Settings
    |--------------------------------------------------------------------------
    |
    | If you are using Markdown based email rendering, you may configure your
    | theme and component paths here, allowing you to customize the design
    | of the emails. Or, you may simply stick with the Laravel defaults!
    |
    */

    'markdown' => [
        'theme' => 'default',

        'paths' => [
            resource_path('views/vendor/mail'),
        ],
    ],

];

--- END OF FILE: ./config/mail.php ---


#############################################
./config/cors.php
#############################################
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Cross-Origin Resource Sharing (CORS) Configuration
    |--------------------------------------------------------------------------
    |
    | Here you may configure your settings for cross-origin resource sharing
    | or "CORS". This determines what cross-origin operations may execute
    | in web browsers. You are free to adjust these settings as needed.
    |
    | To learn more: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS
    |
    */

    'paths' => ['api/*', 'sanctum/csrf-cookie'],

    'allowed_methods' => ['*'],

    'allowed_origins' => ['*'],

    'allowed_origins_patterns' => [],

    'allowed_headers' => ['*'],

    'exposed_headers' => [],

    'max_age' => 0,

    'supports_credentials' => false,

];

--- END OF FILE: ./config/cors.php ---


#############################################
./config/view.php
#############################################
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | View Storage Paths
    |--------------------------------------------------------------------------
    |
    | Most templating systems load templates from disk. Here you may specify
    | an array of paths that should be checked for your views. Of course
    | the usual Laravel view path has already been registered for you.
    |
    */

    'paths' => [
        resource_path('views'),
    ],

    /*
    |--------------------------------------------------------------------------
    | Compiled View Path
    |--------------------------------------------------------------------------
    |
    | This option determines where all the compiled Blade templates will be
    | stored for your application. Typically, this is within the storage
    | directory. However, as usual, you are free to change this value.
    |
    */

    'compiled' => env(
        'VIEW_COMPILED_PATH',
        realpath(storage_path('framework/views'))
    ),

];

--- END OF FILE: ./config/view.php ---


#############################################
./config/filesystems.php
#############################################
<?php

return [

    /*
    |--------------------------------------------------------------------------
    | Default Filesystem Disk
    |--------------------------------------------------------------------------
    |
    | Here you may specify the default filesystem disk that should be used
    | by the framework. The "local" disk, as well as a variety of cloud
    | based disks are available to your application. Just store away!
    |
    */

    'default' => env('FILESYSTEM_DISK', 'local'),

    /*
    |--------------------------------------------------------------------------
    | Filesystem Disks
    |--------------------------------------------------------------------------
    |
    | Here you may configure as many filesystem "disks" as you wish, and you
    | may even configure multiple disks of the same driver. Defaults have
    | been set up for each driver as an example of the required values.
    |
    | Supported Drivers: "local", "ftp", "sftp", "s3"
    |
    */

    'disks' => [

        'local' => [
            'driver' => 'local',
            'root' => storage_path('app'),
            'throw' => false,
        ],

        'public' => [
            'driver' => 'local',
            'root' => storage_path('app/public'),
            'url' => env('APP_URL').'/storage',
            'visibility' => 'public',
            'throw' => false,
        ],

        's3' => [
            'driver' => 's3',
            'key' => env('AWS_ACCESS_KEY_ID'),
            'secret' => env('AWS_SECRET_ACCESS_KEY'),
            'region' => env('AWS_DEFAULT_REGION'),
            'bucket' => env('AWS_BUCKET'),
            'url' => env('AWS_URL'),
            'endpoint' => env('AWS_ENDPOINT'),
            'use_path_style_endpoint' => env('AWS_USE_PATH_STYLE_ENDPOINT', false),
            'throw' => false,
        ],

    ],

    /*
    |--------------------------------------------------------------------------
    | Symbolic Links
    |--------------------------------------------------------------------------
    |
    | Here you may configure the symbolic links that will be created when the
    | `storage:link` Artisan command is executed. The array keys should be
    | the locations of the links and the values should be their targets.
    |
    */

    'links' => [
        public_path('storage') => storage_path('app/public'),
    ],

];

--- END OF FILE: ./config/filesystems.php ---


#############################################
./database/seeders/VehicleStatusSeeder.php
#############################################
<?php
namespace Database\Seeders;
use Illuminate\Database\Seeder;
use App\Models\VehicleStatus;

class VehicleStatusSeeder extends Seeder
{
    public function run(): void
    {
        $types = ['Parking', 'En maintenance', 'Hors service', 'En mission', 'En attente'];
        foreach ($types as $type) {
            VehicleStatus::firstOrCreate(['name' => $type]);
        }
    }
}

--- END OF FILE: ./database/seeders/VehicleStatusSeeder.php ---


#############################################
./database/seeders/RolesAndPermissionsSeeder.php
#############################################
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;
use App\Models\User; // Assurez-vous que le namespace est correct pour votre modèle User
use Illuminate\Support\Facades\Hash; // Importer la façade Hash pour le mot de passe

class RolesAndPermissionsSeeder extends Seeder
{
    /**
     * Run the database seeds.
     *
     * @return void
     */
    public function run(): void
    {
        // Réinitialiser les rôles et permissions mis en cache.
        // Ceci est utile pour éviter les problèmes de cache lors du re-seed pendant le développement.
        app()[\Spatie\Permission\PermissionRegistrar::class]->forgetCachedPermissions();

        // === CRÉATION DES PERMISSIONS ===
        // Permissions pour la gestion des utilisateurs
        Permission::firstOrCreate(['name' => 'manage users', 'guard_name' => 'web']); // CRUD complet sur les utilisateurs
        Permission::firstOrCreate(['name' => 'view users', 'guard_name' => 'web']);
        Permission::firstOrCreate(['name' => 'create users', 'guard_name' => 'web']);
        Permission::firstOrCreate(['name' => 'edit users', 'guard_name' => 'web']);
        Permission::firstOrCreate(['name' => 'delete users', 'guard_name' => 'web']);

        // Permissions pour la gestion des rôles et permissions
        Permission::firstOrCreate(['name' => 'manage roles', 'guard_name' => 'web']);
        Permission::firstOrCreate(['name' => 'manage permissions', 'guard_name' => 'web']); // Souvent réservé au Super Admin

        // Permissions pour les futurs modules (exemples)
        Permission::firstOrCreate(['name' => 'manage fleet', 'guard_name' => 'web']); // Gestion complète de la flotte
        Permission::firstOrCreate(['name' => 'view fleet dashboard', 'guard_name' => 'web']); // Voir le tableau de bord de la flotte
        Permission::firstOrCreate(['name' => 'manage vehicles', 'guard_name' => 'web']); // CRUD véhicules
        Permission::firstOrCreate(['name' => 'view vehicles', 'guard_name' => 'web']);
        Permission::firstOrCreate(['name' => 'manage drivers', 'guard_name' => 'web']); // CRUD chauffeurs (en tant qu'entité spécifique)
        Permission::firstOrCreate(['name' => 'view drivers', 'guard_name' => 'web']);
        Permission::firstOrCreate(['name' => 'manage missions', 'guard_name' => 'web']); // CRUD missions
        Permission::firstOrCreate(['name' => 'view missions', 'guard_name' => 'web']);


        // === CRÉATION DES RÔLES ET ASSIGNATION DES PERMISSIONS ===

        // Rôle: Super Administrateur (a accès à tout, souvent géré via un Gate::before)
        $superAdminRole = Role::firstOrCreate(['name' => 'Super Admin', 'guard_name' => 'web']);
        // Pour le Super Admin, on peut soit lui donner toutes les permissions explicitement,
        // soit utiliser un Gate::before (voir étape suivante) pour un accès global.
        // $superAdminRole->givePermissionTo(Permission::all()); // Optionnel si Gate::before est utilisé

        // Rôle: Gestionnaire de Flotte
        $fleetManagerRole = Role::firstOrCreate(['name' => 'Fleet Manager', 'guard_name' => 'web']);
        $fleetManagerRole->givePermissionTo([
            'view users',       // Peut voir les utilisateurs (ex: chauffeurs)
            'create users',     // Peut créer des chauffeurs (si pertinent, sinon gérer via 'manage drivers')
            'edit users',       // Peut modifier les chauffeurs (si pertinent)
            'manage fleet',
            'view fleet dashboard',
            'manage vehicles',
            'view vehicles',
            'manage drivers',
            'view drivers',
            'manage missions',
            'view missions',
        ]);

        // Rôle: Chauffeur
        $driverRole = Role::firstOrCreate(['name' => 'Driver', 'guard_name' => 'web']);
        $driverRole->givePermissionTo([
            'view fleet dashboard', // Peut voir son propre tableau de bord / missions assignées
            'view missions',        // Peut voir ses missions
            // Ajouter d'autres permissions spécifiques aux chauffeurs au fur et à mesure
        ]);

        // === CRÉATION DES UTILISATEURS DE DÉMONSTRATION ===

        // Utilisateur Super Administrateur
        // `firstOrCreate` évite de créer des doublons si le seeder est exécuté plusieurs fois.
        $superAdminUser = User::firstOrCreate(
            ['email' => 'superadmin@zenfleet.com'], // Clé unique pour la recherche
            [                                       // Valeurs à créer si non trouvé
                'name' => 'Super Administrator',
                'password' => Hash::make('password'), // Utilisez un mot de passe sécurisé !
            ]
        );
        $superAdminUser->assignRole($superAdminRole);

        // Utilisateur Gestionnaire de Flotte (pour tests)
        $fleetManagerUser = User::firstOrCreate(
            ['email' => 'manager@zenfleet.com'],
            [
                'name' => 'Fleet Manager User',
                'password' => Hash::make('password123'), // Changez ceci !
            ]
        );
        $fleetManagerUser->assignRole($fleetManagerRole);

         // Utilisateur Chauffeur (pour tests)
         $driverUser = User::firstOrCreate(
            ['email' => 'driver@zenfleet.com'],
            [
                'name' => 'Driver User',
                'password' => Hash::make('password123'), // Changez ceci !
            ]
        );
        $driverUser->assignRole($driverRole);
    }
}

--- END OF FILE: ./database/seeders/RolesAndPermissionsSeeder.php ---


#############################################
./database/seeders/DriverSeeder.php
#############################################
<?php

namespace Database\Seeders;

use App\Models\Driver;
use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;

class DriverSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Crée 5 chauffeurs en utilisant la DriverFactory
        Driver::factory()->count(7)->create();

        $this->command->info('7 sample drivers have been created.');
    }
}

--- END OF FILE: ./database/seeders/DriverSeeder.php ---


#############################################
./database/seeders/ValidationLevelSeeder.php
#############################################
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use App\Models\ValidationLevel; // Assurez-vous que le modèle existe et est importé

class ValidationLevelSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $levels = [
            ['level_number' => 1, 'name' => 'Demandeur', 'description' => 'Niveau initial de la demande.'],
            ['level_number' => 2, 'name' => 'Validation Intermédiaire', 'description' => 'Premier niveau d\'approbation.'], // Exemple de niveau intermédiaire
            ['level_number' => 3, 'name' => 'Validation Finale', 'description' => 'Approbation finale.'],
            // Ajoutez d'autres niveaux selon votre document ou vos besoins
        ];

        foreach ($levels as $level) {
            ValidationLevel::firstOrCreate(
                ['level_number' => $level['level_number']], // Critère de recherche
                $level // Valeurs à insérer/mettre à jour
            );
        }

        $this->command->info('Validation levels created successfully.');
    }
}

--- END OF FILE: ./database/seeders/ValidationLevelSeeder.php ---


#############################################
./database/seeders/FuelTypeSeeder.php
#############################################
<?php
namespace Database\Seeders;
use Illuminate\Database\Seeder;
use App\Models\FuelType;

class FuelTypeSeeder extends Seeder
{
    public function run(): void
    {
        $types = ['Essence', 'Diesel', 'GPL', 'Électrique', 'Hybride'];
        foreach ($types as $type) {
            FuelType::firstOrCreate(['name' => $type]);
        }
    }
}

--- END OF FILE: ./database/seeders/FuelTypeSeeder.php ---


#############################################
./database/seeders/TransmissionTypeSeeder.php
#############################################
<?php
namespace Database\Seeders;
use Illuminate\Database\Seeder;
use App\Models\TransmissionType;

class TransmissionTypeSeeder extends Seeder
{
    public function run(): void
    {
        $types = ['Manuelle', 'Automatique'];
        foreach ($types as $type) {
            TransmissionType::firstOrCreate(['name' => $type]);
        }
    }
}

--- END OF FILE: ./database/seeders/TransmissionTypeSeeder.php ---


#############################################
./database/seeders/PermissionSeeder.php
#############################################
<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Role;
use Spatie\Permission\Models\Permission;
use Spatie\Permission\PermissionRegistrar;

class PermissionSeeder extends Seeder
{
    public function run(): void
    {
        app()[PermissionRegistrar::class]->forgetCachedPermissions();

        // --- Définition de toutes les permissions ---
        $permissions = [
            'view organizations', 'create organizations', 'edit organizations', 'delete organizations',
            'manage roles', 'view users', 'create users', 'edit users', 'delete users',
            'view vehicles', 'create vehicles', 'edit vehicles', 'delete vehicles', 'restore vehicles', 'force delete vehicles',
            'view drivers', 'create drivers', 'edit drivers', 'delete drivers', 'restore drivers', 'force delete drivers',
            'view assignments', 'create assignments', 'edit assignments', 'end assignments',
            'view maintenance', 'manage maintenance plans', 'log maintenance',
            'create handovers', 'view handovers', 'edit handovers', 'delete handovers', 'upload signed handovers',
        ];

        foreach ($permissions as $permission) {
            Permission::firstOrCreate(['name' => $permission, 'guard_name' => 'web']);
        }
        $this->command->info('All permissions created or verified successfully.');

        // --- Création des Rôles ---
        $superAdminRole = Role::firstOrCreate(['name' => 'Super Admin']);
        $adminRole = Role::firstOrCreate(['name' => 'Admin']);
        $managerRole = Role::firstOrCreate(['name' => 'Gestionnaire Flotte']);
        $driverRole = Role::firstOrCreate(['name' => 'Chauffeur']);
        $this->command->info('Roles created or verified successfully.');

        // --- Attribution des Permissions ---
        $superAdminRole->givePermissionTo(Permission::all());
        $this->command->info('All permissions granted to Super Admin role.');

        $adminPermissions = Permission::where('name', 'not like', '%organizations%')
                                        ->where('name', '!=', 'manage roles')
                                        ->get();
        $adminRole->syncPermissions($adminPermissions);
        $this->command->info('Permissions granted to Admin role.');

        $managerRole->syncPermissions([
            'view vehicles', 'create vehicles', 'edit vehicles', 'delete vehicles', 'restore vehicles',
            'view drivers', 'create drivers', 'edit drivers', 'delete drivers', 'restore drivers',
            'view assignments', 'create assignments', 'edit assignments', 'end assignments',
            'view maintenance', 'manage maintenance plans', 'log maintenance',
            'create handovers', 'view handovers', 'edit handovers',
        ]);
        $this->command->info('Permissions granted to "Gestionnaire Flotte" role.');

        // Le rôle Chauffeur n'a aucune permission pour le moment.
        $driverRole->syncPermissions([]);
        $this->command->info('Permissions for "Chauffeur" role have been set.');
    }
}
--- END OF FILE: ./database/seeders/PermissionSeeder.php ---


#############################################
./database/seeders/RoleSeeder.php
#############################################
<?php

namespace Database\Seeders;

use Illuminate\Database\Console\Seeds\WithoutModelEvents;
use Illuminate\Database\Seeder;
use Spatie\Permission\Models\Role; // Importez le modèle Role

class RoleSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // Création des rôles définis dans le document
        // La méthode firstOrCreate s'assure que le rôle n'est créé que s'il n'existe pas déjà.
        Role::firstOrCreate(['name' => 'Admin', 'guard_name' => 'web']);
        Role::firstOrCreate(['name' => 'Gestionnaire Flotte', 'guard_name' => 'web']);
        Role::firstOrCreate(['name' => 'Chauffeur', 'guard_name' => 'web']);
        // 'guard_name' => 'web' est le guard par défaut pour les applications web Laravel.
        // Vous pouvez le personnaliser dans config/auth.php si besoin.

        $this->command->info('Roles created successfully.');
    }
}

--- END OF FILE: ./database/seeders/RoleSeeder.php ---


#############################################
./database/seeders/VehicleDataSeeder.php
#############################################
<?php
namespace Database\Seeders;
use Illuminate\Database\Seeder;

class VehicleDataSeeder extends Seeder
{
    public function run(): void
    {
        $this->call([
            VehicleTypeSeeder::class,
            FuelTypeSeeder::class,
            TransmissionTypeSeeder::class,
            VehicleStatusSeeder::class,
            // Nous pourrons ajouter un VehicleSeeder ici plus tard pour des véhicules de test
        ]);
    }
}

--- END OF FILE: ./database/seeders/VehicleDataSeeder.php ---


#############################################
./database/seeders/Maintenance/RecurrenceUnitSeeder.php
#############################################
<?php
namespace Database\Seeders\Maintenance;
use App\Models\Maintenance\RecurrenceUnit;
use Illuminate\Database\Seeder;
class RecurrenceUnitSeeder extends Seeder
{
    public function run(): void
    {
        $units = ['Jours', 'Mois', 'Kilomètres'];
        foreach ($units as $unit) {
            RecurrenceUnit::firstOrCreate(['name' => $unit]);
        }
    }
}

--- END OF FILE: ./database/seeders/Maintenance/RecurrenceUnitSeeder.php ---


#############################################
./database/seeders/Maintenance/MaintenanceStatusSeeder.php
#############################################
<?php
namespace Database\Seeders\Maintenance;
use App\Models\Maintenance\MaintenanceStatus;
use Illuminate\Database\Seeder;
class MaintenanceStatusSeeder extends Seeder
{
    public function run(): void
    {
        $statuses = ['Planifiée', 'En cours', 'Terminée', 'Annulée'];
        foreach ($statuses as $status) {
            MaintenanceStatus::firstOrCreate(['name' => $status]);
        }
    }
}

--- END OF FILE: ./database/seeders/Maintenance/MaintenanceStatusSeeder.php ---


#############################################
./database/seeders/Maintenance/MaintenanceTypeSeeder.php
#############################################
<?php

namespace Database\Seeders\Maintenance;

use App\Models\Maintenance\MaintenanceType;
use Illuminate\Database\Seeder;

class MaintenanceTypeSeeder extends Seeder
{
    /**
     * Exécute les seeds pour la table des types de maintenance.
     */
    public function run(): void
    {
        // La méthode firstOrCreate garantit que nous ne créerons pas de doublons
        // si le seeder est exécuté plusieurs fois.

        // --- Types techniques (maintenance & entretien courant) ---
        $this->createType(
            'Vidange moteur', 
            'Changement de l\'huile moteur uniquement.'
        );
        $this->createType(
            'Vidange moteur complète', 
            'Changement de l\'huile moteur et du filtre à huile.'
        );
        $this->createType(
            'Vidange boîte de vitesse', 
            'Changement de l\'huile de la boîte de vitesse (manuelle ou automatique).'
        );
        $this->createType(
            'Courroie de distribution', 
            'Vérification ou remplacement du kit de distribution.'
        );
        $this->createType(
            'Courroie d\'accessoires', 
            'Vérification ou remplacement de la courroie d\'accessoires (poly-V).'
        );
        $this->createType(
            'Pneumatiques', 
            'Contrôle ou remplacement des pneus (pression, usure, géométrie).'
        );
        $this->createType(
            'Système de freinage', 
            'Contrôle ou remplacement des disques, plaquettes, et purge du liquide de frein.'
        );
        $this->createType(
            'Système électrique', 
            'Contrôle de la batterie, de l\'alternateur et du démarreur.'
        );
        $this->createType(
            'Filtres', 
            'Remplacement des filtres à air, à carburant, et d\'habitacle (pollen).'
        );
        $this->createType(
            'Nettoyage FAP/DPF', 
            'Nettoyage ou régénération du filtre à particules.'
        );
        $this->createType(
            'Système de climatisation', 
            'Recharge de gaz, contrôle d\'étanchéité, et remplacement du filtre déshydrateur.'
        );

        // --- Types administratifs & réglementaires ---
        $this->createType(
            'Contrôle technique', 
            'Inspection réglementaire périodique obligatoire.'
        );
        $this->createType(
            'Vignette automobile', 
            'Paiement annuel de la taxe de circulation.'
        );
        $this->createType(
            'Permis de circuler', 
            'Renouvellement ou mise à jour de la carte grise / permis de circuler.'
        );
        $this->createType(
            'Assurance automobile', 
            'Paiement ou renouvellement de la police d\'assurance (RC, tous risques, etc.).'
        );
        $this->createType(
            'Assurance marchandises', 
            'Paiement ou renouvellement de l\'assurance pour les biens transportés.'
        );
        $this->createType(
            'Autorisation de mise en circulation (AMC)', 
            'Contrôles spécifiques pour les véhicules de transport de marchandises ou de personnes.'
        );
        $this->createType(
            'Révision générale constructeur', 
            'Entretien complet suivant les préconisations du constructeur.'
        );

        $this->command->info('Maintenance types seeded successfully.');
    }

    /**
     * Méthode privée pour simplifier la création.
     */
    private function createType(string $name, string $description): void
    {
        MaintenanceType::firstOrCreate(
            ['name' => $name], 
            ['description' => $description]
        );
    }
}

--- END OF FILE: ./database/seeders/Maintenance/MaintenanceTypeSeeder.php ---


#############################################
./database/seeders/Maintenance/MaintenanceDataSeeder.php
#############################################
<?php
namespace Database\Seeders\Maintenance;
use Illuminate\Database\Seeder;
class MaintenanceDataSeeder extends Seeder
{
    public function run(): void
    {
        $this->call([
            MaintenanceTypeSeeder::class,
            RecurrenceUnitSeeder::class,
            MaintenanceStatusSeeder::class,
        ]);
    }
}

--- END OF FILE: ./database/seeders/Maintenance/MaintenanceDataSeeder.php ---


#############################################
./database/seeders/DatabaseSeeder.php
#############################################
<?php

namespace Database\Seeders;

use App\Models\User;
use App\Models\Organization;
use Illuminate\Database\Seeder;
use Illuminate\Support\Str;

class DatabaseSeeder extends Seeder
{
    public function run(): void
    {
        $this->call([
            PermissionSeeder::class,
            ValidationLevelSeeder::class,
            VehicleDataSeeder::class,
            DriverStatusSeeder::class,
            Maintenance\MaintenanceDataSeeder::class,
        ]);

        $zenfleetOrganization = Organization::firstOrCreate(
            ['name' => 'ZENFLEET Platform'],
            ['uuid' => (string) Str::uuid()]
        );

        // --- Création de l'utilisateur SUPER ADMIN ---
        $superAdminUser = User::firstOrCreate(
            ['email' => 'admin@zenfleet.com'],
            [
                'first_name' => 'Super',
                'last_name' => 'Admin',
                'password' => bcrypt('password'),
                'organization_id' => $zenfleetOrganization->id,
                'email_verified_at' => now(),
            ]
        );

        // CORRECTION : On assigne le bon rôle
        $superAdminUser->syncRoles(['Super Admin']);
        $this->command->info('Super Admin user created and assigned.');

        // --- Création de données de test pour une organisation cliente ---
        if (app()->environment('local', 'development')) {
            $clientOrganization = Organization::factory()->create(['name' => 'Client de Démo Inc.']);
            if ($clientOrganization) {
                $clientAdmin = User::factory()->create([
                    'first_name' => 'Admin',
                    'last_name' => 'Client',
                    'email' => 'client.admin@exemple.com',
                    'organization_id' => $clientOrganization->id,
                ]);
                $clientAdmin->assignRole('Admin');

                \App\Models\Driver::factory()->count(5)->create(['organization_id' => $clientOrganization->id]);
                \App\Models\Vehicle::factory()->count(10)->create(['organization_id' => $clientOrganization->id]);
                $this->command->info('Demo organization with data created.');
            }
        }
    }
}
--- END OF FILE: ./database/seeders/DatabaseSeeder.php ---


#############################################
./database/seeders/DriverStatusSeeder.php
#############################################
<?php
namespace Database\Seeders;
use App\Models\DriverStatus;
use Illuminate\Database\Seeder;

class DriverStatusSeeder extends Seeder
{
    public function run(): void
    {
        $statuses = ['Disponible', 'En congé', 'Suspendu', 'Inactif', 'En mission', 'Ex-employé'];
        foreach ($statuses as $status) {
            DriverStatus::firstOrCreate(['name' => $status]);
        }
    }
}

--- END OF FILE: ./database/seeders/DriverStatusSeeder.php ---


#############################################
./database/seeders/VehicleTypeSeeder.php
#############################################
<?php
namespace Database\Seeders;
use Illuminate\Database\Seeder;
use App\Models\VehicleType;

class VehicleTypeSeeder extends Seeder
{
    public function run(): void
    {
        $types = ['Berline', 'SUV', 'Utilitaire léger', 'Camion', 'Bus', 'Moto'];
        foreach ($types as $type) {
            VehicleType::firstOrCreate(['name' => $type]);
        }
    }
}

--- END OF FILE: ./database/seeders/VehicleTypeSeeder.php ---


#############################################
./database/factories/OrganizationFactory.php
#############################################
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Organization>
 */
class OrganizationFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'uuid' => (string) Str::uuid(),
            'name' => $this->faker->company(),
            'address' => $this->faker->address(),
            'contact_email' => $this->faker->unique()->safeEmail(),
            'status' => 'active',
        ];
    }
}

--- END OF FILE: ./database/factories/OrganizationFactory.php ---


#############################################
./database/factories/VehicleFactory.php
#############################################
<?php

namespace Database\Factories;

use App\Models\FuelType;
use App\Models\TransmissionType;
use App\Models\VehicleStatus;
use App\Models\VehicleType;
use Illuminate\Database\Eloquent\Factories\Factory;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\Vehicle>
 */
class VehicleFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        $initialMileage = $this->faker->numberBetween(5000, 50000);

        return [
            'registration_plate' => $this->faker->unique()->regexify('[A-Z]{2}-[0-9]{3}-[A-Z]{2}'),
            'vin' => $this->faker->unique()->bothify('*****************'),
            'brand' => $this->faker->randomElement(['Renault', 'Peugeot', 'Dacia', 'Volkswagen', 'Toyota']),
            'model' => $this->faker->randomElement(['Clio', '208', 'Sandero', 'Golf', 'Yaris']),
            'color' => $this->faker->safeColorName(),
            'manufacturing_year' => $this->faker->numberBetween(2015, now()->year),
            'initial_mileage' => $initialMileage,
            'current_mileage' => $initialMileage + $this->faker->numberBetween(1000, 50000),
            'purchase_price' => $this->faker->randomFloat(2, 1000000, 5000000),
            'current_value' => $this->faker->randomFloat(2, 800000, 4000000),

            // On récupère des IDs valides depuis les tables de référence
            'vehicle_type_id' => VehicleType::inRandomOrder()->first()->id,
            'fuel_type_id' => FuelType::inRandomOrder()->first()->id,
            'transmission_type_id' => TransmissionType::inRandomOrder()->first()->id,
            'status_id' => VehicleStatus::where('name', 'Parking')->first()->id,
        ];
    }
}
--- END OF FILE: ./database/factories/VehicleFactory.php ---


#############################################
./database/factories/DriverFactory.php
#############################################
<?php

namespace Database\Factories;

use App\Models\DriverStatus;
use Illuminate\Database\Eloquent\Factories\Factory;

class DriverFactory extends Factory
{
    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        // On récupère un statut "Actif" ou "Disponible" au hasard pour le chauffeur
        $activeStatus = DriverStatus::whereIn('name', ['Actif', 'Disponible'])->inRandomOrder()->first();

        return [
            'first_name' => fake()->firstName(),
            'last_name' => fake()->lastName(),
            'employee_number' => fake()->unique()->numerify('EMP-#####'),
            'personal_phone' => fake()->unique()->phoneNumber(),
            'license_number' => fake()->unique()->numerify('LN-########'),
            'status_id' => $activeStatus->id,
            'birth_date' => fake()->dateTimeBetween('-50 years', '-22 years'),
            'recruitment_date' => fake()->dateTimeBetween('-5 years', 'now'),
            // ... vous pouvez ajouter d'autres champs si nécessaire
        ];
    }
}

--- END OF FILE: ./database/factories/DriverFactory.php ---


#############################################
./database/factories/UserFactory.php
#############################################
<?php

namespace Database\Factories;

use Illuminate\Database\Eloquent\Factories\Factory;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Str;

/**
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>
 */
class UserFactory extends Factory
{
    /**
     * The current password being used by the factory.
     */
    protected static ?string $password;

    /**
     * Define the model's default state.
     *
     * @return array<string, mixed>
     */
    public function definition(): array
    {
        return [
            'name' => fake()->name(),
            'email' => fake()->unique()->safeEmail(),
            'email_verified_at' => now(),
            'password' => static::$password ??= Hash::make('password'),
            'remember_token' => Str::random(10),
        ];
    }

    /**
     * Indicate that the model's email address should be unverified.
     */
    public function unverified(): static
    {
        return $this->state(fn (array $attributes) => [
            'email_verified_at' => null,
        ]);
    }
}

--- END OF FILE: ./database/factories/UserFactory.php ---


#############################################
./database/migrations/2025_06_09_144736_create_assignments_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('assignments', function (Blueprint $table) {
            $table->id();
            $table->foreignId('vehicle_id')->constrained('vehicles')->onDelete('restrict');
            $table->foreignId('driver_id')->constrained('drivers')->onDelete('restrict');
            $table->timestamp('start_datetime');
            $table->timestamp('end_datetime')->nullable();
            $table->unsignedBigInteger('start_mileage')->nullable();
            $table->unsignedBigInteger('end_mileage')->nullable();
            $table->text('reason')->nullable();
            $table->text('notes')->nullable();
            $table->foreignId('created_by_user_id')->nullable()->constrained('users')->onDelete('set null');
            $table->softDeletes();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('assignments');
    }
};

--- END OF FILE: ./database/migrations/2025_06_09_144736_create_assignments_table.php ---


#############################################
./database/migrations/2025_06_05_134749_add_custom_fields_to_users_table.php
#############################################
// database/migrations/YYYY_MM_DD_HHMMSS_add_custom_fields_to_users_table.php
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            // Rendre la colonne 'name' nullable si elle ne l'est pas déjà,
            // car nous allons la dériver de first_name et last_name.
            // Ou, si on la garde NOT NULL, s'assurer qu'elle est remplie à la création.
            // Pour l'instant, nous ajoutons les champs. Breeze s'attend à 'name' NOT NULL.
            // Nous allons gérer la population de 'name' dans le modèle ou un observer.

            $table->string('first_name')->after('name')->nullable(); // Ou après 'id' si 'name' n'est plus le premier champ pertinent
            $table->string('last_name')->after('first_name')->nullable();
            $table->string('phone', 50)->unique()->nullable()->after('email');
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropColumn(['first_name', 'last_name', 'phone']);
        });
    }
};

--- END OF FILE: ./database/migrations/2025_06_05_134749_add_custom_fields_to_users_table.php ---


#############################################
./database/migrations/2025_06_05_150327_create_validation_levels_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
   
	public function up(): void
  {
    Schema::create('validation_levels', function (Blueprint $table) {
        $table->id(); // Ou $table->serial('id')->primary(); pour SERIAL
        $table->smallInteger('level_number')->unique();
        $table->string('name', 100);
        $table->text('description')->nullable();
        $table->timestamps(); 
    });
  }




    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('validation_levels');
    }
};

--- END OF FILE: ./database/migrations/2025_06_05_150327_create_validation_levels_table.php ---


#############################################
./database/migrations/2025_06_07_202347_add_soft_deletes_to_vehicles_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::table('vehicles', function (Blueprint $table) {
            $table->softDeletes(); // Ajoute la colonne 'deleted_at' nullable
        });
    }

    public function down(): void
    {
        Schema::table('vehicles', function (Blueprint $table) {
            $table->dropSoftDeletes(); // Supprime la colonne 'deleted_at'
        });
    }
};

--- END OF FILE: ./database/migrations/2025_06_07_202347_add_soft_deletes_to_vehicles_table.php ---


#############################################
./database/migrations/2025_06_07_231226_create_driver_statuses_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('driver_statuses', function (Blueprint $table) {
            $table->id();
            $table->string('name', 100)->unique();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('driver_statuses');
    }
};

--- END OF FILE: ./database/migrations/2025_06_07_231226_create_driver_statuses_table.php ---


#############################################
./database/migrations/2025_06_10_160703_create_maintenance_plans_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
    
    Schema::create('maintenance_plans', function (Blueprint $table) {
    $table->id();
    $table->foreignId('vehicle_id')->constrained('vehicles')->onDelete('cascade');
    $table->foreignId('maintenance_type_id')->constrained('maintenance_types')->onDelete('cascade');
    $table->integer('recurrence_value');
    $table->foreignId('recurrence_unit_id')->constrained('recurrence_units');
    $table->date('next_due_date')->nullable();
    $table->bigInteger('next_due_mileage')->nullable();
    $table->text('notes')->nullable();
    $table->softDeletes();
    $table->timestamps();
});
    
    
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('maintenance_plans');
    }
};

--- END OF FILE: ./database/migrations/2025_06_10_160703_create_maintenance_plans_table.php ---


#############################################
./database/migrations/2025_06_10_160701_create_recurrence_units_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
    
    Schema::create('recurrence_units', function (Blueprint $table) {
    $table->id();
    $table->string('name', 50)->unique(); // Ex: Jours, Kilomètres, Mois
});
    
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('recurrence_units');
    }
};

--- END OF FILE: ./database/migrations/2025_06_10_160701_create_recurrence_units_table.php ---


#############################################
./database/migrations/2025_06_10_160701_create_maintenance_types_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
    	Schema::create('maintenance_types', function (Blueprint $table) {
    		$table->id();
    		$table->string('name', 150)->unique();
    		$table->text('description')->nullable();
	});
    
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('maintenance_types');
    }
};

--- END OF FILE: ./database/migrations/2025_06_10_160701_create_maintenance_types_table.php ---


#############################################
./database/migrations/2019_08_19_000000_create_failed_jobs_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('failed_jobs', function (Blueprint $table) {
            $table->id();
            $table->string('uuid')->unique();
            $table->text('connection');
            $table->text('queue');
            $table->longText('payload');
            $table->longText('exception');
            $table->timestamp('failed_at')->useCurrent();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('failed_jobs');
    }
};

--- END OF FILE: ./database/migrations/2019_08_19_000000_create_failed_jobs_table.php ---


#############################################
./database/migrations/2025_07_07_000238_add_organization_id_to_tables.php
#############################################
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration {
    public function up(): void {
        $tables = ['users', 'vehicles', 'drivers', 'assignments', 'maintenance_plans', 'maintenance_logs', 'vehicle_handover_forms'];
        foreach ($tables as $tableName) {
            Schema::table($tableName, function (Blueprint $table) {
                $table->foreignId('organization_id')->nullable()->constrained('organizations')->onDelete('cascade');
            });
        }
    }
    public function down(): void {
        // ... (logique pour supprimer les colonnes) ...
    }
};

--- END OF FILE: ./database/migrations/2025_07_07_000238_add_organization_id_to_tables.php ---


#############################################
./database/migrations/2025_06_06_204531_create_transmission_types_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('transmission_types', function (Blueprint $table) {
            $table->id();
            $table->string('name', 100)->unique();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('transmission_types');
    }
};

--- END OF FILE: ./database/migrations/2025_06_06_204531_create_transmission_types_table.php ---


#############################################
./database/migrations/2025_06_06_204514_create_fuel_types_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('fuel_types', function (Blueprint $table) {
            $table->id();
            $table->string('name', 100)->unique();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('fuel_types');
    }
};

--- END OF FILE: ./database/migrations/2025_06_06_204514_create_fuel_types_table.php ---


#############################################
./database/migrations/2025_07_07_160317_add_soft_deletes_to_users_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->softDeletes(); // Ajoute la colonne 'deleted_at' nullable
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::table('users', function (Blueprint $table) {
            $table->dropSoftDeletes(); // Supprime la colonne 'deleted_at'
        });
    }
};

--- END OF FILE: ./database/migrations/2025_07_07_160317_add_soft_deletes_to_users_table.php ---


#############################################
./database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('password_reset_tokens', function (Blueprint $table) {
            $table->string('email')->primary();
            $table->string('token');
            $table->timestamp('created_at')->nullable();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('password_reset_tokens');
    }
};

--- END OF FILE: ./database/migrations/2014_10_12_100000_create_password_reset_tokens_table.php ---


#############################################
./database/migrations/2025_06_05_144141_create_permission_tables.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        $teams = config('permission.teams');
        $tableNames = config('permission.table_names');
        $columnNames = config('permission.column_names');
        $pivotRole = $columnNames['role_pivot_key'] ?? 'role_id';
        $pivotPermission = $columnNames['permission_pivot_key'] ?? 'permission_id';

        throw_if(empty($tableNames), new Exception('Error: config/permission.php not loaded. Run [php artisan config:clear] and try again.'));
        throw_if($teams && empty($columnNames['team_foreign_key'] ?? null), new Exception('Error: team_foreign_key on config/permission.php not loaded. Run [php artisan config:clear] and try again.'));

        Schema::create($tableNames['permissions'], static function (Blueprint $table) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // permission id
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();

            $table->unique(['name', 'guard_name']);
        });

        Schema::create($tableNames['roles'], static function (Blueprint $table) use ($teams, $columnNames) {
            // $table->engine('InnoDB');
            $table->bigIncrements('id'); // role id
            if ($teams || config('permission.testing')) { // permission.testing is a fix for sqlite testing
                $table->unsignedBigInteger($columnNames['team_foreign_key'])->nullable();
                $table->index($columnNames['team_foreign_key'], 'roles_team_foreign_key_index');
            }
            $table->string('name');       // For MyISAM use string('name', 225); // (or 166 for InnoDB with Redundant/Compact row format)
            $table->string('guard_name'); // For MyISAM use string('guard_name', 25);
            $table->timestamps();
            if ($teams || config('permission.testing')) {
                $table->unique([$columnNames['team_foreign_key'], 'name', 'guard_name']);
            } else {
                $table->unique(['name', 'guard_name']);
            }
        });

        Schema::create($tableNames['model_has_permissions'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotPermission, $teams) {
            $table->unsignedBigInteger($pivotPermission);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_permissions_model_id_model_type_index');

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_permissions_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            } else {
                $table->primary([$pivotPermission, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_permissions_permission_model_type_primary');
            }

        });

        Schema::create($tableNames['model_has_roles'], static function (Blueprint $table) use ($tableNames, $columnNames, $pivotRole, $teams) {
            $table->unsignedBigInteger($pivotRole);

            $table->string('model_type');
            $table->unsignedBigInteger($columnNames['model_morph_key']);
            $table->index([$columnNames['model_morph_key'], 'model_type'], 'model_has_roles_model_id_model_type_index');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');
            if ($teams) {
                $table->unsignedBigInteger($columnNames['team_foreign_key']);
                $table->index($columnNames['team_foreign_key'], 'model_has_roles_team_foreign_key_index');

                $table->primary([$columnNames['team_foreign_key'], $pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            } else {
                $table->primary([$pivotRole, $columnNames['model_morph_key'], 'model_type'],
                    'model_has_roles_role_model_type_primary');
            }
        });

        Schema::create($tableNames['role_has_permissions'], static function (Blueprint $table) use ($tableNames, $pivotRole, $pivotPermission) {
            $table->unsignedBigInteger($pivotPermission);
            $table->unsignedBigInteger($pivotRole);

            $table->foreign($pivotPermission)
                ->references('id') // permission id
                ->on($tableNames['permissions'])
                ->onDelete('cascade');

            $table->foreign($pivotRole)
                ->references('id') // role id
                ->on($tableNames['roles'])
                ->onDelete('cascade');

            $table->primary([$pivotPermission, $pivotRole], 'role_has_permissions_permission_id_role_id_primary');
        });

        app('cache')
            ->store(config('permission.cache.store') != 'default' ? config('permission.cache.store') : null)
            ->forget(config('permission.cache.key'));
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        $tableNames = config('permission.table_names');

        if (empty($tableNames)) {
            throw new \Exception('Error: config/permission.php not found and defaults could not be merged. Please publish the package configuration before proceeding, or drop the tables manually.');
        }

        Schema::drop($tableNames['role_has_permissions']);
        Schema::drop($tableNames['model_has_roles']);
        Schema::drop($tableNames['model_has_permissions']);
        Schema::drop($tableNames['roles']);
        Schema::drop($tableNames['permissions']);
    }
};

--- END OF FILE: ./database/migrations/2025_06_05_144141_create_permission_tables.php ---


#############################################
./database/migrations/2025_06_06_204549_create_vehicle_statuses_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('vehicle_statuses', function (Blueprint $table) {
            $table->id();
            $table->string('name', 100)->unique();
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('vehicle_statuses');
    }
};

--- END OF FILE: ./database/migrations/2025_06_06_204549_create_vehicle_statuses_table.php ---


#############################################
./database/migrations/2014_10_12_000000_create_users_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->rememberToken();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('users');
    }
};

--- END OF FILE: ./database/migrations/2014_10_12_000000_create_users_table.php ---


#############################################
./database/migrations/2025_07_07_000048_create_organizations_table.php
#############################################
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration {
    public function up(): void {
        Schema::create('organizations', function (Blueprint $table) {
            $table->id();
            $table->uuid('uuid')->unique();
            $table->string('name');
            $table->text('address')->nullable();
            $table->string('contact_email')->nullable();
            $table->string('status')->default('active'); // active, inactive, suspended
            $table->timestamps();
        });
    }
    public function down(): void {
        Schema::dropIfExists('organizations');
    }
};

--- END OF FILE: ./database/migrations/2025_07_07_000048_create_organizations_table.php ---


#############################################
./database/migrations/2025_06_10_160704_create_maintenance_logs_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
    
    Schema::create('maintenance_logs', function (Blueprint $table) {
    $table->id();
    $table->foreignId('vehicle_id')->constrained('vehicles')->onDelete('cascade');
    $table->foreignId('maintenance_plan_id')->nullable()->constrained('maintenance_plans')->onDelete('set null');
    $table->foreignId('maintenance_type_id')->constrained('maintenance_types');
    $table->foreignId('maintenance_status_id')->constrained('maintenance_statuses');
    $table->date('performed_on_date');
    $table->bigInteger('performed_at_mileage');
    $table->decimal('cost', 12, 2)->nullable();
    // La table `suppliers` n'existant pas encore, nous laissons cette clé en commentaire.
    // $table->foreignId('supplier_id')->nullable()->constrained('suppliers');
    $table->text('details')->nullable();
    $table->string('performed_by')->nullable();
    $table->softDeletes();
    $table->timestamps();
});
    
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('maintenance_logs');
    }
};

--- END OF FILE: ./database/migrations/2025_06_10_160704_create_maintenance_logs_table.php ---


#############################################
./database/migrations/2025_06_17_233757_create_vehicle_handover_details_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('vehicle_handover_details', function (Blueprint $table) {
            $table->id();
            $table->foreignId('handover_form_id')->constrained('vehicle_handover_forms')->onDelete('cascade');
            $table->string('category');
            $table->string('item');
            //$table->enum('status', ['Bon', 'Moyen', 'Mauvais', 'N/A']);
            $table->enum('status', ['Bon', 'Moyen', 'Mauvais', 'N/A', 'Oui', 'Non']);
        
            $table->timestamps();
        }); // <-- LE POINT-VIRGULE MANQUANT EST AJOUTÉ ICI
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('vehicle_handover_details');
    }
};
--- END OF FILE: ./database/migrations/2025_06_17_233757_create_vehicle_handover_details_table.php ---


#############################################
./database/migrations/2025_06_17_233747_create_vehicle_handover_forms_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
    
    Schema::create('vehicle_handover_forms', function (Blueprint $table) {
    $table->id();
    $table->foreignId('assignment_id')->unique()->constrained('assignments')->onDelete('cascade');
    $table->date('issue_date');
    $table->string('assignment_reason')->nullable();
    $table->unsignedBigInteger('current_mileage');
    $table->text('general_observations')->nullable();
    $table->text('additional_observations')->nullable();
    $table->string('signed_form_path', 512)->nullable();
    $table->boolean('is_latest_version')->default(true);
    $table->softDeletes();
    $table->timestamps();
    	
    });
    
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('vehicle_handover_forms');
    }
};

--- END OF FILE: ./database/migrations/2025_06_17_233747_create_vehicle_handover_forms_table.php ---


#############################################
./database/migrations/2025_06_10_113936_add_license_expiry_date_to_drivers_table.php
#############################################
<?php
use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
return new class extends Migration {
    public function up(): void {
        Schema::table('drivers', function (Blueprint $table) {
            $table->date('license_expiry_date')->nullable()->after('license_authority');
        });
    }
    public function down(): void {
        Schema::table('drivers', function (Blueprint $table) {
            $table->dropColumn('license_expiry_date');
        });
    }
};

--- END OF FILE: ./database/migrations/2025_06_10_113936_add_license_expiry_date_to_drivers_table.php ---


#############################################
./database/migrations/2025_06_06_205007_create_vehicles_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
public function up(): void
{
    Schema::create('vehicles', function (Blueprint $table) {
        $table->id();
        $table->string('registration_plate', 50)->unique();
        $table->string('vin', 17)->unique()->nullable(); // VIN est nullable dès le départ
        $table->string('brand', 100)->nullable();
        $table->string('model', 100)->nullable();
        $table->string('color', 50)->nullable();

        $table->foreignId('vehicle_type_id')->nullable()->constrained('vehicle_types')->onDelete('set null');
        $table->foreignId('fuel_type_id')->nullable()->constrained('fuel_types')->onDelete('set null');
        $table->foreignId('transmission_type_id')->nullable()->constrained('transmission_types')->onDelete('set null');
        $table->foreignId('status_id')->nullable()->constrained('vehicle_statuses')->onDelete('set null');

        $table->smallInteger('manufacturing_year')->nullable();
        $table->date('acquisition_date')->nullable(); // CHAMP AJOUTÉ ICI
        $table->decimal('purchase_price', 12, 2)->nullable(); // CHAMP AJOUTÉ ICI
        $table->decimal('current_value', 12, 2)->nullable(); // CHAMP AJOUTÉ ICI

        $table->unsignedBigInteger('initial_mileage')->default(0);
        $table->unsignedBigInteger('current_mileage')->default(0);
        $table->integer('engine_displacement_cc')->nullable();
        $table->integer('power_hp')->nullable();
        $table->smallInteger('seats')->nullable();

        $table->text('status_reason')->nullable();
        $table->text('notes')->nullable();

        $table->timestamps();
    });
}
    public function down(): void
    {
        Schema::dropIfExists('vehicles');
    }
};

--- END OF FILE: ./database/migrations/2025_06_06_205007_create_vehicles_table.php ---


#############################################
./database/migrations/2025_06_10_160702_create_maintenance_statuses_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
    
    Schema::create('maintenance_statuses', function (Blueprint $table) {
    $table->id();
    $table->string('name', 100)->unique(); // Ex: Planifiée, En cours, Terminée, Annulée
});
    
    
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('maintenance_statuses');
    }
};

--- END OF FILE: ./database/migrations/2025_06_10_160702_create_maintenance_statuses_table.php ---


#############################################
./database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('personal_access_tokens', function (Blueprint $table) {
            $table->id();
            $table->morphs('tokenable');
            $table->string('name');
            $table->string('token', 64)->unique();
            $table->text('abilities')->nullable();
            $table->timestamp('last_used_at')->nullable();
            $table->timestamp('expires_at')->nullable();
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('personal_access_tokens');
    }
};

--- END OF FILE: ./database/migrations/2019_12_14_000001_create_personal_access_tokens_table.php ---


#############################################
./database/migrations/2025_06_05_150533_create_user_validation_levels_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    
	public function up(): void
  {
    Schema::create('user_validation_levels', function (Blueprint $table) {
        $table->foreignId('user_id')->constrained('users')->onDelete('cascade');
        $table->foreignId('validation_level_id')->constrained('validation_levels')->onDelete('cascade');
        $table->primary(['user_id', 'validation_level_id']);
        // Pas de timestamps ici généralement.
    });
  }



    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('user_validation_levels');
    }
};

--- END OF FILE: ./database/migrations/2025_06_05_150533_create_user_validation_levels_table.php ---


#############################################
./database/migrations/2025_06_07_231452_create_drivers_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
     {
        Schema::create('drivers', function (Blueprint $table) {
        $table->id();
        // Lien optionnel vers un compte utilisateur système.
        $table->foreignId('user_id')->nullable()->unique()->constrained('users')->onDelete('set null');

        $table->string('employee_number', 100)->nullable()->unique();
        $table->string('first_name');
        $table->string('last_name');
        $table->string('photo_path', 512)->nullable();
        $table->date('birth_date')->nullable();
        $table->string('blood_type', 10)->nullable();
        $table->text('address')->nullable();
        $table->string('personal_phone', 50)->nullable();
        $table->string('personal_email', 255)->nullable();
        $table->string('license_number', 100)->nullable();
        $table->string('license_category', 50)->nullable();
        $table->date('license_issue_date')->nullable();
        $table->string('license_authority')->nullable();
        $table->date('recruitment_date')->nullable();
        $table->date('contract_end_date')->nullable();

        $table->foreignId('status_id')->nullable()->constrained('driver_statuses')->onDelete('set null');

        $table->string('emergency_contact_name')->nullable();
        $table->string('emergency_contact_phone', 50)->nullable();

        $table->timestamps();
        $table->softDeletes(); // Pour la suppression douce
    	});
      }
    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('drivers');
    }
};

--- END OF FILE: ./database/migrations/2025_06_07_231452_create_drivers_table.php ---


#############################################
./database/migrations/2025_06_06_204451_create_vehicle_types_table.php
#############################################
<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

return new class extends Migration
{
    public function up(): void
    {
        Schema::create('vehicle_types', function (Blueprint $table) {
            $table->id();
            $table->string('name', 100)->unique();
            // Pas de timestamps pour cette table de référence simple
        });
    }

    public function down(): void
    {
        Schema::dropIfExists('vehicle_types');
    }
};

--- END OF FILE: ./database/migrations/2025_06_06_204451_create_vehicle_types_table.php ---


#############################################
./resources/js/app.js
#############################################
import './bootstrap';

import Alpine from 'alpinejs';
import TomSelect from 'tom-select';

window.Alpine = Alpine;
window.TomSelect = TomSelect;

import ApexCharts from 'apexcharts';
window.ApexCharts = ApexCharts;

Alpine.start();

--- END OF FILE: ./resources/js/app.js ---


#############################################
./resources/js/bootstrap.js
#############################################
/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

import axios from 'axios';
window.axios = axios;

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */

// import Echo from 'laravel-echo';

// import Pusher from 'pusher-js';
// window.Pusher = Pusher;

// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: import.meta.env.VITE_PUSHER_APP_KEY,
//     cluster: import.meta.env.VITE_PUSHER_APP_CLUSTER ?? 'mt1',
//     wsHost: import.meta.env.VITE_PUSHER_HOST ? import.meta.env.VITE_PUSHER_HOST : `ws-${import.meta.env.VITE_PUSHER_APP_CLUSTER}.pusher.com`,
//     wsPort: import.meta.env.VITE_PUSHER_PORT ?? 80,
//     wssPort: import.meta.env.VITE_PUSHER_PORT ?? 443,
//     forceTLS: (import.meta.env.VITE_PUSHER_SCHEME ?? 'https') === 'https',
//     enabledTransports: ['ws', 'wss'],
// });

--- END OF FILE: ./resources/js/bootstrap.js ---


#############################################
./resources/css/app.css
#############################################
@import 'tom-select/dist/css/tom-select.default.css';

@tailwind base;
@tailwind components;
@tailwind utilities;



/* STYLES SPÉCIFIQUES POUR L'IMPRESSION DE LA FICHE DE REMISE */
@media print {
    /* Cache tous les éléments de l'interface par défaut */
    body * {
        visibility: hidden;
    }
    
    /* Ne rend visible que la zone d'impression et son contenu */
    #print-area, #print-area * {
        visibility: visible;
    }

    /* Positionne la zone d'impression en haut de la page */
    #print-area {
        position: absolute;
        left: 0;
        top: 0;
        width: 100%;
        box-shadow: none !important;
        border: none !important;
    }

    /* Cache spécifiquement les éléments non désirés comme les boutons */
    .print\:hidden {
        display: none !important;
    }

    /* Optimisation de la police pour le format A4 */
    body, #print-area {
        font-size: 10pt;
        background-color: white !important;
        -webkit-print-color-adjust: exact;
        print-color-adjust: exact;
    }
}

--- END OF FILE: ./resources/css/app.css ---


#############################################
./resources/views/profile/edit.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Profile') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 space-y-6">
            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-profile-information-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.update-password-form')
                </div>
            </div>

            <div class="p-4 sm:p-8 bg-white shadow sm:rounded-lg">
                <div class="max-w-xl">
                    @include('profile.partials.delete-user-form')
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/profile/edit.blade.php ---


#############################################
./resources/views/profile/partials/update-password-form.blade.php
#############################################
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Update Password') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Ensure your account is using a long, random password to stay secure.') }}
        </p>
    </header>

    <form method="post" action="{{ route('password.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('put')

        <div>
            <x-input-label for="update_password_current_password" :value="__('Current Password')" />
            <x-text-input id="update_password_current_password" name="current_password" type="password" class="mt-1 block w-full" autocomplete="current-password" />
            <x-input-error :messages="$errors->updatePassword->get('current_password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password" :value="__('New Password')" />
            <x-text-input id="update_password_password" name="password" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password')" class="mt-2" />
        </div>

        <div>
            <x-input-label for="update_password_password_confirmation" :value="__('Confirm Password')" />
            <x-text-input id="update_password_password_confirmation" name="password_confirmation" type="password" class="mt-1 block w-full" autocomplete="new-password" />
            <x-input-error :messages="$errors->updatePassword->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Save') }}</x-primary-button>

            @if (session('status') === 'password-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600"
                >{{ __('Saved.') }}</p>
            @endif
        </div>
    </form>
</section>

--- END OF FILE: ./resources/views/profile/partials/update-password-form.blade.php ---


#############################################
./resources/views/profile/partials/update-profile-information-form.blade.php
#############################################
{{-- resources/views/profile/partials/update-profile-information-form.blade.php --}}
<section>
    <header>
        <h2 class="text-lg font-medium text-gray-900 dark:text-gray-100">
            {{ __('Informations du Profil') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600 dark:text-gray-400">
            {{ __("Mettez à jour les informations de profil et l'adresse e-mail de votre compte.") }}
        </p>
    </header>

    <form id="send-verification" method="post" action="{{ route('verification.send') }}">
        @csrf
    </form>

    <form method="post" action="{{ route('profile.update') }}" class="mt-6 space-y-6">
        @csrf
        @method('patch')

        {{-- First Name --}}
        <div>
            <x-input-label for="first_name" :value="__('Prénom')" />
            <x-text-input id="first_name" name="first_name" type="text" class="mt-1 block w-full" :value="old('first_name', $user->first_name)" required autofocus autocomplete="given-name" />
            <x-input-error class="mt-2" :messages="$errors->get('first_name')" />
        </div>

        {{-- Last Name --}}
        <div>
            <x-input-label for="last_name" :value="__('Nom de famille')" />
            <x-text-input id="last_name" name="last_name" type="text" class="mt-1 block w-full" :value="old('last_name', $user->last_name)" required autocomplete="family-name" />
            <x-input-error class="mt-2" :messages="$errors->get('last_name')" />
        </div>

        {{-- Email Address --}}
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" name="email" type="email" class="mt-1 block w-full" :value="old('email', $user->email)" required autocomplete="username" /> {{-- Breeze utilise 'username' pour l'autocomplete de l'email dans ce contexte --}}
            <x-input-error class="mt-2" :messages="$errors->get('email')" />

            @if ($user instanceof \Illuminate\Contracts\Auth\MustVerifyEmail && ! $user->hasVerifiedEmail())
                <div>
                    <p class="text-sm mt-2 text-gray-800 dark:text-gray-200">
                        {{ __('Votre adresse e-mail n\'est pas vérifiée.') }}

                        <button form="send-verification" class="underline text-sm text-gray-600 dark:text-gray-400 hover:text-gray-900 dark:hover:text-gray-100 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 dark:focus:ring-offset-gray-800">
                            {{ __('Cliquez ici pour renvoyer l\'e-mail de vérification.') }}
                        </button>
                    </p>

                    @if (session('status') === 'verification-link-sent')
                        <p class="mt-2 font-medium text-sm text-green-600 dark:text-green-400">
                            {{ __('Un nouveau lien de vérification a été envoyé à votre adresse e-mail.') }}
                        </p>
                    @endif
                </div>
            @endif
        </div>

        {{-- Phone Number --}}
        <div>
            <x-input-label for="phone" :value="__('Téléphone (optionnel)')" />
            <x-text-input id="phone" name="phone" type="text" class="mt-1 block w-full" :value="old('phone', $user->phone)" autocomplete="tel" />
            <x-input-error class="mt-2" :messages="$errors->get('phone')" />
        </div>

        <div class="flex items-center gap-4">
            <x-primary-button>{{ __('Enregistrer') }}</x-primary-button>

            @if (session('status') === 'profile-updated')
                <p
                    x-data="{ show: true }"
                    x-show="show"
                    x-transition
                    x-init="setTimeout(() => show = false, 2000)"
                    class="text-sm text-gray-600 dark:text-gray-400"
                >{{ __('Enregistré.') }}</p>
            @endif
        </div>
    </form>
</section>

--- END OF FILE: ./resources/views/profile/partials/update-profile-information-form.blade.php ---


#############################################
./resources/views/profile/partials/delete-user-form.blade.php
#############################################
<section class="space-y-6">
    <header>
        <h2 class="text-lg font-medium text-gray-900">
            {{ __('Delete Account') }}
        </h2>

        <p class="mt-1 text-sm text-gray-600">
            {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Before deleting your account, please download any data or information that you wish to retain.') }}
        </p>
    </header>

    <x-danger-button
        x-data=""
        x-on:click.prevent="$dispatch('open-modal', 'confirm-user-deletion')"
    >{{ __('Delete Account') }}</x-danger-button>

    <x-modal name="confirm-user-deletion" :show="$errors->userDeletion->isNotEmpty()" focusable>
        <form method="post" action="{{ route('profile.destroy') }}" class="p-6">
            @csrf
            @method('delete')

            <h2 class="text-lg font-medium text-gray-900">
                {{ __('Are you sure you want to delete your account?') }}
            </h2>

            <p class="mt-1 text-sm text-gray-600">
                {{ __('Once your account is deleted, all of its resources and data will be permanently deleted. Please enter your password to confirm you would like to permanently delete your account.') }}
            </p>

            <div class="mt-6">
                <x-input-label for="password" value="{{ __('Password') }}" class="sr-only" />

                <x-text-input
                    id="password"
                    name="password"
                    type="password"
                    class="mt-1 block w-3/4"
                    placeholder="{{ __('Password') }}"
                />

                <x-input-error :messages="$errors->userDeletion->get('password')" class="mt-2" />
            </div>

            <div class="mt-6 flex justify-end">
                <x-secondary-button x-on:click="$dispatch('close')">
                    {{ __('Cancel') }}
                </x-secondary-button>

                <x-danger-button class="ms-3">
                    {{ __('Delete Account') }}
                </x-danger-button>
            </div>
        </form>
    </x-modal>
</section>

--- END OF FILE: ./resources/views/profile/partials/delete-user-form.blade.php ---


#############################################
./resources/views/components/input-label.blade.php
#############################################
@props(['value'])

<label {{ $attributes->merge(['class' => 'block font-medium text-sm text-gray-700']) }}>
    {{ $value ?? $slot }}
</label>

--- END OF FILE: ./resources/views/components/input-label.blade.php ---


#############################################
./resources/views/components/primary-button.blade.php
#############################################
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700 focus:bg-gray-700 active:bg-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

--- END OF FILE: ./resources/views/components/primary-button.blade.php ---


#############################################
./resources/views/components/dropdown-link.blade.php
#############################################
<a {{ $attributes->merge(['class' => 'block w-full px-4 py-2 text-start text-sm leading-5 text-gray-700 hover:bg-gray-100 focus:outline-none focus:bg-gray-100 transition duration-150 ease-in-out']) }}>{{ $slot }}</a>

--- END OF FILE: ./resources/views/components/dropdown-link.blade.php ---


#############################################
./resources/views/components/responsive-nav-link.blade.php
#############################################
@props(['active'])

@php
$classes = ($active ?? false)
            ? 'block w-full ps-3 pe-4 py-2 border-l-4 border-indigo-400 text-start text-base font-medium text-indigo-700 bg-indigo-50 focus:outline-none focus:text-indigo-800 focus:bg-indigo-100 focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'block w-full ps-3 pe-4 py-2 border-l-4 border-transparent text-start text-base font-medium text-gray-600 hover:text-gray-800 hover:bg-gray-50 hover:border-gray-300 focus:outline-none focus:text-gray-800 focus:bg-gray-50 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>

--- END OF FILE: ./resources/views/components/responsive-nav-link.blade.php ---


#############################################
./resources/views/components/nav-link.blade.php
#############################################
@props(['active'])

@php
$classes = ($active ?? false)
            ? 'inline-flex items-center px-1 pt-1 border-b-2 border-indigo-400 text-sm font-medium leading-5 text-gray-900 focus:outline-none focus:border-indigo-700 transition duration-150 ease-in-out'
            : 'inline-flex items-center px-1 pt-1 border-b-2 border-transparent text-sm font-medium leading-5 text-gray-500 hover:text-gray-700 hover:border-gray-300 focus:outline-none focus:text-gray-700 focus:border-gray-300 transition duration-150 ease-in-out';
@endphp

<a {{ $attributes->merge(['class' => $classes]) }}>
    {{ $slot }}
</a>

--- END OF FILE: ./resources/views/components/nav-link.blade.php ---


#############################################
./resources/views/components/secondary-button.blade.php
#############################################
<button {{ $attributes->merge(['type' => 'button', 'class' => 'inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 disabled:opacity-25 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

--- END OF FILE: ./resources/views/components/secondary-button.blade.php ---


#############################################
./resources/views/components/text-input.blade.php
#############################################
@props(['disabled' => false])

<input {{ $disabled ? 'disabled' : '' }} {!! $attributes->merge(['class' => 'border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 rounded-md shadow-sm']) !!}>

--- END OF FILE: ./resources/views/components/text-input.blade.php ---


#############################################
./resources/views/components/dropdown.blade.php
#############################################
@props(['align' => 'right', 'width' => '48', 'contentClasses' => 'py-1 bg-white'])

@php
switch ($align) {
    case 'left':
        $alignmentClasses = 'ltr:origin-top-left rtl:origin-top-right start-0';
        break;
    case 'top':
        $alignmentClasses = 'origin-top';
        break;
    case 'right':
    default:
        $alignmentClasses = 'ltr:origin-top-right rtl:origin-top-left end-0';
        break;
}

switch ($width) {
    case '48':
        $width = 'w-48';
        break;
}
@endphp

<div class="relative" x-data="{ open: false }" @click.outside="open = false" @close.stop="open = false">
    <div @click="open = ! open">
        {{ $trigger }}
    </div>

    <div x-show="open"
            x-transition:enter="transition ease-out duration-200"
            x-transition:enter-start="opacity-0 scale-95"
            x-transition:enter-end="opacity-100 scale-100"
            x-transition:leave="transition ease-in duration-75"
            x-transition:leave-start="opacity-100 scale-100"
            x-transition:leave-end="opacity-0 scale-95"
            class="absolute z-50 mt-2 {{ $width }} rounded-md shadow-lg {{ $alignmentClasses }}"
            style="display: none;"
            @click="open = false">
        <div class="rounded-md ring-1 ring-black ring-opacity-5 {{ $contentClasses }}">
            {{ $content }}
        </div>
    </div>
</div>

--- END OF FILE: ./resources/views/components/dropdown.blade.php ---


#############################################
./resources/views/components/handover-status-switcher.blade.php
#############################################
{{-- /resources/views/components/handover-status-switcher.blade.php --}}
@props([
    'item',                                 // Le nom de l'item à vérifier (ex: "Carte Grise")
    'category',                             // La catégorie de l'item (ex: "Papiers du véhicule")
    'statuses' => ['Bon', 'Moyen', 'Mauvais', 'N/A'], // Les options de statut possibles
    'selected' => null                      // Le statut actuellement sélectionné (pour l'édition)
])

@php
    // CLÉ DE LA CORRECTION :
    // On détermine l'état initial. Priorité à la prop 'selected' (valeur de la BDD),
    // sinon à l'ancien input en cas d'erreur de validation, sinon 'N/A' par défaut.
    $initialStatus = $selected ?? old('checklist.' . $category . '.' . Str::slug($item, '_'), 'N/A');

    // On transforme les noms d'item et de catégorie en slugs pour les attributs HTML
    $itemSlug = Str::slug($item, '_');
@endphp

{{-- 
    La valeur calculée en PHP est injectée dans x-data pour initialiser l'état d'Alpine.js.
    C'est le pont entre le backend (Laravel) et le frontend (JavaScript).
--}}
<div x-data="{ status: '{{ $initialStatus }}' }" class="flex items-center justify-between py-2">
    <label class="text-sm text-gray-800 font-medium" for="status-switcher-{{ $category }}-{{ $itemSlug }}">{{ $item }}</label>

    <div class="flex items-center space-x-1 p-0.5 bg-gray-200 rounded-full" id="status-switcher-{{ $category }}-{{ $itemSlug }}">
        
        {{-- Input caché qui enverra la valeur au serveur. Son nom est dynamique. --}}
        <input type="hidden" name="checklist[{{ $category }}][{{ $itemSlug }}]" x-model="status">

        {{-- Boucle sur les statuts pour générer les boutons --}}
        @foreach($statuses as $buttonStatus)
            <button 
                type="button" 
                @click="status = '{{ $buttonStatus }}'"
                :class="{
                    'bg-green-500 text-white shadow-md': status === '{{ $buttonStatus }}' && ('{{ $buttonStatus }}' === 'Bon' || '{{ $buttonStatus }}' === 'Oui'),
                    'bg-red-500 text-white shadow-md': status === '{{ $buttonStatus }}' && ('{{ $buttonStatus }}' === 'Mauvais' || '{{ $buttonStatus }}' === 'Non'),
                    'bg-yellow-500 text-white shadow-md': status === '{{ $buttonStatus }}' && '{{ $buttonStatus }}' === 'Moyen',
                    'bg-gray-400 text-white shadow-md': status === '{{ $buttonStatus }}' && '{{ $buttonStatus }}' === 'N/A',
                    'bg-transparent text-gray-500 hover:bg-gray-300': status !== '{{ $buttonStatus }}'
                }"
                class="px-3 py-1 text-xs font-bold rounded-full transition-all duration-200 ease-in-out"
                aria-label="Définir le statut de {{ $item }} à {{ $buttonStatus }}"
            >
                {{ $buttonStatus }}
            </button>
        @endforeach
    </div>
</div>
--- END OF FILE: ./resources/views/components/handover-status-switcher.blade.php ---


#############################################
./resources/views/components/application-logo.blade.php
#############################################
<svg viewBox="0 0 316 316" xmlns="http://www.w3.org/2000/svg" {{ $attributes }}>
    <path d="M305.8 81.125C305.77 80.995 305.69 80.885 305.65 80.755C305.56 80.525 305.49 80.285 305.37 80.075C305.29 79.935 305.17 79.815 305.07 79.685C304.94 79.515 304.83 79.325 304.68 79.175C304.55 79.045 304.39 78.955 304.25 78.845C304.09 78.715 303.95 78.575 303.77 78.475L251.32 48.275C249.97 47.495 248.31 47.495 246.96 48.275L194.51 78.475C194.33 78.575 194.19 78.725 194.03 78.845C193.89 78.955 193.73 79.045 193.6 79.175C193.45 79.325 193.34 79.515 193.21 79.685C193.11 79.815 192.99 79.935 192.91 80.075C192.79 80.285 192.71 80.525 192.63 80.755C192.58 80.875 192.51 80.995 192.48 81.125C192.38 81.495 192.33 81.875 192.33 82.265V139.625L148.62 164.795V52.575C148.62 52.185 148.57 51.805 148.47 51.435C148.44 51.305 148.36 51.195 148.32 51.065C148.23 50.835 148.16 50.595 148.04 50.385C147.96 50.245 147.84 50.125 147.74 49.995C147.61 49.825 147.5 49.635 147.35 49.485C147.22 49.355 147.06 49.265 146.92 49.155C146.76 49.025 146.62 48.885 146.44 48.785L93.99 18.585C92.64 17.805 90.98 17.805 89.63 18.585L37.18 48.785C37 48.885 36.86 49.035 36.7 49.155C36.56 49.265 36.4 49.355 36.27 49.485C36.12 49.635 36.01 49.825 35.88 49.995C35.78 50.125 35.66 50.245 35.58 50.385C35.46 50.595 35.38 50.835 35.3 51.065C35.25 51.185 35.18 51.305 35.15 51.435C35.05 51.805 35 52.185 35 52.575V232.235C35 233.795 35.84 235.245 37.19 236.025L142.1 296.425C142.33 296.555 142.58 296.635 142.82 296.725C142.93 296.765 143.04 296.835 143.16 296.865C143.53 296.965 143.9 297.015 144.28 297.015C144.66 297.015 145.03 296.965 145.4 296.865C145.5 296.835 145.59 296.775 145.69 296.745C145.95 296.655 146.21 296.565 146.45 296.435L251.36 236.035C252.72 235.255 253.55 233.815 253.55 232.245V174.885L303.81 145.945C305.17 145.165 306 143.725 306 142.155V82.265C305.95 81.875 305.89 81.495 305.8 81.125ZM144.2 227.205L100.57 202.515L146.39 176.135L196.66 147.195L240.33 172.335L208.29 190.625L144.2 227.205ZM244.75 114.995V164.795L226.39 154.225L201.03 139.625V89.825L219.39 100.395L244.75 114.995ZM249.12 57.105L292.81 82.265L249.12 107.425L205.43 82.265L249.12 57.105ZM114.49 184.425L96.13 194.995V85.305L121.49 70.705L139.85 60.135V169.815L114.49 184.425ZM91.76 27.425L135.45 52.585L91.76 77.745L48.07 52.585L91.76 27.425ZM43.67 60.135L62.03 70.705L87.39 85.305V202.545V202.555V202.565C87.39 202.735 87.44 202.895 87.46 203.055C87.49 203.265 87.49 203.485 87.55 203.695V203.705C87.6 203.875 87.69 204.035 87.76 204.195C87.84 204.375 87.89 204.575 87.99 204.745C87.99 204.745 87.99 204.755 88 204.755C88.09 204.905 88.22 205.035 88.33 205.175C88.45 205.335 88.55 205.495 88.69 205.635L88.7 205.645C88.82 205.765 88.98 205.855 89.12 205.965C89.28 206.085 89.42 206.225 89.59 206.325C89.6 206.325 89.6 206.325 89.61 206.335C89.62 206.335 89.62 206.345 89.63 206.345L139.87 234.775V285.065L43.67 229.705V60.135ZM244.75 229.705L148.58 285.075V234.775L219.8 194.115L244.75 179.875V229.705ZM297.2 139.625L253.49 164.795V114.995L278.85 100.395L297.21 89.825V139.625H297.2Z"/>
</svg>

--- END OF FILE: ./resources/views/components/application-logo.blade.php ---


#############################################
./resources/views/components/input-error.blade.php
#############################################
@props(['messages'])

@if ($messages)
    <ul {{ $attributes->merge(['class' => 'text-sm text-red-600 space-y-1']) }}>
        @foreach ((array) $messages as $message)
            <li>{{ $message }}</li>
        @endforeach
    </ul>
@endif

--- END OF FILE: ./resources/views/components/input-error.blade.php ---


#############################################
./resources/views/components/auth-session-status.blade.php
#############################################
@props(['status'])

@if ($status)
    <div {{ $attributes->merge(['class' => 'font-medium text-sm text-green-600']) }}>
        {{ $status }}
    </div>
@endif

--- END OF FILE: ./resources/views/components/auth-session-status.blade.php ---


#############################################
./resources/views/components/modal.blade.php
#############################################
@props([
    'name',
    'show' => false,
    'maxWidth' => '2xl'
])

@php
$maxWidth = [
    'sm' => 'sm:max-w-sm',
    'md' => 'sm:max-w-md',
    'lg' => 'sm:max-w-lg',
    'xl' => 'sm:max-w-xl',
    '2xl' => 'sm:max-w-2xl',
][$maxWidth];
@endphp

<div
    x-data="{
        show: @js($show),
        focusables() {
            // All focusable element types...
            let selector = 'a, button, input:not([type=\'hidden\']), textarea, select, details, [tabindex]:not([tabindex=\'-1\'])'
            return [...$el.querySelectorAll(selector)]
                // All non-disabled elements...
                .filter(el => ! el.hasAttribute('disabled'))
        },
        firstFocusable() { return this.focusables()[0] },
        lastFocusable() { return this.focusables().slice(-1)[0] },
        nextFocusable() { return this.focusables()[this.nextFocusableIndex()] || this.firstFocusable() },
        prevFocusable() { return this.focusables()[this.prevFocusableIndex()] || this.lastFocusable() },
        nextFocusableIndex() { return (this.focusables().indexOf(document.activeElement) + 1) % (this.focusables().length + 1) },
        prevFocusableIndex() { return Math.max(0, this.focusables().indexOf(document.activeElement)) -1 },
    }"
    x-init="$watch('show', value => {
        if (value) {
            document.body.classList.add('overflow-y-hidden');
            {{ $attributes->has('focusable') ? 'setTimeout(() => firstFocusable().focus(), 100)' : '' }}
        } else {
            document.body.classList.remove('overflow-y-hidden');
        }
    })"
    x-on:open-modal.window="$event.detail == '{{ $name }}' ? show = true : null"
    x-on:close-modal.window="$event.detail == '{{ $name }}' ? show = false : null"
    x-on:close.stop="show = false"
    x-on:keydown.escape.window="show = false"
    x-on:keydown.tab.prevent="$event.shiftKey || nextFocusable().focus()"
    x-on:keydown.shift.tab.prevent="prevFocusable().focus()"
    x-show="show"
    class="fixed inset-0 overflow-y-auto px-4 py-6 sm:px-0 z-50"
    style="display: {{ $show ? 'block' : 'none' }};"
>
    <div
        x-show="show"
        class="fixed inset-0 transform transition-all"
        x-on:click="show = false"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0"
        x-transition:enter-end="opacity-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100"
        x-transition:leave-end="opacity-0"
    >
        <div class="absolute inset-0 bg-gray-500 opacity-75"></div>
    </div>

    <div
        x-show="show"
        class="mb-6 bg-white rounded-lg overflow-hidden shadow-xl transform transition-all sm:w-full {{ $maxWidth }} sm:mx-auto"
        x-transition:enter="ease-out duration-300"
        x-transition:enter-start="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
        x-transition:enter-end="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave="ease-in duration-200"
        x-transition:leave-start="opacity-100 translate-y-0 sm:scale-100"
        x-transition:leave-end="opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95"
    >
        {{ $slot }}
    </div>
</div>

--- END OF FILE: ./resources/views/components/modal.blade.php ---


#############################################
./resources/views/components/danger-button.blade.php
#############################################
<button {{ $attributes->merge(['type' => 'submit', 'class' => 'inline-flex items-center px-4 py-2 bg-red-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-red-500 active:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition ease-in-out duration-150']) }}>
    {{ $slot }}
</button>

--- END OF FILE: ./resources/views/components/danger-button.blade.php ---


#############################################
./resources/views/welcome.blade.php
#############################################
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <title>Laravel</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,600&display=swap" rel="stylesheet" />

        <!-- Styles -->
        <style>
            /* ! tailwindcss v3.2.4 | MIT License | https://tailwindcss.com */*,::after,::before{box-sizing:border-box;border-width:0;border-style:solid;border-color:#e5e7eb}::after,::before{--tw-content:''}html{line-height:1.5;-webkit-text-size-adjust:100%;-moz-tab-size:4;tab-size:4;font-family:Figtree, sans-serif;font-feature-settings:normal}body{margin:0;line-height:inherit}hr{height:0;color:inherit;border-top-width:1px}abbr:where([title]){-webkit-text-decoration:underline dotted;text-decoration:underline dotted}h1,h2,h3,h4,h5,h6{font-size:inherit;font-weight:inherit}a{color:inherit;text-decoration:inherit}b,strong{font-weight:bolder}code,kbd,pre,samp{font-family:ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace;font-size:1em}small{font-size:80%}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline}sub{bottom:-.25em}sup{top:-.5em}table{text-indent:0;border-color:inherit;border-collapse:collapse}button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;font-weight:inherit;line-height:inherit;color:inherit;margin:0;padding:0}button,select{text-transform:none}[type=button],[type=reset],[type=submit],button{-webkit-appearance:button;background-color:transparent;background-image:none}:-moz-focusring{outline:auto}:-moz-ui-invalid{box-shadow:none}progress{vertical-align:baseline}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}summary{display:list-item}blockquote,dd,dl,figure,h1,h2,h3,h4,h5,h6,hr,p,pre{margin:0}fieldset{margin:0;padding:0}legend{padding:0}menu,ol,ul{list-style:none;margin:0;padding:0}textarea{resize:vertical}input::placeholder,textarea::placeholder{opacity:1;color:#9ca3af}[role=button],button{cursor:pointer}:disabled{cursor:default}audio,canvas,embed,iframe,img,object,svg,video{display:block;vertical-align:middle}img,video{max-width:100%;height:auto}[hidden]{display:none}*, ::before, ::after{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::-webkit-backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }::backdrop{--tw-border-spacing-x:0;--tw-border-spacing-y:0;--tw-translate-x:0;--tw-translate-y:0;--tw-rotate:0;--tw-skew-x:0;--tw-skew-y:0;--tw-scale-x:1;--tw-scale-y:1;--tw-pan-x: ;--tw-pan-y: ;--tw-pinch-zoom: ;--tw-scroll-snap-strictness:proximity;--tw-ordinal: ;--tw-slashed-zero: ;--tw-numeric-figure: ;--tw-numeric-spacing: ;--tw-numeric-fraction: ;--tw-ring-inset: ;--tw-ring-offset-width:0px;--tw-ring-offset-color:#fff;--tw-ring-color:rgb(59 130 246 / 0.5);--tw-ring-offset-shadow:0 0 #0000;--tw-ring-shadow:0 0 #0000;--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;--tw-blur: ;--tw-brightness: ;--tw-contrast: ;--tw-grayscale: ;--tw-hue-rotate: ;--tw-invert: ;--tw-saturate: ;--tw-sepia: ;--tw-drop-shadow: ;--tw-backdrop-blur: ;--tw-backdrop-brightness: ;--tw-backdrop-contrast: ;--tw-backdrop-grayscale: ;--tw-backdrop-hue-rotate: ;--tw-backdrop-invert: ;--tw-backdrop-opacity: ;--tw-backdrop-saturate: ;--tw-backdrop-sepia: }.relative{position:relative}.mx-auto{margin-left:auto;margin-right:auto}.mx-6{margin-left:1.5rem;margin-right:1.5rem}.ml-4{margin-left:1rem}.mt-16{margin-top:4rem}.mt-6{margin-top:1.5rem}.mt-4{margin-top:1rem}.-mt-px{margin-top:-1px}.mr-1{margin-right:0.25rem}.flex{display:flex}.inline-flex{display:inline-flex}.grid{display:grid}.h-16{height:4rem}.h-7{height:1.75rem}.h-6{height:1.5rem}.h-5{height:1.25rem}.min-h-screen{min-height:100vh}.w-auto{width:auto}.w-16{width:4rem}.w-7{width:1.75rem}.w-6{width:1.5rem}.w-5{width:1.25rem}.max-w-7xl{max-width:80rem}.shrink-0{flex-shrink:0}.scale-100{--tw-scale-x:1;--tw-scale-y:1;transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}.grid-cols-1{grid-template-columns:repeat(1, minmax(0, 1fr))}.items-center{align-items:center}.justify-center{justify-content:center}.gap-6{gap:1.5rem}.gap-4{gap:1rem}.self-center{align-self:center}.rounded-lg{border-radius:0.5rem}.rounded-full{border-radius:9999px}.bg-gray-100{--tw-bg-opacity:1;background-color:rgb(243 244 246 / var(--tw-bg-opacity))}.bg-white{--tw-bg-opacity:1;background-color:rgb(255 255 255 / var(--tw-bg-opacity))}.bg-red-50{--tw-bg-opacity:1;background-color:rgb(254 242 242 / var(--tw-bg-opacity))}.bg-dots-darker{background-image:url("data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1.22676 0C1.91374 0 2.45351 0.539773 2.45351 1.22676C2.45351 1.91374 1.91374 2.45351 1.22676 2.45351C0.539773 2.45351 0 1.91374 0 1.22676C0 0.539773 0.539773 0 1.22676 0Z' fill='rgba(0,0,0,0.07)'/%3E%3C/svg%3E")}.from-gray-700\/50{--tw-gradient-from:rgb(55 65 81 / 0.5);--tw-gradient-to:rgb(55 65 81 / 0);--tw-gradient-stops:var(--tw-gradient-from), var(--tw-gradient-to)}.via-transparent{--tw-gradient-to:rgb(0 0 0 / 0);--tw-gradient-stops:var(--tw-gradient-from), transparent, var(--tw-gradient-to)}.bg-center{background-position:center}.stroke-red-500{stroke:#ef4444}.stroke-gray-400{stroke:#9ca3af}.p-6{padding:1.5rem}.px-6{padding-left:1.5rem;padding-right:1.5rem}.text-center{text-align:center}.text-right{text-align:right}.text-xl{font-size:1.25rem;line-height:1.75rem}.text-sm{font-size:0.875rem;line-height:1.25rem}.font-semibold{font-weight:600}.leading-relaxed{line-height:1.625}.text-gray-600{--tw-text-opacity:1;color:rgb(75 85 99 / var(--tw-text-opacity))}.text-gray-900{--tw-text-opacity:1;color:rgb(17 24 39 / var(--tw-text-opacity))}.text-gray-500{--tw-text-opacity:1;color:rgb(107 114 128 / var(--tw-text-opacity))}.underline{-webkit-text-decoration-line:underline;text-decoration-line:underline}.antialiased{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.shadow-2xl{--tw-shadow:0 25px 50px -12px rgb(0 0 0 / 0.25);--tw-shadow-colored:0 25px 50px -12px var(--tw-shadow-color);box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.shadow-gray-500\/20{--tw-shadow-color:rgb(107 114 128 / 0.2);--tw-shadow:var(--tw-shadow-colored)}.transition-all{transition-property:all;transition-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transition-duration:150ms}.selection\:bg-red-500 *::selection{--tw-bg-opacity:1;background-color:rgb(239 68 68 / var(--tw-bg-opacity))}.selection\:text-white *::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.selection\:bg-red-500::selection{--tw-bg-opacity:1;background-color:rgb(239 68 68 / var(--tw-bg-opacity))}.selection\:text-white::selection{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.hover\:text-gray-900:hover{--tw-text-opacity:1;color:rgb(17 24 39 / var(--tw-text-opacity))}.hover\:text-gray-700:hover{--tw-text-opacity:1;color:rgb(55 65 81 / var(--tw-text-opacity))}.focus\:rounded-sm:focus{border-radius:0.125rem}.focus\:outline:focus{outline-style:solid}.focus\:outline-2:focus{outline-width:2px}.focus\:outline-red-500:focus{outline-color:#ef4444}.group:hover .group-hover\:stroke-gray-600{stroke:#4b5563}.z-10{z-index: 10}@media (prefers-reduced-motion: no-preference){.motion-safe\:hover\:scale-\[1\.01\]:hover{--tw-scale-x:1.01;--tw-scale-y:1.01;transform:translate(var(--tw-translate-x), var(--tw-translate-y)) rotate(var(--tw-rotate)) skewX(var(--tw-skew-x)) skewY(var(--tw-skew-y)) scaleX(var(--tw-scale-x)) scaleY(var(--tw-scale-y))}}@media (prefers-color-scheme: dark){.dark\:bg-gray-900{--tw-bg-opacity:1;background-color:rgb(17 24 39 / var(--tw-bg-opacity))}.dark\:bg-gray-800\/50{background-color:rgb(31 41 55 / 0.5)}.dark\:bg-red-800\/20{background-color:rgb(153 27 27 / 0.2)}.dark\:bg-dots-lighter{background-image:url("data:image/svg+xml,%3Csvg width='30' height='30' viewBox='0 0 30 30' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M1.22676 0C1.91374 0 2.45351 0.539773 2.45351 1.22676C2.45351 1.91374 1.91374 2.45351 1.22676 2.45351C0.539773 2.45351 0 1.91374 0 1.22676C0 0.539773 0.539773 0 1.22676 0Z' fill='rgba(255,255,255,0.07)'/%3E%3C/svg%3E")}.dark\:bg-gradient-to-bl{background-image:linear-gradient(to bottom left, var(--tw-gradient-stops))}.dark\:stroke-gray-600{stroke:#4b5563}.dark\:text-gray-400{--tw-text-opacity:1;color:rgb(156 163 175 / var(--tw-text-opacity))}.dark\:text-white{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.dark\:shadow-none{--tw-shadow:0 0 #0000;--tw-shadow-colored:0 0 #0000;box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)}.dark\:ring-1{--tw-ring-offset-shadow:var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);--tw-ring-shadow:var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);box-shadow:var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000)}.dark\:ring-inset{--tw-ring-inset:inset}.dark\:ring-white\/5{--tw-ring-color:rgb(255 255 255 / 0.05)}.dark\:hover\:text-white:hover{--tw-text-opacity:1;color:rgb(255 255 255 / var(--tw-text-opacity))}.group:hover .dark\:group-hover\:stroke-gray-400{stroke:#9ca3af}}@media (min-width: 640px){.sm\:fixed{position:fixed}.sm\:top-0{top:0px}.sm\:right-0{right:0px}.sm\:ml-0{margin-left:0px}.sm\:flex{display:flex}.sm\:items-center{align-items:center}.sm\:justify-center{justify-content:center}.sm\:justify-between{justify-content:space-between}.sm\:text-left{text-align:left}.sm\:text-right{text-align:right}}@media (min-width: 768px){.md\:grid-cols-2{grid-template-columns:repeat(2, minmax(0, 1fr))}}@media (min-width: 1024px){.lg\:gap-8{gap:2rem}.lg\:p-8{padding:2rem}}
        </style>
    </head>
    <body class="antialiased">
        <div class="relative sm:flex sm:justify-center sm:items-center min-h-screen bg-dots-darker bg-center bg-gray-100 dark:bg-dots-lighter dark:bg-gray-900 selection:bg-red-500 selection:text-white">
            @if (Route::has('login'))
                <div class="sm:fixed sm:top-0 sm:right-0 p-6 text-right z-10">
                    @auth
                        <a href="{{ url('/dashboard') }}" class="font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Dashboard</a>
                    @else
                        <a href="{{ route('login') }}" class="font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Log in</a>

                        @if (Route::has('register'))
                            <a href="{{ route('register') }}" class="ml-4 font-semibold text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Register</a>
                        @endif
                    @endauth
                </div>
            @endif

            <div class="max-w-7xl mx-auto p-6 lg:p-8">
                <div class="flex justify-center">
                    <svg viewBox="0 0 62 65" fill="none" xmlns="http://www.w3.org/2000/svg" class="h-16 w-auto bg-gray-100 dark:bg-gray-900">
                        <path d="M61.8548 14.6253C61.8778 14.7102 61.8895 14.7978 61.8897 14.8858V28.5615C61.8898 28.737 61.8434 28.9095 61.7554 29.0614C61.6675 29.2132 61.5409 29.3392 61.3887 29.4265L49.9104 36.0351V49.1337C49.9104 49.4902 49.7209 49.8192 49.4118 49.9987L25.4519 63.7916C25.3971 63.8227 25.3372 63.8427 25.2774 63.8639C25.255 63.8714 25.2338 63.8851 25.2101 63.8913C25.0426 63.9354 24.8666 63.9354 24.6991 63.8913C24.6716 63.8838 24.6467 63.8689 24.6205 63.8589C24.5657 63.8389 24.5084 63.8215 24.456 63.7916L0.501061 49.9987C0.348882 49.9113 0.222437 49.7853 0.134469 49.6334C0.0465019 49.4816 0.000120578 49.3092 0 49.1337L0 8.10652C0 8.01678 0.0124642 7.92953 0.0348998 7.84477C0.0423783 7.8161 0.0598282 7.78993 0.0697995 7.76126C0.0884958 7.70891 0.105946 7.65531 0.133367 7.6067C0.152063 7.5743 0.179485 7.54812 0.20192 7.51821C0.230588 7.47832 0.256763 7.43719 0.290416 7.40229C0.319084 7.37362 0.356476 7.35243 0.388883 7.32751C0.425029 7.29759 0.457436 7.26518 0.498568 7.2415L12.4779 0.345059C12.6296 0.257786 12.8015 0.211853 12.9765 0.211853C13.1515 0.211853 13.3234 0.257786 13.475 0.345059L25.4531 7.2415H25.4556C25.4955 7.26643 25.5292 7.29759 25.5653 7.32626C25.5977 7.35119 25.6339 7.37362 25.6625 7.40104C25.6974 7.43719 25.7224 7.47832 25.7523 7.51821C25.7735 7.54812 25.8021 7.5743 25.8196 7.6067C25.8483 7.65656 25.8645 7.70891 25.8844 7.76126C25.8944 7.78993 25.9118 7.8161 25.9193 7.84602C25.9423 7.93096 25.954 8.01853 25.9542 8.10652V33.7317L35.9355 27.9844V14.8846C35.9355 14.7973 35.948 14.7088 35.9704 14.6253C35.9792 14.5954 35.9954 14.5692 36.0053 14.5405C36.0253 14.4882 36.0427 14.4346 36.0702 14.386C36.0888 14.3536 36.1163 14.3274 36.1375 14.2975C36.1674 14.2576 36.1923 14.2165 36.2272 14.1816C36.2559 14.1529 36.292 14.1317 36.3244 14.1068C36.3618 14.0769 36.3942 14.0445 36.4341 14.0208L48.4147 7.12434C48.5663 7.03694 48.7383 6.99094 48.9133 6.99094C49.0883 6.99094 49.2602 7.03694 49.4118 7.12434L61.3899 14.0208C61.4323 14.0457 61.4647 14.0769 61.5021 14.1055C61.5333 14.1305 61.5694 14.1529 61.5981 14.1803C61.633 14.2165 61.6579 14.2576 61.6878 14.2975C61.7103 14.3274 61.7377 14.3536 61.7551 14.386C61.7838 14.4346 61.8 14.4882 61.8199 14.5405C61.8312 14.5692 61.8474 14.5954 61.8548 14.6253ZM59.893 27.9844V16.6121L55.7013 19.0252L49.9104 22.3593V33.7317L59.8942 27.9844H59.893ZM47.9149 48.5566V37.1768L42.2187 40.4299L25.953 49.7133V61.2003L47.9149 48.5566ZM1.99677 9.83281V48.5566L23.9562 61.199V49.7145L12.4841 43.2219L12.4804 43.2194L12.4754 43.2169C12.4368 43.1945 12.4044 43.1621 12.3682 43.1347C12.3371 43.1097 12.3009 43.0898 12.2735 43.0624L12.271 43.0586C12.2386 43.0275 12.2162 42.9888 12.1887 42.9539C12.1638 42.9203 12.1339 42.8916 12.114 42.8567L12.1127 42.853C12.0903 42.8156 12.0766 42.7707 12.0604 42.7283C12.0442 42.6909 12.023 42.656 12.013 42.6161C12.0005 42.5688 11.998 42.5177 11.9931 42.4691C11.9881 42.4317 11.9781 42.3943 11.9781 42.3569V15.5801L6.18848 12.2446L1.99677 9.83281ZM12.9777 2.36177L2.99764 8.10652L12.9752 13.8513L22.9541 8.10527L12.9752 2.36177H12.9777ZM18.1678 38.2138L23.9574 34.8809V9.83281L19.7657 12.2459L13.9749 15.5801V40.6281L18.1678 38.2138ZM48.9133 9.14105L38.9344 14.8858L48.9133 20.6305L58.8909 14.8846L48.9133 9.14105ZM47.9149 22.3593L42.124 19.0252L37.9323 16.6121V27.9844L43.7219 31.3174L47.9149 33.7317V22.3593ZM24.9533 47.987L39.59 39.631L46.9065 35.4555L36.9352 29.7145L25.4544 36.3242L14.9907 42.3482L24.9533 47.987Z" fill="#FF2D20"/>
                    </svg>
                </div>

                <div class="mt-16">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8">
                        <a href="https://laravel.com/docs" class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Documentation</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laravel has wonderful documentation covering every aspect of the framework. Whether you are a newcomer or have prior experience with Laravel, we recommend reading our documentation from beginning to end.
                                </p>
                            </div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="self-center shrink-0 stroke-red-500 w-6 h-6 mx-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75" />
                            </svg>
                        </a>

                        <a href="https://laracasts.com" class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" d="M15.75 10.5l4.72-4.72a.75.75 0 011.28.53v11.38a.75.75 0 01-1.28.53l-4.72-4.72M4.5 18.75h9a2.25 2.25 0 002.25-2.25v-9a2.25 2.25 0 00-2.25-2.25h-9A2.25 2.25 0 002.25 7.5v9a2.25 2.25 0 002.25 2.25z" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Laracasts</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laracasts offers thousands of video tutorials on Laravel, PHP, and JavaScript development. Check them out, see for yourself, and massively level up your development skills in the process.
                                </p>
                            </div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="self-center shrink-0 stroke-red-500 w-6 h-6 mx-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75" />
                            </svg>
                        </a>

                        <a href="https://laravel-news.com" class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 7.5h1.5m-1.5 3h1.5m-7.5 3h7.5m-7.5 3h7.5m3-9h3.375c.621 0 1.125.504 1.125 1.125V18a2.25 2.25 0 01-2.25 2.25M16.5 7.5V18a2.25 2.25 0 002.25 2.25M16.5 7.5V4.875c0-.621-.504-1.125-1.125-1.125H4.125C3.504 3.75 3 4.254 3 4.875V18a2.25 2.25 0 002.25 2.25h13.5M6 7.5h3v3H6v-3z" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Laravel News</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laravel News is a community driven portal and newsletter aggregating all of the latest and most important news in the Laravel ecosystem, including new package releases and tutorials.
                                </p>
                            </div>

                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="self-center shrink-0 stroke-red-500 w-6 h-6 mx-6">
                                <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12h15m0 0l-6.75-6.75M19.5 12l-6.75 6.75" />
                            </svg>
                        </a>

                        <div class="scale-100 p-6 bg-white dark:bg-gray-800/50 dark:bg-gradient-to-bl from-gray-700/50 via-transparent dark:ring-1 dark:ring-inset dark:ring-white/5 rounded-lg shadow-2xl shadow-gray-500/20 dark:shadow-none flex motion-safe:hover:scale-[1.01] transition-all duration-250 focus:outline focus:outline-2 focus:outline-red-500">
                            <div>
                                <div class="h-16 w-16 bg-red-50 dark:bg-red-800/20 flex items-center justify-center rounded-full">
                                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" class="w-7 h-7 stroke-red-500">
                                        <path stroke-linecap="round" stroke-linejoin="round" d="M6.115 5.19l.319 1.913A6 6 0 008.11 10.36L9.75 12l-.387.775c-.217.433-.132.956.21 1.298l1.348 1.348c.21.21.329.497.329.795v1.089c0 .426.24.815.622 1.006l.153.076c.433.217.956.132 1.298-.21l.723-.723a8.7 8.7 0 002.288-4.042 1.087 1.087 0 00-.358-1.099l-1.33-1.108c-.251-.21-.582-.299-.905-.245l-1.17.195a1.125 1.125 0 01-.98-.314l-.295-.295a1.125 1.125 0 010-1.591l.13-.132a1.125 1.125 0 011.3-.21l.603.302a.809.809 0 001.086-1.086L14.25 7.5l1.256-.837a4.5 4.5 0 001.528-1.732l.146-.292M6.115 5.19A9 9 0 1017.18 4.64M6.115 5.19A8.965 8.965 0 0112 3c1.929 0 3.716.607 5.18 1.64" />
                                    </svg>
                                </div>

                                <h2 class="mt-6 text-xl font-semibold text-gray-900 dark:text-white">Vibrant Ecosystem</h2>

                                <p class="mt-4 text-gray-500 dark:text-gray-400 text-sm leading-relaxed">
                                    Laravel's robust library of first-party tools and libraries, such as <a href="https://forge.laravel.com" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Forge</a>, <a href="https://vapor.laravel.com" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Vapor</a>, <a href="https://nova.laravel.com" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Nova</a>, and <a href="https://envoyer.io" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Envoyer</a> help you take your projects to the next level. Pair them with powerful open source libraries like <a href="https://laravel.com/docs/billing" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Cashier</a>, <a href="https://laravel.com/docs/dusk" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Dusk</a>, <a href="https://laravel.com/docs/broadcasting" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Echo</a>, <a href="https://laravel.com/docs/horizon" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Horizon</a>, <a href="https://laravel.com/docs/sanctum" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Sanctum</a>, <a href="https://laravel.com/docs/telescope" class="underline hover:text-gray-700 dark:hover:text-white focus:outline focus:outline-2 focus:rounded-sm focus:outline-red-500">Telescope</a>, and more.
                                </p>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="flex justify-center mt-16 px-0 sm:items-center sm:justify-between">
                    <div class="text-center text-sm sm:text-left">
                        &nbsp;
                    </div>

                    <div class="text-center text-sm text-gray-500 dark:text-gray-400 sm:text-right sm:ml-0">
                        Laravel v{{ Illuminate\Foundation\Application::VERSION }} (PHP v{{ PHP_VERSION }})
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>

--- END OF FILE: ./resources/views/welcome.blade.php ---


#############################################
./resources/views/layouts/navigation.blade.php
#############################################
<nav class="bg-white border-r border-gray-200">
    <div class="flex flex-col h-full">
        <div class="flex items-center justify-center h-20 border-b border-gray-200 shrink-0">
            <a href="{{ route('dashboard') }}">
                <x-application-logo class="block h-10 w-auto fill-current text-gray-800" />
            </a>
        </div>

        <div class="mt-5 flex-grow">
            <div class="space-y-1">
                <x-responsive-nav-link :href="route('dashboard')" :active="request()->routeIs('dashboard')">
                    {{ __('Dashboard') }}
                </x-responsive-nav-link>

                {{-- Liens Opérationnels (visibles par Admin & Super Admin) --}}
                @can('view vehicles')
                    <x-responsive-nav-link :href="route('admin.vehicles.index')" :active="request()->routeIs('admin.vehicles.*')">
                        {{ __('Véhicules') }}
                    </x-responsive-nav-link>
                @endcan

                @can('view drivers')
                    <x-responsive-nav-link :href="route('admin.drivers.index')" :active="request()->routeIs('admin.drivers.*')">
                        {{ __('Chauffeurs') }}
                    </x-responsive-nav-link>
                @endcan

                @can('view assignments')
                    <x-responsive-nav-link :href="route('admin.assignments.index')" :active="request()->routeIs('admin.assignments.*')">
                        {{ __('Affectations') }}
                    </x-responsive-nav-link>
                @endcan

                @canany(['view maintenance', 'manage maintenance plans'])
                    @php($isMaintenanceActive = request()->routeIs('admin.maintenance.*'))
                    <div x-data="{ open: {{ $isMaintenanceActive ? 'true' : 'false' }} }" class="space-y-1">
                        <button @click="open = ! open" class="w-full flex justify-between items-center px-4 py-2 text-left text-sm font-medium text-gray-600 hover:bg-gray-50 hover:text-gray-900">
                            <span class="flex items-center">{{ __('Maintenance') }}</span>
                            <svg class="w-4 h-4 ml-auto transition-transform duration-200" :class="{'rotate-180': open}" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
                        </button>
                        <div x-show="open" x-transition class="pl-8 space-y-1">
                            <x-responsive-nav-link :href="route('admin.maintenance.dashboard')" :active="request()->routeIs('admin.maintenance.dashboard')">{{ __('Tableau de Bord') }}</x-responsive-nav-link>
                            <x-responsive-nav-link :href="route('admin.maintenance.plans.index')" :active="request()->routeIs('admin.maintenance.plans.*')">{{ __('Plans de Maintenance') }}</x-responsive-nav-link>
                        </div>
                    </div>
                @endcanany

                {{-- Section Administration (visible uniquement par le Super Admin) --}}
                @role('Super Admin')
                    <div class="pt-4 pb-2">
                        <h6 class="px-4 text-xs text-gray-500 uppercase font-semibold">Administration</h6>
                    </div>
                    <x-responsive-nav-link :href="route('admin.organizations.index')" :active="request()->routeIs('admin.organizations.*')">
                        {{ __('Organisations') }}
                    </x-responsive-nav-link>
                    <x-responsive-nav-link :href="route('admin.roles.index')" :active="request()->routeIs('admin.roles.*')">
                        {{ __('Rôles & Permissions') }}
                    </x-responsive-nav-link>
                @endrole

                {{-- CORRECTION : Le lien Utilisateurs est maintenant protégé par sa propre permission --}}
                @can('view users')
                     <x-responsive-nav-link :href="route('admin.users.index')" :active="request()->routeIs('admin.users.*')">
                        {{ __('Utilisateurs') }}
                    </x-responsive-nav-link>
                @endcan
            </div>
        </div>
    </div>
</nav>
--- END OF FILE: ./resources/views/layouts/navigation.blade.php ---


#############################################
./resources/views/layouts/app.blade.php
#############################################
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">

        <title>{{ config('app.name', 'Laravel') }}</title>

        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        @vite(['resources/css/app.css', 'resources/js/app.js'])
    </head>




    <body class="font-sans antialiased">
        <div x-data="{ sidebarOpen: false }" class="min-h-screen bg-gray-100">
            <div class="flex h-screen bg-gray-100">
                <aside class="hidden w-64 flex-shrink-0 bg-white border-r md:block">
                    @include('layouts.navigation')
                </aside>

                <div x-show="sidebarOpen" class="fixed inset-0 z-40 flex md:hidden" x-transition:enter="transition-opacity ease-linear duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="transition-opacity ease-linear duration-300" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" style="display: none;">
                    <div @click="sidebarOpen = false" class="fixed inset-0 bg-gray-600 bg-opacity-75"></div>
                    <div class="relative flex-1 flex flex-col max-w-xs w-full bg-white">
                        <div class="absolute top-0 right-0 -mr-12 pt-2">
                            <button @click="sidebarOpen = false" type="button" class="ml-1 flex items-center justify-center h-10 w-10 rounded-full focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white">
                                <span class="sr-only">Close sidebar</span>
                                <svg class="h-6 w-6 text-white" stroke="currentColor" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" /></svg>
                            </button>
                        </div>
                        @include('layouts.navigation')
                    </div>
                </div>

                <div class="flex-1 flex flex-col overflow-hidden">
                    <header class="relative z-10 flex-shrink-0 flex h-16 bg-white shadow">
                        <button @click.stop="sidebarOpen = true" type="button" class="px-4 border-r border-gray-200 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-violet-500 md:hidden">
                            <span class="sr-only">Open sidebar</span>
                            <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" /></svg>
                        </button>
                        <div class="flex-1 px-4 flex justify-between">
                            <div class="flex-1 flex">
                                </div>
                            <div class="ml-4 flex items-center md:ml-6">
                                <div class="hidden sm:flex sm:items-center sm:ms-6">
                                    <x-dropdown align="right" width="48">
                                        <x-slot name="trigger">
                                            <button class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md text-gray-500 bg-white hover:text-gray-700 focus:outline-none transition ease-in-out duration-150">
                                                <div>{{ Auth::user()->name }}</div>
                                                <div class="ms-1"><svg class="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" /></svg></div>
                                            </button>
                                        </x-slot>
                                        <x-slot name="content">
                                            <x-dropdown-link :href="route('profile.edit')">{{ __('Profile') }}</x-dropdown-link>
                                            <form method="POST" action="{{ route('logout') }}">
                                                @csrf
                                                <x-dropdown-link :href="route('logout')" onclick="event.preventDefault(); this.closest('form').submit();">{{ __('Log Out') }}</x-dropdown-link>
                                            </form>
                                        </x-slot>
                                    </x-dropdown>
                                </div>
                            </div>
                        </div>
                    </header>

                    @if (isset($header))
                        <div class="bg-white shadow-sm">
                            <div class="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
                                {{ $header }}
                            </div>
                        </div>
                    @endif

                    <main class="flex-1 relative overflow-y-auto focus:outline-none">
                        {{ $slot }}
                    </main>
                </div>
            </div>
        </div>
        
        @stack('scripts')

    </body>
</html>

--- END OF FILE: ./resources/views/layouts/app.blade.php ---


#############################################
./resources/views/layouts/guest.blade.php
#############################################
<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">

        <title>{{ config('app.name', 'Laravel') }}</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        <!-- Scripts -->
        @vite(['resources/css/app.css', 'resources/js/app.js'])
    </head>
    <body class="font-sans text-gray-900 antialiased">
        <div class="min-h-screen flex flex-col sm:justify-center items-center pt-6 sm:pt-0 bg-gray-100">
            <div>
                <a href="/">
                    <x-application-logo class="w-20 h-20 fill-current text-gray-500" />
                </a>
            </div>

            <div class="w-full sm:max-w-md mt-6 px-6 py-4 bg-white shadow-md overflow-hidden sm:rounded-lg">
                {{ $slot }}
            </div>
        </div>
    </body>
</html>

--- END OF FILE: ./resources/views/layouts/guest.blade.php ---


#############################################
./resources/views/auth/login.blade.php
#############################################
<x-guest-layout>
    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('login') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Remember Me -->
        <div class="block mt-4">
            <label for="remember_me" class="inline-flex items-center">
                <input id="remember_me" type="checkbox" class="rounded border-gray-300 text-indigo-600 shadow-sm focus:ring-indigo-500" name="remember">
                <span class="ms-2 text-sm text-gray-600">{{ __('Remember me') }}</span>
            </label>
        </div>

        <div class="flex items-center justify-end mt-4">
            @if (Route::has('password.request'))
                <a class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" href="{{ route('password.request') }}">
                    {{ __('Forgot your password?') }}
                </a>
            @endif

            <x-primary-button class="ms-3">
                {{ __('Log in') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

--- END OF FILE: ./resources/views/auth/login.blade.php ---


#############################################
./resources/views/auth/confirm-password.blade.php
#############################################
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('This is a secure area of the application. Please confirm your password before continuing.') }}
    </div>

    <form method="POST" action="{{ route('password.confirm') }}">
        @csrf

        <!-- Password -->
        <div>
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="current-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <div class="flex justify-end mt-4">
            <x-primary-button>
                {{ __('Confirm') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

--- END OF FILE: ./resources/views/auth/confirm-password.blade.php ---


#############################################
./resources/views/auth/forgot-password.blade.php
#############################################
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Forgot your password? No problem. Just let us know your email address and we will email you a password reset link that will allow you to choose a new one.') }}
    </div>

    <!-- Session Status -->
    <x-auth-session-status class="mb-4" :status="session('status')" />

    <form method="POST" action="{{ route('password.email') }}">
        @csrf

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autofocus />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Email Password Reset Link') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

--- END OF FILE: ./resources/views/auth/forgot-password.blade.php ---


#############################################
./resources/views/auth/verify-email.blade.php
#############################################
<x-guest-layout>
    <div class="mb-4 text-sm text-gray-600">
        {{ __('Thanks for signing up! Before getting started, could you verify your email address by clicking on the link we just emailed to you? If you didn\'t receive the email, we will gladly send you another.') }}
    </div>

    @if (session('status') == 'verification-link-sent')
        <div class="mb-4 font-medium text-sm text-green-600">
            {{ __('A new verification link has been sent to the email address you provided during registration.') }}
        </div>
    @endif

    <div class="mt-4 flex items-center justify-between">
        <form method="POST" action="{{ route('verification.send') }}">
            @csrf

            <div>
                <x-primary-button>
                    {{ __('Resend Verification Email') }}
                </x-primary-button>
            </div>
        </form>

        <form method="POST" action="{{ route('logout') }}">
            @csrf

            <button type="submit" class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                {{ __('Log Out') }}
            </button>
        </form>
    </div>
</x-guest-layout>

--- END OF FILE: ./resources/views/auth/verify-email.blade.php ---


#############################################
./resources/views/auth/reset-password.blade.php
#############################################
<x-guest-layout>
    <form method="POST" action="{{ route('password.store') }}">
        @csrf

        <!-- Password Reset Token -->
        <input type="hidden" name="token" value="{{ $request->route('token') }}">

        <!-- Email Address -->
        <div>
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email', $request->email)" required autofocus autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />
            <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required autocomplete="new-password" />
            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                                type="password"
                                name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <x-primary-button>
                {{ __('Reset Password') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

--- END OF FILE: ./resources/views/auth/reset-password.blade.php ---


#############################################
./resources/views/auth/register.blade.php
#############################################
<x-guest-layout>
    <form method="POST" action="{{ route('register') }}">
        @csrf

        <!-- First Name -->
        <div>
            <x-input-label for="first_name" :value="__('Prénom')" />
            <x-text-input id="first_name" class="block mt-1 w-full" type="text" name="first_name" :value="old('first_name')" required autofocus autocomplete="given-name" />
            <x-input-error :messages="$errors->get('first_name')" class="mt-2" />
        </div>
       <!-- Last Name -->

	<div class="mt-4">
            <x-input-label for="last_name" :value="__('Nom de famille')" />
            <x-text-input id="last_name" class="block mt-1 w-full" type="text" name="last_name" :value="old('last_name')" required autocomplete="family-name" />
            <x-input-error :messages="$errors->get('last_name')" class="mt-2" />
        </div>


        <!-- Email Address -->
        <div class="mt-4">
            <x-input-label for="email" :value="__('Email')" />
            <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required autocomplete="username" />
            <x-input-error :messages="$errors->get('email')" class="mt-2" />
        </div>

        <!-- Password -->
        <div class="mt-4">
            <x-input-label for="password" :value="__('Password')" />

            <x-text-input id="password" class="block mt-1 w-full"
                            type="password"
                            name="password"
                            required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password')" class="mt-2" />
        </div>

        <!-- Confirm Password -->
        <div class="mt-4">
            <x-input-label for="password_confirmation" :value="__('Confirm Password')" />

            <x-text-input id="password_confirmation" class="block mt-1 w-full"
                            type="password"
                            name="password_confirmation" required autocomplete="new-password" />

            <x-input-error :messages="$errors->get('password_confirmation')" class="mt-2" />
        </div>

        <div class="flex items-center justify-end mt-4">
            <a class="underline text-sm text-gray-600 hover:text-gray-900 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500" href="{{ route('login') }}">
                {{ __('Already registered?') }}
            </a>

            <x-primary-button class="ms-4">
                {{ __('Register') }}
            </x-primary-button>
        </div>
    </form>
</x-guest-layout>

--- END OF FILE: ./resources/views/auth/register.blade.php ---


#############################################
./resources/views/vendor/pagination/tailwind.blade.php
#############################################
@if ($paginator->hasPages())
    <nav role="navigation" aria-label="{{ __('Pagination Navigation') }}" class="flex items-center justify-between">
        <div class="flex justify-between flex-1 sm:hidden">
            @if ($paginator->onFirstPage())
                <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md">
                    {!! __('pagination.previous') !!}
                </span>
            @else
                <a href="{{ $paginator->previousPageUrl() }}" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500">
                    {!! __('pagination.previous') !!}
                </a>
            @endif

            @if ($paginator->hasMorePages())
                <a href="{{ $paginator->nextPageUrl() }}" class="relative inline-flex items-center px-4 py-2 ml-3 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500">
                    {!! __('pagination.next') !!}
                </a>
            @else
                <span class="relative inline-flex items-center px-4 py-2 ml-3 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md">
                    {!! __('pagination.next') !!}
                </span>
            @endif
        </div>

        <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
            <div>
                <p class="text-sm text-gray-700">
                    Affiche de
                    <span class="font-medium">{{ $paginator->firstItem() }}</span>
                    à
                    <span class="font-medium">{{ $paginator->lastItem() }}</span>
                    sur
                    <span class="font-medium">{{ $paginator->total() }}</span>
                    résultats
                </p>
            </div>

            <div>
                <span class="relative z-0 inline-flex shadow-sm rounded-md">
                    {{-- Previous Page Link --}}
                    @if ($paginator->onFirstPage())
                        <span aria-disabled="true" aria-label="{{ __('pagination.previous') }}">
                            <span class="relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-400 bg-white border border-gray-300 cursor-default rounded-l-md leading-5" aria-hidden="true">
                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" /></svg>
                            </span>
                        </span>
                    @else
                        <a href="{{ $paginator->previousPageUrl() }}" rel="prev" class="relative inline-flex items-center px-2 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-l-md leading-5 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500" aria-label="{{ __('pagination.previous') }}">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" /></svg>
                        </a>
                    @endif

                    {{-- Pagination Elements --}}
                    @foreach ($elements as $element)
                        @if (is_string($element))
                            <span aria-disabled="true"><span class="relative inline-flex items-center px-4 py-2 -ml-px text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5">{{ $element }}</span></span>
                        @endif

                        @if (is_array($element))
                            @foreach ($element as $page => $url)
                                @if ($page == $paginator->currentPage())
                                    <span aria-current="page"><span class="relative inline-flex items-center px-4 py-2 -ml-px text-sm font-medium text-white bg-violet-600 border border-violet-600 cursor-default leading-5">{{ $page }}</span></span>
                                @else
                                    <a href="{{ $url }}" class="relative inline-flex items-center px-4 py-2 -ml-px text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500" aria-label="{{ __('Go to page :page', ['page' => $page]) }}">{{ $page }}</a>
                                @endif
                            @endforeach
                        @endif
                    @endforeach

                    {{-- Next Page Link --}}
                    @if ($paginator->hasMorePages())
                        <a href="{{ $paginator->nextPageUrl() }}" rel="next" class="relative inline-flex items-center px-2 py-2 -ml-px text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-r-md leading-5 hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500" aria-label="{{ __('pagination.next') }}">
                            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" /></svg>
                        </a>
                    @else
                        <span aria-disabled="true" aria-label="{{ __('pagination.next') }}">
                            <span class="relative inline-flex items-center px-2 py-2 -ml-px text-sm font-medium text-gray-400 bg-white border border-gray-300 cursor-default rounded-r-md leading-5" aria-hidden="true">
                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" /></svg>
                            </span>
                        </span>
                    @endif
                </span>
            </div>
        </div>
    </nav>
@endif

--- END OF FILE: ./resources/views/vendor/pagination/tailwind.blade.php ---


#############################################
./resources/views/vendor/pagination/semantic-ui.blade.php
#############################################
@if ($paginator->hasPages())
    <div class="ui pagination menu" role="navigation">
        {{-- Previous Page Link --}}
        @if ($paginator->onFirstPage())
            <a class="icon item disabled" aria-disabled="true" aria-label="@lang('pagination.previous')"> <i class="left chevron icon"></i> </a>
        @else
            <a class="icon item" href="{{ $paginator->previousPageUrl() }}" rel="prev" aria-label="@lang('pagination.previous')"> <i class="left chevron icon"></i> </a>
        @endif

        {{-- Pagination Elements --}}
        @foreach ($elements as $element)
            {{-- "Three Dots" Separator --}}
            @if (is_string($element))
                <a class="icon item disabled" aria-disabled="true">{{ $element }}</a>
            @endif

            {{-- Array Of Links --}}
            @if (is_array($element))
                @foreach ($element as $page => $url)
                    @if ($page == $paginator->currentPage())
                        <a class="item active" href="{{ $url }}" aria-current="page">{{ $page }}</a>
                    @else
                        <a class="item" href="{{ $url }}">{{ $page }}</a>
                    @endif
                @endforeach
            @endif
        @endforeach

        {{-- Next Page Link --}}
        @if ($paginator->hasMorePages())
            <a class="icon item" href="{{ $paginator->nextPageUrl() }}" rel="next" aria-label="@lang('pagination.next')"> <i class="right chevron icon"></i> </a>
        @else
            <a class="icon item disabled" aria-disabled="true" aria-label="@lang('pagination.next')"> <i class="right chevron icon"></i> </a>
        @endif
    </div>
@endif

--- END OF FILE: ./resources/views/vendor/pagination/semantic-ui.blade.php ---


#############################################
./resources/views/vendor/pagination/simple-tailwind.blade.php
#############################################
@if ($paginator->hasPages())
    <nav role="navigation" aria-label="Pagination Navigation" class="flex justify-between">
        {{-- Previous Page Link --}}
        @if ($paginator->onFirstPage())
            <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md dark:text-gray-600 dark:bg-gray-800 dark:border-gray-600">
                {!! __('pagination.previous') !!}
            </span>
        @else
            <a href="{{ $paginator->previousPageUrl() }}" rel="prev" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-gray-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                {!! __('pagination.previous') !!}
            </a>
        @endif

        {{-- Next Page Link --}}
        @if ($paginator->hasMorePages())
            <a href="{{ $paginator->nextPageUrl() }}" rel="next" class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 leading-5 rounded-md hover:text-gray-500 focus:outline-none focus:ring ring-gray-300 focus:border-blue-300 active:bg-gray-100 active:text-gray-700 transition ease-in-out duration-150 dark:bg-gray-800 dark:border-gray-600 dark:text-gray-300 dark:focus:border-blue-700 dark:active:bg-gray-700 dark:active:text-gray-300">
                {!! __('pagination.next') !!}
            </a>
        @else
            <span class="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 cursor-default leading-5 rounded-md dark:text-gray-600 dark:bg-gray-800 dark:border-gray-600">
                {!! __('pagination.next') !!}
            </span>
        @endif
    </nav>
@endif

--- END OF FILE: ./resources/views/vendor/pagination/simple-tailwind.blade.php ---


#############################################
./resources/views/vendor/pagination/simple-bootstrap-4.blade.php
#############################################
@if ($paginator->hasPages())
    <nav>
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="page-item disabled" aria-disabled="true">
                    <span class="page-link">@lang('pagination.previous')</span>
                </li>
            @else
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev">@lang('pagination.previous')</a>
                </li>
            @endif

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next">@lang('pagination.next')</a>
                </li>
            @else
                <li class="page-item disabled" aria-disabled="true">
                    <span class="page-link">@lang('pagination.next')</span>
                </li>
            @endif
        </ul>
    </nav>
@endif

--- END OF FILE: ./resources/views/vendor/pagination/simple-bootstrap-4.blade.php ---


#############################################
./resources/views/vendor/pagination/simple-default.blade.php
#############################################
@if ($paginator->hasPages())
    <nav>
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="disabled" aria-disabled="true"><span>@lang('pagination.previous')</span></li>
            @else
                <li><a href="{{ $paginator->previousPageUrl() }}" rel="prev">@lang('pagination.previous')</a></li>
            @endif

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li><a href="{{ $paginator->nextPageUrl() }}" rel="next">@lang('pagination.next')</a></li>
            @else
                <li class="disabled" aria-disabled="true"><span>@lang('pagination.next')</span></li>
            @endif
        </ul>
    </nav>
@endif

--- END OF FILE: ./resources/views/vendor/pagination/simple-default.blade.php ---


#############################################
./resources/views/vendor/pagination/default.blade.php
#############################################
@if ($paginator->hasPages())
    <nav>
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="disabled" aria-disabled="true" aria-label="@lang('pagination.previous')">
                    <span aria-hidden="true">&lsaquo;</span>
                </li>
            @else
                <li>
                    <a href="{{ $paginator->previousPageUrl() }}" rel="prev" aria-label="@lang('pagination.previous')">&lsaquo;</a>
                </li>
            @endif

            {{-- Pagination Elements --}}
            @foreach ($elements as $element)
                {{-- "Three Dots" Separator --}}
                @if (is_string($element))
                    <li class="disabled" aria-disabled="true"><span>{{ $element }}</span></li>
                @endif

                {{-- Array Of Links --}}
                @if (is_array($element))
                    @foreach ($element as $page => $url)
                        @if ($page == $paginator->currentPage())
                            <li class="active" aria-current="page"><span>{{ $page }}</span></li>
                        @else
                            <li><a href="{{ $url }}">{{ $page }}</a></li>
                        @endif
                    @endforeach
                @endif
            @endforeach

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li>
                    <a href="{{ $paginator->nextPageUrl() }}" rel="next" aria-label="@lang('pagination.next')">&rsaquo;</a>
                </li>
            @else
                <li class="disabled" aria-disabled="true" aria-label="@lang('pagination.next')">
                    <span aria-hidden="true">&rsaquo;</span>
                </li>
            @endif
        </ul>
    </nav>
@endif

--- END OF FILE: ./resources/views/vendor/pagination/default.blade.php ---


#############################################
./resources/views/vendor/pagination/bootstrap-5.blade.php
#############################################
@if ($paginator->hasPages())
    <nav class="d-flex justify-items-center justify-content-between">
        <div class="d-flex justify-content-between flex-fill d-sm-none">
            <ul class="pagination">
                {{-- Previous Page Link --}}
                @if ($paginator->onFirstPage())
                    <li class="page-item disabled" aria-disabled="true">
                        <span class="page-link">@lang('pagination.previous')</span>
                    </li>
                @else
                    <li class="page-item">
                        <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev">@lang('pagination.previous')</a>
                    </li>
                @endif

                {{-- Next Page Link --}}
                @if ($paginator->hasMorePages())
                    <li class="page-item">
                        <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next">@lang('pagination.next')</a>
                    </li>
                @else
                    <li class="page-item disabled" aria-disabled="true">
                        <span class="page-link">@lang('pagination.next')</span>
                    </li>
                @endif
            </ul>
        </div>

        <div class="d-none flex-sm-fill d-sm-flex align-items-sm-center justify-content-sm-between">
            <div>
                <p class="small text-muted">
                    {!! __('Showing') !!}
                    <span class="fw-semibold">{{ $paginator->firstItem() }}</span>
                    {!! __('to') !!}
                    <span class="fw-semibold">{{ $paginator->lastItem() }}</span>
                    {!! __('of') !!}
                    <span class="fw-semibold">{{ $paginator->total() }}</span>
                    {!! __('results') !!}
                </p>
            </div>

            <div>
                <ul class="pagination">
                    {{-- Previous Page Link --}}
                    @if ($paginator->onFirstPage())
                        <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.previous')">
                            <span class="page-link" aria-hidden="true">&lsaquo;</span>
                        </li>
                    @else
                        <li class="page-item">
                            <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev" aria-label="@lang('pagination.previous')">&lsaquo;</a>
                        </li>
                    @endif

                    {{-- Pagination Elements --}}
                    @foreach ($elements as $element)
                        {{-- "Three Dots" Separator --}}
                        @if (is_string($element))
                            <li class="page-item disabled" aria-disabled="true"><span class="page-link">{{ $element }}</span></li>
                        @endif

                        {{-- Array Of Links --}}
                        @if (is_array($element))
                            @foreach ($element as $page => $url)
                                @if ($page == $paginator->currentPage())
                                    <li class="page-item active" aria-current="page"><span class="page-link">{{ $page }}</span></li>
                                @else
                                    <li class="page-item"><a class="page-link" href="{{ $url }}">{{ $page }}</a></li>
                                @endif
                            @endforeach
                        @endif
                    @endforeach

                    {{-- Next Page Link --}}
                    @if ($paginator->hasMorePages())
                        <li class="page-item">
                            <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next" aria-label="@lang('pagination.next')">&rsaquo;</a>
                        </li>
                    @else
                        <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.next')">
                            <span class="page-link" aria-hidden="true">&rsaquo;</span>
                        </li>
                    @endif
                </ul>
            </div>
        </div>
    </nav>
@endif

--- END OF FILE: ./resources/views/vendor/pagination/bootstrap-5.blade.php ---


#############################################
./resources/views/vendor/pagination/bootstrap-4.blade.php
#############################################
@if ($paginator->hasPages())
    <nav>
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.previous')">
                    <span class="page-link" aria-hidden="true">&lsaquo;</span>
                </li>
            @else
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev" aria-label="@lang('pagination.previous')">&lsaquo;</a>
                </li>
            @endif

            {{-- Pagination Elements --}}
            @foreach ($elements as $element)
                {{-- "Three Dots" Separator --}}
                @if (is_string($element))
                    <li class="page-item disabled" aria-disabled="true"><span class="page-link">{{ $element }}</span></li>
                @endif

                {{-- Array Of Links --}}
                @if (is_array($element))
                    @foreach ($element as $page => $url)
                        @if ($page == $paginator->currentPage())
                            <li class="page-item active" aria-current="page"><span class="page-link">{{ $page }}</span></li>
                        @else
                            <li class="page-item"><a class="page-link" href="{{ $url }}">{{ $page }}</a></li>
                        @endif
                    @endforeach
                @endif
            @endforeach

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next" aria-label="@lang('pagination.next')">&rsaquo;</a>
                </li>
            @else
                <li class="page-item disabled" aria-disabled="true" aria-label="@lang('pagination.next')">
                    <span class="page-link" aria-hidden="true">&rsaquo;</span>
                </li>
            @endif
        </ul>
    </nav>
@endif

--- END OF FILE: ./resources/views/vendor/pagination/bootstrap-4.blade.php ---


#############################################
./resources/views/vendor/pagination/simple-bootstrap-5.blade.php
#############################################
@if ($paginator->hasPages())
    <nav role="navigation" aria-label="Pagination Navigation">
        <ul class="pagination">
            {{-- Previous Page Link --}}
            @if ($paginator->onFirstPage())
                <li class="page-item disabled" aria-disabled="true">
                    <span class="page-link">{!! __('pagination.previous') !!}</span>
                </li>
            @else
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->previousPageUrl() }}" rel="prev">
                        {!! __('pagination.previous') !!}
                    </a>
                </li>
            @endif

            {{-- Next Page Link --}}
            @if ($paginator->hasMorePages())
                <li class="page-item">
                    <a class="page-link" href="{{ $paginator->nextPageUrl() }}" rel="next">{!! __('pagination.next') !!}</a>
                </li>
            @else
                <li class="page-item disabled" aria-disabled="true">
                    <span class="page-link">{!! __('pagination.next') !!}</span>
                </li>
            @endif
        </ul>
    </nav>
@endif

--- END OF FILE: ./resources/views/vendor/pagination/simple-bootstrap-5.blade.php ---


#############################################
./resources/views/admin/organizations/create.blade.php
#############################################
<x-app-layout>
    <x-slot name="header"><h2 class="font-semibold text-xl text-gray-800 leading-tight">Créer une Nouvelle Organisation</h2></x-slot>
    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900">
                    <form method="POST" action="{{ route('admin.organizations.store') }}">
                        @csrf
                        <div class="space-y-6">
                            <div>
                                <label for="name">Nom de l'Organisation <span class="text-red-500">*</span></label>
                                <x-text-input id="name" name="name" :value="old('name')" required class="mt-1 block w-full" />
                                <x-input-error :messages="$errors->get('name')" class="mt-2" />
                            </div>
                            {{-- (Ajoutez ici d'autres champs comme address, contact_email, status si nécessaire) --}}
                        </div>
                        <div class="mt-8 flex items-center justify-end gap-4">
                            <a href="{{ route('admin.organizations.index') }}" class="text-sm ...">Annuler</a>
                            <button type="submit" class="... bg-violet-600 ...">Enregistrer</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/organizations/create.blade.php ---


#############################################
./resources/views/admin/organizations/edit.blade.php
#############################################
<x-app-layout>
    <x-slot name="header"><h2 class="font-semibold text-xl text-gray-800 leading-tight">Modifier : {{ $organization->name }}</h2></x-slot>
    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900">
                    <form method="POST" action="{{ route('admin.organizations.update', $organization) }}">
                        @csrf
                        @method('PUT')
                        <div class="space-y-6">
                            <div>
                                <label for="name">Nom de l'Organisation <span class="text-red-500">*</span></label>
                                <x-text-input id="name" name="name" :value="old('name', $organization->name)" required class="mt-1 block w-full" />
                                <x-input-error :messages="$errors->get('name')" class="mt-2" />
                            </div>
                        </div>
                        <div class="mt-8 flex items-center justify-end gap-4">
                            <a href="{{ route('admin.organizations.index') }}" class="text-sm ...">Annuler</a>
                            <button type="submit" class="... bg-violet-600 ...">Enregistrer les Modifications</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/organizations/edit.blade.php ---


#############################################
./resources/views/admin/organizations/index.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Gestion des Organisations') }}
        </h2>
    </x-slot>

    <div x-data="{ showConfirmModal: false, deleteFormUrl: '' }" class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            @if (session('success'))
                <div class="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4" role="alert"><p class="font-bold">{{ session('success') }}</p></div>
            @endif
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-700">Toutes les Organisations</h3>
                        @can('create organizations')
                            <a href="{{ route('admin.organizations.create') }}" class="inline-flex items-center px-4 py-2 bg-violet-600 ...">Ajouter</a>
                        @endcan
                    </div>
                    <div class="overflow-x-auto border border-gray-200 rounded-lg">
                        <table class="w-full divide-y divide-gray-200">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th class="px-6 py-3 text-left ...">Nom de l'Organisation</th>
                                    <th class="px-6 py-3 text-left ...">Statut</th>
                                    <th class="px-6 py-3 text-left ...">Utilisateurs</th>
                                    <th class="px-6 py-3 text-right ...">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @forelse ($organizations as $organization)
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4 ...">{{ $organization->name }}</td>
                                        <td class="px-6 py-4 ...">{{ $organization->status }}</td>
                                        <td class="px-6 py-4 ...">{{ $organization->users_count }}</td>
                                        <td class="px-6 py-4 text-right">
                                            <div class="flex items-center justify-end space-x-2">
                                                <a href="{{ route('admin.organizations.edit', $organization) }}" title="Modifier" class="p-2 ..."><svg></svg></a>
                                                <button @click="showConfirmModal = true; deleteFormUrl = '{{ route('admin.organizations.destroy', $organization) }}'" title="Supprimer" class="p-2 ..."><svg></svg></button>
                                            </div>
                                        </td>
                                    </tr>
                                @empty
                                    <tr><td colspan="4" class="px-6 py-4 text-center ...">Aucune organisation trouvée.</td></tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        {{-- Modale de confirmation de suppression --}}
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/organizations/index.blade.php ---


#############################################
./resources/views/admin/users/create.blade.php
#############################################
{{-- resources/views/admin/users/create.blade.php --}}
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Créer un Nouvel Utilisateur') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900">

                    @if ($errors->any())
                        <div class="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                            <p class="font-bold">Erreurs de validation</p>
                            <ul>
                                @foreach ($errors->all() as $error)
                                    <li>{{ $error }}</li>
                                @endforeach
                            </ul>
                        </div>
                    @endif

                    <form method="POST" action="{{ route('admin.users.store') }}">
                        @csrf
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <x-input-label for="first_name" :value="__('Prénom')" />
                                <x-text-input id="first_name" class="block mt-1 w-full" type="text" name="first_name" :value="old('first_name')" required autofocus />
                            </div>
                            <div>
                                <x-input-label for="last_name" :value="__('Nom de famille')" />
                                <x-text-input id="last_name" class="block mt-1 w-full" type="text" name="last_name" :value="old('last_name')" required />
                            </div>
                            <div class="md:col-span-2">
                                <x-input-label for="email" :value="__('Email')" />
                                <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email')" required />
                            </div>
                            <div class="md:col-span-2">
                                <x-input-label for="phone" :value="__('Téléphone (optionnel)')" />
                                <x-text-input id="phone" class="block mt-1 w-full" type="text" name="phone" :value="old('phone')" />
                            </div>
                            <div class="md:col-span-2">
                                <label for="organization_id" class="block font-medium text-sm text-gray-700">Organisation <span class="text-red-500">*</span></label>
                                <select name="organization_id" id="organization_id" class="mt-1 block w-full ..." required>
                                    <option value="">Sélectionnez une organisation</option>
                                    @foreach($organizations as $org)
                                        <option value="{{ $org->id }}" @selected(old('organization_id') == $org->id)>{{ $org->name }}</option>
                                    @endforeach
                                </select>
                                <x-input-error :messages="$errors->get('organization_id')" class="mt-2" />
                            </div>
                            <div>
                                <x-input-label for="password" :value="__('Mot de passe')" />
                                <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" required />
                            </div>
                            <div>
                                <x-input-label for="password_confirmation" :value="__('Confirmer le mot de passe')" />
                                <x-text-input id="password_confirmation" class="block mt-1 w-full" type="password" name="password_confirmation" required />
                            </div>
                        </div>

                        <div class="mt-6 border-t border-gray-200 pt-6">
                            <p class="font-medium text-gray-800">Assigner des Rôles :</p>
                            <div class="mt-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                                @foreach ($roles as $role)
                                    <div class="flex items-center">
                                        <input type="checkbox" name="roles[]" id="role_{{ $role->id }}" value="{{ $role->id }}" class="h-4 w-4 rounded border-gray-300 text-violet-600 focus:ring-violet-500">
                                        <label for="role_{{ $role->id }}" class="ml-3 block text-sm font-medium text-gray-700">{{ $role->name }}</label>
                                    </div>
                                @endforeach
                            </div>
                        </div>

                        <div class="mt-8 flex items-center justify-end gap-4">
                            <a href="{{ route('admin.users.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">{{ __('Annuler') }}</a>
                            <button type="submit" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 transition ease-in-out duration-150">
                                {{ __('Créer l\'Utilisateur') }}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/users/create.blade.php ---


#############################################
./resources/views/admin/users/edit.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Modifier l\'Utilisateur :') }} <span class="text-violet-700">{{ $user->name }}</span>
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900">
                    
                    @if ($errors->any())
                        <div class="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                            <p class="font-bold">Veuillez corriger les erreurs ci-dessous.</p>
                        </div>
                    @endif

                    <form method="POST" action="{{ route('admin.users.update', $user) }}">
                        @csrf
                        @method('PUT')
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            
                            {{-- Prénom --}}
                            <div>
                                <label for="first_name" class="block font-medium text-sm text-gray-700">Prénom <span class="text-red-500">*</span></label>
                                <x-text-input id="first_name" class="block mt-1 w-full" type="text" name="first_name" :value="old('first_name', $user->first_name)" required autofocus />
                                <x-input-error :messages="$errors->get('first_name')" class="mt-2" />
                            </div>

                            {{-- Nom --}}
                            <div>
                                <label for="last_name" class="block font-medium text-sm text-gray-700">Nom <span class="text-red-500">*</span></label>
                                <x-text-input id="last_name" class="block mt-1 w-full" type="text" name="last_name" :value="old('last_name', $user->last_name)" required />
                                <x-input-error :messages="$errors->get('last_name')" class="mt-2" />
                            </div>

                            {{-- Email --}}
                            <div class="md:col-span-2">
                                <label for="email" class="block font-medium text-sm text-gray-700">Email <span class="text-red-500">*</span></label>
                                <x-text-input id="email" class="block mt-1 w-full" type="email" name="email" :value="old('email', $user->email)" required />
                                <x-input-error :messages="$errors->get('email')" class="mt-2" />
                            </div>

                             {{-- Organisation --}}
                            <div class="md:col-span-2">
                                <label for="organization_id" class="block font-medium text-sm text-gray-700">Organisation <span class="text-red-500">*</span></label>
                                <select name="organization_id" id="organization_id" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm" required>
                                    @foreach($organizations as $org)
                                        <option value="{{ $org->id }}" @selected(old('organization_id', $user->organization_id) == $org->id)>
                                            {{ $org->name }}
                                        </option>
                                    @endforeach
                                </select>
                                <x-input-error :messages="$errors->get('organization_id')" class="mt-2" />
                            </div>

                            {{-- Mot de passe --}}
                            <div class="border-t pt-6 md:col-span-2">
                                <p class="text-sm text-gray-500">Laissez les champs de mot de passe vides si vous ne souhaitez pas le modifier.</p>
                            </div>
                            <div>
                                <label for="password" class="block font-medium text-sm text-gray-700">Nouveau Mot de passe</label>
                                <x-text-input id="password" class="block mt-1 w-full" type="password" name="password" autocomplete="new-password" />
                                <x-input-error :messages="$errors->get('password')" class="mt-2" />
                            </div>
                            <div>
                                <label for="password_confirmation" class="block font-medium text-sm text-gray-700">Confirmation du Mot de passe</label>
                                <x-text-input id="password_confirmation" class="block mt-1 w-full" type="password" name="password_confirmation" />
                            </div>
                        </div>

                        {{-- Rôles --}}
                        <div class="mt-6 border-t pt-6">
                            <label class="block font-medium text-sm text-gray-700">Rôles</label>
                            <div class="mt-2 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
                                @foreach ($roles as $role)
                                    <div class="flex items-center">
                                        <input type="checkbox" name="roles[]" id="role_{{ $role->id }}" value="{{ $role->id }}" class="h-4 w-4 rounded border-gray-300 text-violet-600 focus:ring-violet-500"
                                            @checked(in_array($role->id, old('roles', $user->roles->pluck('id')->toArray())))>
                                        <label for="role_{{ $role->id }}" class="ml-3 block text-sm font-medium text-gray-700">{{ $role->name }}</label>
                                    </div>
                                @endforeach
                            </div>
                            <x-input-error :messages="$errors->get('roles')" class="mt-2" />
                        </div>

                        <div class="mt-8 flex items-center justify-end gap-4">
                            <a href="{{ route('admin.users.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Annuler</a>
                            <button type="submit" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                Mettre à Jour
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
--- END OF FILE: ./resources/views/admin/users/edit.blade.php ---


#############################################
./resources/views/admin/users/index.blade.php
#############################################
{{-- resources/views/admin/users/index.blade.php --}}
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Administration - Gestion des Utilisateurs') }}
        </h2>
    </x-slot>

    {{-- Initialisation d'Alpine.js pour la modale de confirmation --}}
    <div x-data="{ showConfirmModal: false, userToDelete: {}, deleteFormUrl: '' }" class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            @if (session('success'))
                <div class="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4" role="alert">
                    <p class="font-bold">{{ session('success') }}</p>
                </div>
            @endif

            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">

                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-700">{{ __('Liste des Utilisateurs') }}</h3>
                        @can('create users')
                            <a href="{{ route('admin.users.create') }}" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 transition ease-in-out duration-150">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                                {{ __('Ajouter un Utilisateur') }}
                            </a>
                        @endcan
                    </div>

                    <div class="overflow-x-auto border border-gray-200 rounded-lg">
                        <table class="w-full divide-y divide-gray-200">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Nom Complet</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Email</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Rôles</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Inscrit le</th>
                                    <th scope="col" class="px-6 py-3 text-right text-xs font-bold text-gray-600 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @forelse ($users as $user)
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4 text-sm text-gray-800">{{ $user->name }}</td>
                                        <td class="px-6 py-4 text-sm text-gray-500">{{ $user->email }}</td>
                                        <td class="px-6 py-4 text-sm text-gray-500">
                                            @forelse($user->roles as $role)
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-violet-100 text-violet-800">
                                                    {{ $role->name }}
                                                </span>
                                            @empty
                                                <span class="text-xs italic text-gray-400">Aucun rôle</span>
                                            @endforelse
                                        </td>
                                        <td class="px-6 py-4 text-sm text-gray-500">{{ $user->created_at->format('d/m/Y') }}</td>

                                        {{-- ##### SECTION DES BOUTONS D'ACTION CORRIGÉE ##### --}}
                                        <td class="px-6 py-4 text-right text-sm font-medium">
                                            <div class="flex items-center justify-end space-x-2">
                                                @can('edit users')
                                                    <a href="{{ route('admin.users.edit', $user) }}" title="Modifier" class="p-2 rounded-full text-gray-400 hover:bg-violet-100 hover:text-violet-600 transition-colors duration-200">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536L16.732 3.732z" /></svg>
                                                    </a>
                                                @endcan
                                                @can('delete users')
                                                    <button type="button" 
                                                            @click="showConfirmModal = true; userToDelete = {{ json_encode($user->only(['id', 'name'])) }}; deleteFormUrl = '{{ route('admin.users.destroy', $user->id) }}'" 
                                                            title="Supprimer" 
                                                            class="p-2 rounded-full text-gray-400 hover:bg-red-100 hover:text-red-600 transition-colors duration-200">
                                                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                                                    </button>
                                                @endcan
                                            </div>
                                        </td>
                                        {{-- ##### FIN DE LA SECTION CORRIGÉE ##### --}}

                                    </tr>
                                @empty
                                    <tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">Aucun utilisateur trouvé.</td></tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-6">{{ $users->links() }}</div>
                </div>
            </div>
        </div>

        {{-- Fenêtre Modale de Confirmation de Suppression --}}
        <div x-show="showConfirmModal" x-transition:enter="ease-out duration-300" x-transition:enter-start="opacity-0" x-transition:enter-end="opacity-100" x-transition:leave="ease-in duration-200" x-transition:leave-start="opacity-100" x-transition:leave-end="opacity-0" class="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-60" style="display: none;">
            <div @click.away="showConfirmModal = false" class="bg-white rounded-lg shadow-xl p-6 md:p-8 w-full max-w-md mx-4">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" /></svg>
                    </div>
                    <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                        <h3 class="text-base font-semibold leading-6 text-gray-900" id="modal-title">Confirmer la Suppression</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-600">Êtes-vous sûr de vouloir supprimer l'utilisateur <strong class="font-bold" x-text="userToDelete.name"></strong> ?</p>
                            <p class="mt-1 text-sm text-gray-500">Cette action est définitive et irréversible.</p>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                    <form :action="deleteFormUrl" method="POST" x-ref="deleteForm">
                        @csrf
                        @method('DELETE')
                        <button type="submit" class="inline-flex w-full justify-center rounded-md bg-red-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-700 sm:ml-3 sm:w-auto">
                            Confirmer la Suppression
                        </button>
                    </form>
                    <button type="button" @click="showConfirmModal = false" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">
                        Annuler
                    </button>
                </div>
            </div>
        </div>

    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/users/index.blade.php ---


#############################################
./resources/views/admin/vehicles/create.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">{{ __('Ajouter un Nouveau Véhicule') }}</h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900" x-data="{ currentStep: {{ old('current_step', 1) }} }" x-init="
                    @if ($errors->any())
                        let errors = {{ json_encode($errors->messages()) }};
                        let firstErrorStep = null;

                        const fieldToStepMap = {
                            'registration_plate': 1, 'vin': 1, 'brand': 1, 'model': 1, 'color': 1,
                            'vehicle_type_id': 2, 'fuel_type_id': 2, 'transmission_type_id': 2,
                            'manufacturing_year': 2, 'seats': 2, 'power_hp': 2, 'engine_displacement_cc': 2,
                            'acquisition_date': 3, 'purchase_price': 3, 'current_value': 3,
                            'initial_mileage': 3, 'status_id': 3, 'notes': 3
                        };

                        for (const field in fieldToStepMap) { // Iterate through the map to ensure order
                            if (errors.hasOwnProperty(field)) {
                                firstErrorStep = fieldToStepMap[field];
                                break; // Found the first error field and its step
                            }
                        }

                        if (firstErrorStep !== null) {
                            currentStep = firstErrorStep;
                        } else if ({{ old('current_step', 0) }} > 0) {
                            // Fallback to the last submitted step if no specific field error was found
                            currentStep = {{ old('current_step') }};
                        } else {
                            // Default to step 1 if no errors or old step is available
                            currentStep = 1;
                        }
                    @endif
                ">

                        {{-- Indicateur d'étapes (Stepper) --}}
                        <ol class="flex items-center w-full mb-6">
                                <li class="flex w-full items-center text-violet-600 after:content-[''] after:w-full after:h-1 after:border-b after:border-violet-600 after:border-3 after:inline-block">
                                    <span class="flex items-center justify-center w-10 h-10 bg-violet-100 rounded-full lg:h-12 lg:w-12 shrink-0">
                                        <svg class="w-4 h-4 text-violet-600 lg:w-6 lg:h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>
                                    </span>
                                </li>
                                <li class="flex w-full items-center after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-3 after:inline-block" :class="{ 'text-violet-600 after:border-violet-600': currentStep >= 2 }">
                                    <span class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0" :class="{ 'bg-violet-100': currentStep >= 2, 'bg-gray-100': currentStep < 2 }">
                                        <span x-show="currentStep < 2">2</span>
                                        <svg x-show="currentStep >= 2" class="w-4 h-4 lg:w-6 lg:h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>
                                    </span>
                                </li>
                                <li class="flex items-center" :class="{ 'text-violet-600': currentStep === 3 }">
                                    <span class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0" :class="{ 'bg-violet-100': currentStep === 3, 'bg-gray-100': currentStep < 3 }">3</span>
                                </li>
                        </ol>

                    @if ($errors->any())
                        <div class="mb-6 bg-red-50 border-l-4 border-red-400 text-red-700 p-4" role="alert">
                            <p class="font-bold">Veuillez corriger les erreurs ci-dessous:</p>
                            <ul class="mt-3 list-disc list-inside text-sm text-red-600">
                                @foreach ($errors->all() as $error)
                                    <li>{{ $error }}</li>
                                @endforeach
                            </ul>
                        </div>
                    @endif

                    <form method="POST" action="{{ route('admin.vehicles.store') }}" enctype="multipart/form-data">
                        @csrf
                        {{-- Champ caché pour mémoriser l'étape actuelle --}}
                        <input type="hidden" name="current_step" x-model="currentStep">

                        {{-- Étape 1: Informations d'Identification --}}
                        <section x-show="currentStep === 1">
                            <h3 class="text-lg font-semibold text-gray-800 border-b pb-2 mb-6">Étape 1: Identification</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                    <div>
                                        <label for="registration_plate" class="block font-medium text-sm text-gray-700">Immatriculation <span class="text-red-500">*</span></label>
                                        <x-text-input id="registration_plate" class="block mt-1 w-full" type="text" name="registration_plate" :value="old('registration_plate')" />
                                        <x-input-error :messages="$errors->get('registration_plate')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="vin" class="block font-medium text-sm text-gray-700">Numéro de série (VIN)</label>
                                        <x-text-input id="vin" class="block mt-1 w-full" type="text" name="vin" :value="old('vin')" />
                                        <x-input-error :messages="$errors->get('vin')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="brand" class="block font-medium text-sm text-gray-700">Marque <span class="text-red-500">*</span></label>
                                        <x-text-input id="brand" class="block mt-1 w-full" type="text" name="brand" :value="old('brand')" />
                                        <x-input-error :messages="$errors->get('brand')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="model" class="block font-medium text-sm text-gray-700">Modèle <span class="text-red-500">*</span></label>
                                        <x-text-input id="model" class="block mt-1 w-full" type="text" name="model" :value="old('model')" />
                                        <x-input-error :messages="$errors->get('model')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="color" class="block font-medium text-sm text-gray-700">Couleur</label>
                                        <x-text-input id="color" class="block mt-1 w-full" type="text" name="color" :value="old('color')" />
                                        <x-input-error :messages="$errors->get('color')" class="mt-2" />
                                    </div>
                            </div>
                        </section>
                        
                        <section x-show="currentStep === 2">
                            <h3 class="text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2 mb-6">Étape 2: Caractéristiques Techniques</h3>
                                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
                                    <div>
                                        <label for="vehicle_type_id" class="block font-medium text-sm text-gray-700">Type de Véhicule <span class="text-red-500">*</span></label>
                                        <select name="vehicle_type_id" id="vehicle_type_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                            <option value="">Sélectionnez...</option>
                                            @foreach($vehicleTypes as $type)<option value="{{ $type->id }}" @selected(old('vehicle_type_id') == $type->id)>{{ $type->name }}</option>@endforeach
                                        </select>
                                        <x-input-error :messages="$errors->get('vehicle_type_id')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="fuel_type_id" class="block font-medium text-sm text-gray-700">Type de Carburant <span class="text-red-500">*</span></label>
                                        <select name="fuel_type_id" id="fuel_type_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                            <option value="">Sélectionnez...</option>
                                            @foreach($fuelTypes as $type)<option value="{{ $type->id }}" @selected(old('fuel_type_id') == $type->id)>{{ $type->name }}</option>@endforeach
                                        </select>
                                        <x-input-error :messages="$errors->get('fuel_type_id')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="transmission_type_id" class="block font-medium text-sm text-gray-700">Type de Transmission <span class="text-red-500">*</span></label>
                                        <select name="transmission_type_id" id="transmission_type_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                            <option value="">Sélectionnez...</option>
                                            @foreach($transmissionTypes as $type)<option value="{{ $type->id }}" @selected(old('transmission_type_id') == $type->id)>{{ $type->name }}</option>@endforeach
                                        </select>
                                        <x-input-error :messages="$errors->get('transmission_type_id')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="manufacturing_year" class="block font-medium text-sm text-gray-700">Année de Fabrication</label>
                                        <x-text-input id="manufacturing_year" class="block mt-1 w-full" type="number" name="manufacturing_year" :value="old('manufacturing_year')" />
                                        <x-input-error :messages="$errors->get('manufacturing_year')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="seats" class="block font-medium text-sm text-gray-700">Nombre de places</label>
                                        <x-text-input id="seats" class="block mt-1 w-full" type="number" name="seats" :value="old('seats')" />
                                        <x-input-error :messages="$errors->get('seats')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="power_hp" class="block font-medium text-sm text-gray-700">Puissance (CV)</label>
                                        <x-text-input id="power_hp" class="block mt-1 w-full" type="number" name="power_hp" :value="old('power_hp')" />
                                        <x-input-error :messages="$errors->get('power_hp')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="engine_displacement_cc" class="block font-medium text-sm text-gray-700">Cylindrée (cc)</label>
                                        <x-text-input id="engine_displacement_cc" class="block mt-1 w-full" type="number" name="engine_displacement_cc" :value="old('engine_displacement_cc')" />
                                        <x-input-error :messages="$errors->get('engine_displacement_cc')" class="mt-2" />
                                    </div>
                                </div>
                        </section>


                        <section x-show="currentStep === 3">
                            <h3 class="text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2 mb-6">Étape 3: Acquisition, Finances & Statut</h3>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                    <div>
                                        <label for="acquisition_date" class="block font-medium text-sm text-gray-700">Date d'acquisition</label>
                                        <x-text-input id="acquisition_date" class="block mt-1 w-full" type="date" name="acquisition_date" :value="old('acquisition_date')" />
                                        <x-input-error :messages="$errors->get('acquisition_date')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="purchase_price" class="block font-medium text-sm text-gray-700">Prix d'achat (DA)</label>
                                        <x-text-input id="purchase_price" class="block mt-1 w-full" type="number" name="purchase_price" step="0.01" :value="old('purchase_price')" />
                                        <x-input-error :messages="$errors->get('purchase_price')" class="mt-2" />
                                    </div>
                                     <div>
                                        <label for="current_value" class="block font-medium text-sm text-gray-700">Valeur actuelle (DA)</label>
                                        <x-text-input id="current_value" class="block mt-1 w-full" type="number" name="current_value" step="0.01" :value="old('current_value')" />
                                        <x-input-error :messages="$errors->get('current_value')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="initial_mileage" class="block font-medium text-sm text-gray-700">Kilométrage Initial</label>
                                        <x-text-input id="initial_mileage" class="block mt-1 w-full" type="number" name="initial_mileage" :value="old('initial_mileage', 0)" />
                                        <x-input-error :messages="$errors->get('initial_mileage')" class="mt-2" />
                                    </div>
                                    <div class="md:col-span-2">
                                        <label for="status_id" class="block font-medium text-sm text-gray-700">Statut Initial <span class="text-red-500">*</span></label>
                                        <select name="status_id" id="status_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                            <option value="">Sélectionnez...</option>
                                            @foreach($vehicleStatuses as $status)<option value="{{ $status->id }}" @selected(old('status_id') == $status->id)>{{ $status->name }}</option>@endforeach
                                        </select>
                                        <x-input-error :messages="$errors->get('status_id')" class="mt-2" />
                                    </div>
                                    <div class="md:col-span-2">
                                        <label for="notes" class="block font-medium text-sm text-gray-700">Notes</label>
                                        <textarea id="notes" name="notes" rows="3" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">{{ old('notes') }}</textarea>
                                        <x-input-error :messages="$errors->get('notes')" class="mt-2" />
                                    </div>
                                </div>
                        </section>

                        {{-- (Les autres étapes contiennent maintenant aussi le composant x-input-error sous chaque champ) --}}

                        {{-- Boutons de Navigation --}}
                        <div class="mt-8 pt-6 border-t border-gray-200 flex items-center justify-between">
                            <div>
                                <button type="button" x-show="currentStep > 1" @click="currentStep--" class="inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50">
                                    Précédent
                                </button>
                            </div>
                            <div class="flex items-center gap-4">
                                <a href="{{ route('admin.vehicles.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Annuler</a>
                                <button type="button" x-show="currentStep < 3" @click="currentStep++" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                    Suivant
                                </button>
                                <button type="submit" x-show="currentStep === 3" class="inline-flex items-center px-4 py-2 bg-green-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-green-700">
                                    Enregistrer le Véhicule
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>
--- END OF FILE: ./resources/views/admin/vehicles/create.blade.php ---


#############################################
./resources/views/admin/vehicles/edit.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">{{ __('Modifier le Véhicule') }}</h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900" x-data="{ currentStep: {{ old('current_step', 1) }} }" x-init="
                    @if ($errors->any())
                        let errors = {{ json_encode($errors->messages()) }};
                        let firstErrorStep = null;

                        const fieldToStepMap = {
                            'registration_plate': 1, 'vin': 1, 'brand': 1, 'model': 1, 'color': 1,
                            'vehicle_type_id': 2, 'fuel_type_id': 2, 'transmission_type_id': 2,
                            'manufacturing_year': 2, 'seats': 2, 'power_hp': 2, 'engine_displacement_cc': 2,
                            'acquisition_date': 3, 'purchase_price': 3, 'current_value': 3,
                            'initial_mileage': 3, 'status_id': 3, 'notes': 3
                        };

                        for (const field in fieldToStepMap) { // Iterate through the map to ensure order
                            if (errors.hasOwnProperty(field)) {
                                firstErrorStep = fieldToStepMap[field];
                                break; // Found the first error field and its step
                            }
                        }

                        if (firstErrorStep !== null) {
                            currentStep = firstErrorStep;
                        } else if ({{ old('current_step', 0) }} > 0) {
                            // Fallback to the last submitted step if no specific field error was found
                            currentStep = {{ old('current_step') }};
                        } else {
                            // Default to step 1 if no errors or old step is available
                            currentStep = 1;
                        }
                    @endif
                ">

                        {{-- Indicateur d'étapes (Stepper) --}}
                        <ol class="flex items-center w-full mb-6">
                                <li class="flex w-full items-center text-violet-600 after:content-[''] after:w-full after:h-1 after:border-b after:border-violet-600 after:border-3 after:inline-block">
                                    <span class="flex items-center justify-center w-10 h-10 bg-violet-100 rounded-full lg:h-12 lg:w-12 shrink-0">
                                        <svg class="w-4 h-4 text-violet-600 lg:w-6 lg:h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>
                                    </span>
                                </li>
                                <li class="flex w-full items-center after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-3 after:inline-block" :class="{ 'text-violet-600 after:border-violet-600': currentStep >= 2 }">
                                    <span class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0" :class="{ 'bg-violet-100': currentStep >= 2, 'bg-gray-100': currentStep < 2 }">
                                        <span x-show="currentStep < 2">2</span>
                                        <svg x-show="currentStep >= 2" class="w-4 h-4 lg:w-6 lg:h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>
                                    </span>
                                </li>
                                <li class="flex items-center" :class="{ 'text-violet-600': currentStep === 3 }">
                                    <span class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0" :class="{ 'bg-violet-100': currentStep === 3, 'bg-gray-100': currentStep < 3 }">3</span>
                                </li>
                        </ol>

                    @if ($errors->any())
                        <div class="mb-6 bg-red-50 border-l-4 border-red-400 text-red-700 p-4" role="alert">
                            <p class="font-bold">Veuillez corriger les erreurs ci-dessous:</p>
                            <ul class="mt-3 list-disc list-inside text-sm text-red-600">
                                @foreach ($errors->all() as $error)
                                    <li>{{ $error }}</li>
                                @endforeach
                            </ul>
                        </div>
                    @endif

                    <form method="POST" action="{{ route('admin.vehicles.update', $vehicle->id) }}" enctype="multipart/form-data">
                        @csrf
                        @method('PUT')
                        {{-- Champ caché pour mémoriser l'étape actuelle --}}
                        <input type="hidden" name="current_step" x-model="currentStep">

                        {{-- Étape 1: Informations d'Identification --}}
                        <section x-show="currentStep === 1">
                            <h3 class="text-lg font-semibold text-gray-800 border-b pb-2 mb-6">Étape 1: Identification</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                    <div>
                                        <label for="registration_plate" class="block font-medium text-sm text-gray-700">Immatriculation <span class="text-red-500">*</span></label>
                                        <x-text-input id="registration_plate" class="block mt-1 w-full" type="text" name="registration_plate" :value="old('registration_plate', $vehicle->registration_plate)" />
                                        <x-input-error :messages="$errors->get('registration_plate')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="vin" class="block font-medium text-sm text-gray-700">Numéro de série (VIN)</label>
                                        <x-text-input id="vin" class="block mt-1 w-full" type="text" name="vin" :value="old('vin', $vehicle->vin)" />
                                        <x-input-error :messages="$errors->get('vin')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="brand" class="block font-medium text-sm text-gray-700">Marque <span class="text-red-500">*</span></label>
                                        <x-text-input id="brand" class="block mt-1 w-full" type="text" name="brand" :value="old('brand', $vehicle->brand)" />
                                        <x-input-error :messages="$errors->get('brand')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="model" class="block font-medium text-sm text-gray-700">Modèle <span class="text-red-500">*</span></label>
                                        <x-text-input id="model" class="block mt-1 w-full" type="text" name="model" :value="old('model', $vehicle->model)" />
                                        <x-input-error :messages="$errors->get('model')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="color" class="block font-medium text-sm text-gray-700">Couleur</label>
                                        <x-text-input id="color" class="block mt-1 w-full" type="text" name="color" :value="old('color', $vehicle->color)" />
                                        <x-input-error :messages="$errors->get('color')" class="mt-2" />
                                    </div>
                            </div>
                        </section>
                        
                        <section x-show="currentStep === 2">
                            <h3 class="text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2 mb-6">Étape 2: Caractéristiques Techniques</h3>
                                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
                                    <div>
                                        <label for="vehicle_type_id" class="block font-medium text-sm text-gray-700">Type de Véhicule <span class="text-red-500">*</span></label>
                                        <select name="vehicle_type_id" id="vehicle_type_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                            <option value="">Sélectionnez...</option>
                                            @foreach($vehicleTypes as $type)<option value="{{ $type->id }}" @selected(old('vehicle_type_id', $vehicle->vehicle_type_id) == $type->id)>{{ $type->name }}</option>@endforeach
                                        </select>
                                        <x-input-error :messages="$errors->get('vehicle_type_id')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="fuel_type_id" class="block font-medium text-sm text-gray-700">Type de Carburant <span class="text-red-500">*</span></label>
                                        <select name="fuel_type_id" id="fuel_type_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                            <option value="">Sélectionnez...</option>
                                            @foreach($fuelTypes as $type)<option value="{{ $type->id }}" @selected(old('fuel_type_id', $vehicle->fuel_type_id) == $type->id)>{{ $type->name }}</option>@endforeach
                                        </select>
                                        <x-input-error :messages="$errors->get('fuel_type_id')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="transmission_type_id" class="block font-medium text-sm text-gray-700">Type de Transmission <span class="text-red-500">*</span></label>
                                        <select name="transmission_type_id" id="transmission_type_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                            <option value="">Sélectionnez...</option>
                                            @foreach($transmissionTypes as $type)<option value="{{ $type->id }}" @selected(old('transmission_type_id', $vehicle->transmission_type_id) == $type->id)>{{ $type->name }}</option>@endforeach
                                        </select>
                                        <x-input-error :messages="$errors->get('transmission_type_id')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="manufacturing_year" class="block font-medium text-sm text-gray-700">Année de Fabrication</label>
                                        <x-text-input id="manufacturing_year" class="block mt-1 w-full" type="number" name="manufacturing_year" :value="old('manufacturing_year', $vehicle->manufacturing_year)" />
                                        <x-input-error :messages="$errors->get('manufacturing_year')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="seats" class="block font-medium text-sm text-gray-700">Nombre de places</label>
                                        <x-text-input id="seats" class="block mt-1 w-full" type="number" name="seats" :value="old('seats', $vehicle->seats)" />
                                        <x-input-error :messages="$errors->get('seats')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="power_hp" class="block font-medium text-sm text-gray-700">Puissance (CV)</label>
                                        <x-text-input id="power_hp" class="block mt-1 w-full" type="number" name="power_hp" :value="old('power_hp', $vehicle->power_hp)" />
                                        <x-input-error :messages="$errors->get('power_hp')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="engine_displacement_cc" class="block font-medium text-sm text-gray-700">Cylindrée (cc)</label>
                                        <x-text-input id="engine_displacement_cc" class="block mt-1 w-full" type="number" name="engine_displacement_cc" :value="old('engine_displacement_cc', $vehicle->engine_displacement_cc)" />
                                        <x-input-error :messages="$errors->get('engine_displacement_cc')" class="mt-2" />
                                    </div>
                                </div>
                        </section>


                        <section x-show="currentStep === 3">
                            <h3 class="text-lg font-semibold text-gray-800 border-b border-gray-200 pb-2 mb-6">Étape 3: Acquisition, Finances & Statut</h3>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                    <div>
                                        <label for="acquisition_date" class="block font-medium text-sm text-gray-700">Date d'acquisition</label>
                                        <x-text-input id="acquisition_date" class="block mt-1 w-full" type="date" name="acquisition_date" :value="old('acquisition_date', $vehicle->acquisition_date)" />
                                        <x-input-error :messages="$errors->get('acquisition_date')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="purchase_price" class="block font-medium text-sm text-gray-700">Prix d'achat (DA)</label>
                                        <x-text-input id="purchase_price" class="block mt-1 w-full" type="number" name="purchase_price" step="0.01" :value="old('purchase_price', $vehicle->purchase_price)" />
                                        <x-input-error :messages="$errors->get('purchase_price')" class="mt-2" />
                                    </div>
                                     <div>
                                        <label for="current_value" class="block font-medium text-sm text-gray-700">Valeur actuelle (DA)</label>
                                        <x-text-input id="current_value" class="block mt-1 w-full" type="number" name="current_value" step="0.01" :value="old('current_value', $vehicle->current_value)" />
                                        <x-input-error :messages="$errors->get('current_value')" class="mt-2" />
                                    </div>
                                    <div>
                                        <label for="initial_mileage" class="block font-medium text-sm text-gray-700">Kilométrage Initial</label>
                                        <x-text-input id="initial_mileage" class="block mt-1 w-full" type="number" name="initial_mileage" :value="old('initial_mileage', $vehicle->initial_mileage)" />
                                        <x-input-error :messages="$errors->get('initial_mileage')" class="mt-2" />
                                    </div>
                                    <div class="md:col-span-2">
                                        <label for="status_id" class="block font-medium text-sm text-gray-700">Statut Initial <span class="text-red-500">*</span></label>
                                        <select name="status_id" id="status_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                            <option value="">Sélectionnez...</option>
                                            @foreach($vehicleStatuses as $status)<option value="{{ $status->id }}" @selected(old('status_id', $vehicle->status_id) == $status->id)>{{ $status->name }}</option>@endforeach
                                        </select>
                                        <x-input-error :messages="$errors->get('status_id')" class="mt-2" />
                                    </div>
                                    <div class="md:col-span-2">
                                        <label for="notes" class="block font-medium text-sm text-gray-700">Notes</label>
                                        <textarea id="notes" name="notes" rows="3" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">{{ old('notes', $vehicle->notes) }}</textarea>
                                        <x-input-error :messages="$errors->get('notes')" class="mt-2" />
                                    </div>
                                </div>
                        </section>

                        {{-- (Les autres étapes contiennent maintenant aussi le composant x-input-error sous chaque champ) --}}

                        {{-- Boutons de Navigation --}}
                        <div class="mt-8 pt-6 border-t border-gray-200 flex items-center justify-between">
                            <div>
                                <button type="button" x-show="currentStep > 1" @click="currentStep--" class="inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50">
                                    Précédent
                                </button>
                            </div>
                            <div class="flex items-center gap-4">
                                <a href="{{ route('admin.vehicles.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Annuler</a>
                                <button type="button" x-show="currentStep < 3" @click="currentStep++" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                    Suivant
                                </button>
                                <button type="submit" x-show="currentStep === 3" class="inline-flex items-center px-4 py-2 bg-green-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-green-700">
                                    Enregistrer le Véhicule
                                </button>
                            </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>



--- END OF FILE: ./resources/views/admin/vehicles/edit.blade.php ---


#############################################
./resources/views/admin/vehicles/index.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Gestion de la Flotte - Véhicules') }}
        </h2>
    </x-slot>

    {{-- Le composant Alpine.js est initialisé ici, avec la logique pour la modale --}}
    <div x-data="{
            showConfirmModal: false,
            vehicleToDelete: {},
            deleteFormUrl: '',
            openDeleteModal(event) {
                const button = event.currentTarget;
                this.vehicleToDelete = JSON.parse(button.dataset.vehicle);
                this.deleteFormUrl = button.dataset.url;
                this.showConfirmModal = true;
            }
        }"
         class="py-12">

        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            {{-- Section des Filtres et de la Recherche --}}
            <div class="mb-6 bg-white p-4 shadow-sm sm:rounded-lg">
                <form action="{{ route('admin.vehicles.index') }}" method="GET">
                    <div class="flex flex-col md:flex-row md:items-end md:space-x-4 space-y-2 md:space-y-0">
                        <div class="flex-grow">
                            <label for="search" class="block text-sm font-medium text-gray-700">Recherche</label>
                            <input type="text" name="search" id="search" value="{{ $filters['search'] ?? '' }}" placeholder="Immat, marque, modèle..." class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                        </div>
                        <div class="flex-shrink-0">
                            <label for="status_id" class="block text-sm font-medium text-gray-700">Statut</label>
                            <select name="status_id" id="status_id" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                                <option value="">Tous</option>
                                @foreach($vehicleStatuses as $status)
                                    <option value="{{ $status->id }}" @selected(($filters['status_id'] ?? '') == $status->id)>{{ $status->name }}</option>
                                @endforeach
                            </select>
                        </div>
                        <div class="flex-shrink-0">
                            <label for="per_page" class="block text-sm font-medium text-gray-700">Par page</label>
                            <select name="per_page" id="per_page" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                                @foreach(['10', '20', '50', '100'] as $value)
                                    <option value="{{ $value }}" @selected(($filters['per_page'] ?? '15') == $value)>{{ $value }}</option>
                                @endforeach
                            </select>
                        </div>
                        {{--///////////___________________affichage des vehicules archivés   --}}
                        <div>
                            <label for="view_deleted" class="block text-sm font-medium text-gray-700">Affichage</label>
                            <select name="view_deleted" id="view_deleted" onchange="this.form.submit()" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                                <option value="">Actifs</option>
                                <option value="true" @selected(request('view_deleted'))>Archivés</option>
                            </select>
                        </div>
                       {{--//////////____________________--}}
                        <div class="flex-shrink-0 flex space-x-2">
                            <button type="submit" class="inline-flex items-center justify-center w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700">Filtrer</button>
                            <a href="{{ route('admin.vehicles.index') }}" class="inline-flex items-center justify-center w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Reset</a>
                        </div>
                    </div>
                </form>
            </div>

            @if (session('success'))
                <div class="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4" role="alert">
                    <p class="font-bold">{{ session('success') }}</p>
                </div>
            @endif

            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-700">{{ __('Liste des Véhicules') }}</h3>
                        <div class="flex space-x-2">
                            @can('create vehicles')
                                <a href="{{ route('admin.vehicles.import.show') }}" class="inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path></svg>
                                    Importer
                                </a>
                                <a href="{{ route('admin.vehicles.create') }}" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                    <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                                    Ajouter
                                </a>
                            @endcan
                        </div>
                    </div>

                    <div class="overflow-x-auto border border-gray-200 rounded-lg">
                        <table class="w-full divide-y divide-gray-200">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Immatriculation</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Marque & Modèle</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Kilométrage</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Statut</th>
                                    <th scope="col" class="px-6 py-3 text-right text-xs font-bold text-gray-600 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @forelse ($vehicles as $vehicle)
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-3 whitespace-nowrap text-sm font-mono text-gray-900">{{ $vehicle->registration_plate }}</td>
                                        <td class="px-6 py-3 whitespace-nowrap text-sm text-gray-800">{{ $vehicle->brand }}  {{ $vehicle->model }}</td>
                                        <td class="px-6 py-3 whitespace-nowrap text-sm text-gray-500">{{ number_format($vehicle->current_mileage, 0, ',', ' ') }} km</td>
                                        <td class="px-6 py-3 whitespace-nowrap text-sm">
                                            @php
                                                $statusName = $vehicle->vehicleStatus?->name ?? 'Indéfini';
                                                $statusClass = 'bg-gray-100 text-gray-800'; // Default
                                                if ($vehicle->trashed()) {
                                                    $statusName = 'Archivé';
                                                    $statusClass = 'bg-gray-200 text-gray-600';
                                                } else {
                                                    switch ($statusName) {
                                                        case 'En service': $statusClass = 'bg-green-100 text-green-800'; break;
                                                        case 'En mission': $statusClass = 'bg-blue-100 text-blue-800'; break; // <-- AJOUT
                                                        case 'En maintenance': $statusClass = 'bg-yellow-100 text-yellow-800'; break;
                                                        case 'Hors service': $statusClass = 'bg-red-100 text-red-800'; break;
                                                    }
                                                }
                                            @endphp
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {{ $statusClass }}">{{ $statusName }}</span>
                                        </td>

                                        {{--___________BOUTONS ACTION_________--}}
                                        <td>
                                         {{--///////////////////DEBUT BOUTONS EDIT SUPP ///////--}}
                                            <div class="flex items-center justify-end space-x-2">
                                                 @if ($vehicle->trashed())
                                                    @can('restore vehicles')
                                                        <form method="POST" action="{{ route('admin.vehicles.restore', $vehicle->id) }}">
                                                            @csrf @method('PATCH')
                                                            <button type="submit" title="Restaurer" class="p-2 rounded-full text-gray-400 hover:bg-green-100 hover:text-green-600">
                                                                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1"><path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h5M7 9a8.25 8.25 0 0110.61 2.61M20 20v-5h-5M17 15a8.25 8.25 0 01-10.61-2.61" /></svg>
                                                            </button>
                                                        </form>
                                                     @endcan
                                                     @can('force delete vehicles')
                                                        <button type="button" @click="openDeleteModal($event, true)" data-vehicle='@json($vehicle->only(['id', 'first_name', 'last_name']))' data-url="{{ route('admin.vehicles.force-delete', $vehicle->id) }}" title="Supprimer Définitivement" class="p-2 rounded-full text-gray-400 hover:bg-red-100 hover:text-red-600">
                                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1"><path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                                                        </button>
                                                    @endcan
                                                @else
                                                    @can('edit vehicles')
                                                        <a href="{{ route('admin.vehicles.edit', $vehicle) }}" title="Modifier" class="p-2 rounded-full text-gray-400 hover:bg-violet-100 hover:text-violet-600">
                                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1"><path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536L16.732 3.732z" /></svg>
                                                        </a>
                                                    @endcan
                                                    @can('delete vehicles')
                                                        <button type="button" @click="openDeleteModal($event)" data-vehicle='@json($vehicle->only(['id', 'first_name', 'last_name']))' data-url="{{ route('admin.vehicles.destroy', $vehicle->id) }}" title="Archiver" class="p-2 rounded-full text-gray-400 hover:bg-yellow-100 hover:text-yellow-600">
                                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1"><path stroke-linecap="round" stroke-linejoin="round" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4H5z" /><path stroke-linecap="round" stroke-linejoin="round" d="M19 8v10a2 2 0 01-2 2H7a2 2 0 01-2-2V8h14z" /></svg>
                                                        </button>
                                                    @endcan
                                                @endif
                                            </div>
                                        {{--///////////////////FIN BOUTONS EDIT SUPP ///////--}}
                                    </td>
                                        {{--___________FIN BOUTON ACTION__________--}}
                                    </tr>
                                @empty
                                    <tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">Aucun véhicule ne correspond à vos critères.</td></tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-6">
                        {{ $vehicles->withQueryString()->links() }}
                    </div>
                </div>
            </div>
        </div>

        {{-- Fenêtre Modale de Confirmation de Suppression --}}
        <div x-show="showConfirmModal" x-transition class="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-60" style="display: none;">
            <div @click.away="showConfirmModal = false" class="bg-white rounded-lg shadow-xl p-6 md:p-8 w-full max-w-md mx-4">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" /></svg>
                    </div>
                    <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                        <h3 class="text-base font-semibold leading-6 text-gray-900">Confirmer la Suppression</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-600">
                                Êtes-vous sûr de vouloir supprimer le véhicule <strong class="font-bold" x-text="vehicleToDelete.brand + ' ' + vehicleToDelete.model + ' (' + vehicleToDelete.registration_plate + ')'"></strong> ?
                            </p>
                            <p class="mt-1 text-sm text-gray-500">Cette action est définitive et irréversible.</p>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                    <form :action="deleteFormUrl" method="POST">
                        @csrf
                        @method('DELETE')
                        <button type="submit" class="inline-flex w-full justify-center rounded-md bg-red-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-700 sm:ml-3 sm:w-auto">
                            Confirmer
                        </button>
                    </form>
                    <button type="button" @click="showConfirmModal = false" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">
                        Annuler
                    </button>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/vehicles/index.blade.php ---


#############################################
./resources/views/admin/vehicles/import.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Importer des Véhicules') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900">
                    <h3 class="text-xl font-semibold text-gray-700 mb-2">{{ __('Importer depuis un fichier CSV') }}</h3>
                    <p class="text-sm text-gray-600 mb-6">
                        Importez une liste de véhicules en une seule fois. Le fichier doit respecter un format précis.
                    </p>

                    {{-- Section d'aide et de téléchargement du modèle --}}
                    <div class="mb-6 p-4 bg-violet-50 border border-violet-200 rounded-lg">
                        <h4 class="font-semibold text-gray-800">Instructions :</h4>
                        <ul class="list-disc list-inside text-sm text-gray-600 mt-2 space-y-1">
                            <li>Le fichier doit être au format CSV avec un encodage UTF-8.</li>
                            <li>La première ligne du fichier doit contenir les en-têtes des colonnes.</li>
                            <li>Les colonnes obligatoires sont : `registration_plate`, `brand`, `model`, `vehicle_type_name`, `fuel_type_name`, `transmission_type_name`, `status_name`.</li>
                            <li>Les valeurs pour les types et statuts (ex: "Berline", "En service") doivent correspondre exactement à celles définies dans le système.</li>
                        </ul>
                        <div class="mt-4">
                            <a href="{{ route('admin.vehicles.import.template') }}" class="inline-flex items-center text-sm font-semibold text-violet-600 hover:text-violet-800">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"></path></svg>
                                Télécharger le fichier modèle CSV
                            </a>
                        </div>
                    </div>

                    {{-- Affichage des erreurs de validation --}}
                    @if ($errors->any())
                        <div class="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                            <p class="font-bold">Erreur lors de l'upload :</p>
                            <ul class="mt-2 list-disc list-inside">
                                @foreach ($errors->all() as $error)
                                    <li>{{ $error }}</li>
                                @endforeach
                            </ul>
                        </div>
                    @endif

                    {{-- Formulaire d'upload --}}
                    <form method="POST" action="{{ route('admin.vehicles.import.handle') }}" enctype="multipart/form-data">
                        @csrf
                        <div>
                            <label for="csv_file" class="block font-medium text-sm text-gray-700">Fichier CSV à importer</label>
                            <input type="file" name="csv_file" id="csv_file" required class="block w-full text-sm text-gray-500 mt-1 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100"/>
                        </div>

                        <div class="mt-8 flex items-center justify-end gap-4">
                            <a href="{{ route('admin.vehicles.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">{{ __('Annuler') }}</a>
                            <button type="submit" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                Lancer l'Importation
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/vehicles/import.blade.php ---


#############################################
./resources/views/admin/vehicles/import-results.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Résultats de l\'Importation') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            {{-- Résumé --}}
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                {{-- Succès --}}
                <div class="bg-green-50 border-l-4 border-green-500 p-6 rounded-lg shadow-sm">
                    <div class="flex items-center">
                        <div class="flex-shrink-0 bg-green-100 rounded-full p-2">
                            <svg class="h-6 w-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path></svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-lg font-bold text-green-800">{{ $successCount }} {{ Str::plural('véhicule', $successCount) }} importé(s)</p>
                            <p class="text-sm text-green-700">avec succès.</p>
                        </div>
                    </div>
                </div>
                {{-- Échecs --}}
                <div class="bg-red-50 border-l-4 border-red-500 p-6 rounded-lg shadow-sm">
                     <div class="flex items-center">
                        <div class="flex-shrink-0 bg-red-100 rounded-full p-2">
                            <svg class="h-6 w-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path></svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-lg font-bold text-red-800">{{ count($errorRows) }} {{ Str::plural('ligne', count($errorRows)) }} en erreur</p>
                            <p class="text-sm text-red-700">voir les détails ci-dessous.</p>
                        </div>
                    </div>
                </div>
            </div>

            {{-- Détail des Erreurs --}}
            @if(count($errorRows) > 0)
                <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                    <div class="p-6">
                        <h3 class="text-lg font-semibold text-gray-700 mb-4">Détail des Lignes en Erreur</h3>
                        <div class="overflow-x-auto border border-gray-200 rounded-lg">
                            <table class="w-full">
                                <thead class="bg-gray-100">
                                    <tr>
                                        <th class="px-4 py-2 text-left text-xs font-bold text-gray-600 uppercase">Ligne CSV</th>
                                        <th class="px-4 py-2 text-left text-xs font-bold text-gray-600 uppercase">Données Fournies</th>
                                        <th class="px-4 py-2 text-left text-xs font-bold text-gray-600 uppercase">Problèmes de Validation</th>
                                    </tr>
                                </thead>
                                <tbody class="divide-y divide-gray-200">
                                    @foreach($errorRows as $errorRow)
                                        <tr class="bg-white">
                                            <td class="px-4 py-3 text-sm font-medium text-center text-gray-900">{{ $errorRow['row_number'] }}</td>
                                            <td class="px-4 py-3 text-sm text-gray-500">
                                                <pre class="bg-gray-100 p-2 rounded text-xs overflow-x-auto"><code>{{ json_encode($errorRow['data'], JSON_PRETTY_PRINT | JSON_UNESCAPED_UNICODE) }}</code></pre>
                                            </td>
                                            <td class="px-4 py-3 text-sm text-red-600">
                                                <ul class="list-disc list-inside space-y-1">
                                                    @foreach($errorRow['errors'] as $error)
                                                        <li>{{ $error }}</li>
                                                    @endforeach
                                                </ul>
                                            </td>
                                        </tr>
                                    @endforeach
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            @endif

            <div class="mt-8 text-center">
                <a href="{{ route('admin.vehicles.index') }}" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                    Retour à la liste des véhicules
                </a>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/vehicles/import-results.blade.php ---


#############################################
./resources/views/admin/maintenance/plans/create.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Programmer un Plan de Maintenance') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <script>
                    // On prépare les données PHP pour les rendre accessibles à notre script Alpine.js
                    const vehiclesData = @json($vehicles->keyBy('id')->map->only('current_mileage'));
                    const recurrenceUnitsData = @json($recurrenceUnits);
                </script>

                <div class="p-8 text-gray-900"
                     x-data="{
                        selectedVehicleId: '{{ old('vehicle_id') }}',
                        selectedRecurrenceUnitId: '{{ old('recurrence_unit_id') }}',
                        recurrenceValue: {{ old('recurrence_value', 10000) }},
                        currentMileageText: 'N/A',
                        recurrenceUnitName: '',

                        init() {
                            this.updateAllDisplays();
                            // Initialisation des sélecteurs TomSelect
                            let tomVehicle = new TomSelect('#select-vehicle', {create: false});
                            let tomMaintenance = new TomSelect('#select-maintenance-type', {create: false});

                            // Synchroniser Alpine avec TomSelect pour les véhicules
                            tomVehicle.on('change', (value) => { this.selectedVehicleId = value; this.updateAllDisplays(); });
                            if(this.selectedVehicleId) { tomVehicle.setValue(this.selectedVehicleId, true); }
                        },
                        updateAllDisplays() {
                            this.updateMileageDisplay();
                            this.updateRecurrenceUnitNameDisplay();
                            this.calculateAndSetDueDate();
                        },
                        updateMileageDisplay() {
                            const vehicle = vehiclesData[this.selectedVehicleId];
                            this.currentMileageText = vehicle ? new Intl.NumberFormat('fr-FR').format(vehicle.current_mileage) + ' km' : 'N/A';
                        },
                        updateRecurrenceUnitNameDisplay() {
                            const unit = recurrenceUnitsData.find(u => u.id == this.selectedRecurrenceUnitId);
                            this.recurrenceUnitName = unit ? unit.name : '';
                        },
                        calculateAndSetDueDate() {
                            if (this.recurrenceUnitName === 'Kilomètres') {
                                const vehicle = vehiclesData[this.selectedVehicleId];
                                const mileageInput = document.getElementById('next_due_mileage');
                                if (vehicle && mileageInput && this.recurrenceValue > 0) {
                                    mileageInput.value = parseInt(vehicle.current_mileage) + parseInt(this.recurrenceValue);
                                }
                            }
                        }
                     }"
                     x-init="init()">

                    <h3 class="text-xl font-semibold text-gray-700 mb-6">Nouveau Plan de Maintenance Préventive</h3>

                    @if ($errors->any())
                        <div class="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                            <p class="font-bold">Veuillez corriger les erreurs :</p>
                            <ul class="mt-2 list-disc list-inside">@foreach ($errors->all() as $error)<li>{{ $error }}</li>@endforeach</ul>
                        </div>
                    @endif

                    <form method="POST" action="{{ route('admin.maintenance.plans.store') }}">
                        @csrf
                        <div class="space-y-6">
                            <div>
                                <label for="select-vehicle" class="block font-medium text-sm text-gray-700">Véhicule <span class="text-red-500">*</span></label>
                                <select name="vehicle_id" id="select-vehicle" required>
                                    <option value="">Sélectionnez un véhicule</option>
                                    @foreach($vehicles as $vehicle)
                                        <option value="{{ $vehicle->id }}">{{ $vehicle->brand }} {{ $vehicle->model }} ({{ $vehicle->registration_plate }})</option>
                                    @endforeach
                                </select>
                            </div>
                            <div>
                                <label for="select-maintenance-type" class="block font-medium text-sm text-gray-700">Type de Maintenance <span class="text-red-500">*</span></label>
                                <select name="maintenance_type_id" id="select-maintenance-type" placeholder="Rechercher un type..." required>
                                    <option value="">Sélectionnez un type</option>
                                    @foreach($maintenanceTypes as $type)
                                        <option value="{{ $type->id }}" @selected(old('maintenance_type_id') == $type->id)>{{ $type->name }}</option>
                                    @endforeach
                                </select>
                            </div>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label for="recurrence_value" class="block font-medium text-sm text-gray-700">Répéter tous les <span class="text-red-500">*</span></label>
                                    <input type="number" name="recurrence_value" id="recurrence_value" x-model.number="recurrenceValue" @input.debounce.500ms="calculateAndSetDueDate()" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm" required>
                                </div>
                                <div>
                                    <label for="recurrence_unit_id" class="block font-medium text-sm text-gray-700">Unité <span class="text-red-500">*</span></label>
                                    <select name="recurrence_unit_id" id="recurrence_unit_id" x-model="selectedRecurrenceUnitId" @change="updateRecurrenceUnitNameDisplay(); calculateAndSetDueDate();" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm" required>
                                        <option value="">Sélectionnez</option>
                                        @foreach($recurrenceUnits as $unit)
                                            <option value="{{ $unit->id }}">{{ $unit->name }}</option>
                                        @endforeach
                                    </select>
                                </div>
                            </div>

                            <div x-show="recurrenceUnitName === 'Jours' || recurrenceUnitName === 'Mois'" style="display: none;" x-transition>
                                <label for="next_due_date" class="block font-medium text-sm text-gray-700">Prochaine Échéance (Date)</label>
                                <p class="text-xs text-gray-500">Laissez vide pour un calcul automatique.</p>
                                <input type="date" name="next_due_date" id="next_due_date" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                            </div>
                            <div x-show="recurrenceUnitName === 'Kilomètres'" style="display: none;" x-transition>
                                <label for="next_due_mileage" class="block font-medium text-sm text-gray-700">Prochaine Échéance (Kilométrage)</label>
                                <p class="mt-1 text-xs text-gray-500">Référence (km actuel) : <span class="font-semibold" x-text="currentMileageText"></span></p>
                                <input type="number" name="next_due_mileage" id="next_due_mileage" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                            </div>
                            {{-- AJOUT DU CHAMP NOTES --}}
                            <div>
                                <label for="notes" class="block font-medium text-sm text-gray-700">Notes / Instructions</label>
                                <textarea name="notes" id="notes" rows="3" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">{{ old('notes') }}</textarea>
                            </div>
                        </div>

                        <div class="mt-8 flex items-center justify-end gap-4 border-t border-gray-200 pt-6">
                            <a href="{{ route('admin.maintenance.plans.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Annuler</a>
                            <button type="submit" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">Enregistrer le Plan</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/maintenance/plans/create.blade.php ---


#############################################
./resources/views/admin/maintenance/plans/index.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Plans de Maintenance Préventive') }}
        </h2>
    </x-slot>

    {{-- SOLUTION AMÉLIORÉE : Injection des données avant l'initialisation d'Alpine.js --}}
    <script>
        // Données injectées de manière sécurisée
        window.maintenancePlansData = {!! json_encode($plansForJs, JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT) !!};
        window.recurrenceUnits = {!! json_encode($recurrenceUnits->keyBy('id'), JSON_HEX_TAG | JSON_HEX_APOS | JSON_HEX_AMP | JSON_HEX_QUOT) !!};
        
        // Définition UNIQUE du composant Alpine.js
        document.addEventListener('alpine:init', () => {
            Alpine.data('maintenancePlansPage', () => ({
                // État des modales
                showEditModal: false,
                showLogModal: false,
                
                // Données des plans
                plans: window.maintenancePlansData || {},
                recurrenceUnits: window.recurrenceUnits || {},
                
                // Plan en cours d'édition/logging
                planToEdit: {},
                planToLog: {},
                
                // URLs des formulaires
                editFormUrl: '',
                logFormUrl: '',

                // Initialisation des composants
                init() {
                    this.$nextTick(() => {
                        this.initTomSelect();
                    });
                },

                // Initialisation de TomSelect
                initTomSelect() {
                    if (window.TomSelect && this.$refs.vehicleFilter) {
                        new TomSelect(this.$refs.vehicleFilter, { 
                            create: false, 
                            placeholder: 'Rechercher un véhicule...' 
                        });
                    }
                    if (window.TomSelect && this.$refs.typeFilter) {
                        new TomSelect(this.$refs.typeFilter, { 
                            create: false, 
                            placeholder: 'Rechercher un type...' 
                        });
                    }
                },

                // Ouverture de la modale d'édition
                openEditModal(planId) {
                    const plan = this.plans[planId];
                    if (!plan) {
                        console.error('Plan non trouvé:', planId);
                        return;
                    }
                    
                    // Crée une copie profonde pour l'édition
                    this.planToEdit = JSON.parse(JSON.stringify(plan));
                    
                    // S'assurer que l'unité de récurrence est correctement définie
                    if (!this.planToEdit.recurrence_unit_id && plan.recurrence_unit_id) {
                        this.planToEdit.recurrence_unit_id = plan.recurrence_unit_id;
                    }
                    
                    this.editFormUrl = `/admin/maintenance/plans/${planId}`;
                    this.showEditModal = true;
                },

                // Ouverture de la modale de logging
                openLogModal(planId) {
                    const plan = this.plans[planId];
                    if (!plan) {
                        console.error('Plan non trouvé:', planId);
                        return;
                    }
                    
                    // Crée une copie profonde pour le logging
                    this.planToLog = JSON.parse(JSON.stringify(plan));
                    this.logFormUrl = '/admin/maintenance/logs';
                    this.showLogModal = true;
                },

                // Fermeture des modales
                closeEditModal() {
                    this.showEditModal = false;
                    this.planToEdit = {};
                    this.editFormUrl = '';
                },

                closeLogModal() {
                    this.showLogModal = false;
                    this.planToLog = {};
                    this.logFormUrl = '';
                },

                // Met à jour le nom de l'unité quand l'ID change dans la modale d'édition
                updateEditRecurrenceUnitName() {
                    const unit = this.recurrenceUnits[this.planToEdit.recurrence_unit_id];
                    if (unit) {
                        if (!this.planToEdit.recurrence_unit) {
                            this.planToEdit.recurrence_unit = {};
                        }
                        this.planToEdit.recurrence_unit.name = unit.name;
                    }
                },

                // Obtient le nom de l'unité de récurrence pour l'affichage
                getRecurrenceUnitName(unitId) {
                    const unit = this.recurrenceUnits[unitId];
                    return unit ? unit.name : '';
                },

                // Formate le kilométrage avec des espaces
                formatMileage(mileage) {
                    if (!mileage) return '0';
                    return new Intl.NumberFormat('fr-FR').format(mileage);
                },

                // Soumission du formulaire d'édition
                submitEditForm() {
                    if (this.editFormUrl && this.$refs.editForm) {
                        this.$refs.editForm.submit();
                    }
                },

                // Soumission du formulaire de logging
                submitLogForm() {
                    if (this.logFormUrl && this.$refs.logForm) {
                        this.$refs.logForm.submit();
                    }
                }
            }));
        });
    </script>

    <div x-data="maintenancePlansPage" x-init="init()" class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            {{-- Section des Filtres --}}
            <div class="mb-6 bg-white p-4 shadow-sm sm:rounded-lg">
                <form action="{{ route('admin.maintenance.plans.index') }}" method="GET">
                    <div class="flex flex-col md:flex-row md:items-end md:space-x-4 space-y-2 md:space-y-0">
                        <div class="flex-grow">
                            <label for="select-vehicle-filter" class="block text-sm font-medium text-gray-700">Filtrer par Véhicule</label>
                            <select x-ref="vehicleFilter" name="vehicle_id" class="mt-1">
                                <option value="">Tous les véhicules</option>
                                @foreach($vehicles as $vehicle)
                                    <option value="{{ $vehicle->id }}" @selected(($filters['vehicle_id'] ?? '') == $vehicle->id)>
                                        {{ $vehicle->brand }} {{ $vehicle->model }} ({{ $vehicle->registration_plate }})
                                    </option>
                                @endforeach
                            </select>
                        </div>
                        <div class="flex-grow">
                            <label for="select-maintenance-type-filter" class="block text-sm font-medium text-gray-700">Filtrer par Type</label>
                            <select x-ref="typeFilter" name="maintenance_type_id" class="mt-1">
                                <option value="">Tous les types</option>
                                @foreach($maintenanceTypes as $type)
                                    <option value="{{ $type->id }}" @selected(($filters['maintenance_type_id'] ?? '') == $type->id)>{{ $type->name }}</option>
                                @endforeach
                            </select>
                        </div>
                        <div class="flex-shrink-0 flex space-x-2">
                            <button type="submit" class="inline-flex items-center justify-center w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700">Filtrer</button>
                            <a href="{{ route('admin.maintenance.plans.index') }}" class="inline-flex items-center justify-center w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Reset</a>
                        </div>
                    </div>
                </form>
            </div>

            @if (session('success'))
                <div class="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4" role="alert">
                    <p class="font-bold">{{ session('success') }}</p>
                </div>
            @endif

            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-700">Tous les Plans Programmés</h3>
                        @can('manage maintenance plans')
                            <a href="{{ route('admin.maintenance.plans.create') }}" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                Ajouter un Plan
                            </a>
                        @endcan
                    </div>

                    <div class="overflow-x-auto border border-gray-200 rounded-lg">
                        <table class="w-full divide-y divide-gray-200">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase">Véhicule</th>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase">Plan</th>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase">Échéance</th>
                                    <th class="px-6 py-3 text-right text-xs font-bold text-gray-600 uppercase">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @forelse ($plans as $plan)
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-3">
                                            <div class="text-sm font-medium text-gray-900">{{ $plan->vehicle?->brand }} {{ $plan->vehicle?->model }}</div>
                                            <div class="text-xs text-gray-500 font-mono">{{ $plan->vehicle?->registration_plate }}</div>
                                        </td>
                                        <td class="px-6 py-3">
                                            <div class="text-sm text-gray-800">{{ $plan->maintenanceType?->name }}</div>
                                            <div class="text-xs text-gray-500">Tous les {{ $plan->recurrence_value }} {{ $plan->recurrenceUnit?->name }}</div>
                                        </td>
                                        <td class="px-6 py-3 whitespace-nowrap text-sm">
                                            @php
                                                $isDateOverdue = $plan->next_due_date && $plan->next_due_date->isPast();
                                                $isMileageOverdue = $plan->next_due_mileage && $plan->vehicle?->current_mileage >= $plan->next_due_mileage;
                                                $isUrgent = $plan->next_due_date && !$isDateOverdue && $plan->next_due_date->isBefore(now()->addDays(30));
                                                $overdueClass = 'text-red-600 font-bold';
                                                $urgentClass = 'text-orange-600 font-semibold';
                                                $defaultClass = 'text-gray-600';
                                            @endphp

                                            @if($plan->next_due_date)
                                                <div class="{{ $isDateOverdue ? $overdueClass : ($isUrgent ? $urgentClass : $defaultClass) }}">
                                                    {{ $plan->next_due_date->format('d/m/Y') }}
                                                    @if($isDateOverdue) <span class="text-xs">(Dépassé)</span> @endif
                                                    @if($isUrgent) <span class="text-xs">(Urgent)</span> @endif
                                                </div>
                                            @endif
                                            @if($plan->next_due_mileage)
                                                <div class="text-xs {{ $isMileageOverdue ? $overdueClass : 'text-gray-500' }}">
                                                    (à {{ number_format($plan->next_due_mileage, 0, ',', ' ') }} km)
                                                    @if($isMileageOverdue) <span class="font-bold">(Dépassé)</span> @endif
                                                </div>
                                            @endif
                                        </td>
                                        <td class="px-6 py-3 whitespace-nowrap text-right text-sm font-medium">
                                            <div class="flex items-center justify-end space-x-2">
                                                @can('log maintenance')
                                                    <button type="button" @click="openLogModal({{ $plan->id }})" title="Enregistrer une intervention" class="p-2 rounded-full text-gray-400 hover:bg-green-100 hover:text-green-600">
                                                        <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                                                        </svg>
                                                    </button>
                                                @endcan
                                                @can('manage maintenance plans')
                                                    <button type="button" @click="openEditModal({{ $plan->id }})" title="Modifier le plan" class="p-2 rounded-full text-gray-400 hover:bg-violet-100 hover:text-violet-600">
                                                        <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                                                            <path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536L16.732 3.732z" />
                                                        </svg>
                                                    </button>
                                                @endcan
                                            </div>
                                        </td>
                                    </tr>
                                @empty
                                    <tr>
                                        <td colspan="4" class="px-6 py-4 text-center text-sm text-gray-500">Aucun plan de maintenance trouvé.</td>
                                    </tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-6 px-6 pb-6">{{ $plans->withQueryString()->links() }}</div>
                </div>
            </div>
        </div>

        {{-- Modale pour Modifier un Plan --}}
        <div x-show="showEditModal" 
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform scale-90"
             x-transition:enter-end="opacity-100 transform scale-100"
             x-transition:leave="transition ease-in duration-200"
             x-transition:leave-start="opacity-100 transform scale-100"
             x-transition:leave-end="opacity-0 transform scale-90"
             class="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-60" 
             style="display: none;">
            <div @click.away="closeEditModal()" class="bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">
                        Modifier le Plan #<span x-text="planToEdit.id"></span>
                    </h3>
                    <button @click="closeEditModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                {{-- Informations du véhicule --}}
                <div class="mb-4 p-3 bg-blue-50 border border-blue-200 rounded-md">
                    <div class="flex items-center">
                        <svg class="h-5 w-5 text-blue-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <div class="text-sm">
                            <span class="font-medium text-blue-900">
                                <span x-text="planToEdit.vehicle?.brand"></span> 
                                <span x-text="planToEdit.vehicle?.model"></span>
                                (<span x-text="planToEdit.vehicle?.registration_plate"></span>)
                            </span>
                            <span class="text-blue-700 ml-2">
                                • Kilométrage actuel : <span x-text="formatMileage(planToEdit.vehicle?.current_mileage)"></span> km
                            </span>
                        </div>
                    </div>
                </div>

                <form x-ref="editForm" :action="editFormUrl" method="POST" class="space-y-4">
                    @csrf
                    @method('PATCH')

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Type de Maintenance</label>
                            <div class="mt-1 p-2 bg-gray-50 rounded-md text-sm text-gray-600">
                                <span x-text="planToEdit.maintenance_type?.name"></span>
                            </div>
                        </div>

                        <div>
                            <label for="edit_recurrence_value" class="block text-sm font-medium text-gray-700">Valeur de Récurrence <span class="text-red-500">*</span></label>
                            <input id="edit_recurrence_value" 
                                   type="number" 
                                   name="recurrence_value" 
                                   x-model="planToEdit.recurrence_value"
                                   min="1" 
                                   required 
                                   class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                        </div>

                        <div class="md:col-span-2">
                            <label for="edit_recurrence_unit_id" class="block text-sm font-medium text-gray-700">Unité de Récurrence <span class="text-red-500">*</span></label>
                            <select id="edit_recurrence_unit_id" 
                                    name="recurrence_unit_id" 
                                    x-model="planToEdit.recurrence_unit_id"
                                    @change="updateEditRecurrenceUnitName()"
                                    required 
                                    class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                <option value="">Sélectionner une unité</option>
                                @foreach($recurrenceUnits as $unit)
                                    <option value="{{ $unit->id }}">{{ $unit->name }}</option>
                                @endforeach
                            </select>
                        </div>

                        <div>
                            <label for="edit_next_due_date" class="block text-sm font-medium text-gray-700">Prochaine Échéance (Date)</label>
                            <input id="edit_next_due_date" 
                                   type="date" 
                                   name="next_due_date" 
                                   x-model="planToEdit.next_due_date"
                                   class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                        </div>

                        <div>
                            <label for="edit_next_due_mileage" class="block text-sm font-medium text-gray-700">Prochaine Échéance (Kilométrage)</label>
                            <input id="edit_next_due_mileage" 
                                   type="number" 
                                   name="next_due_mileage" 
                                   x-model="planToEdit.next_due_mileage"
                                   min="0" 
                                   class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                        </div>
                    </div>

                    <div>
                        <label for="edit_notes" class="block text-sm font-medium text-gray-700">Notes</label>
                        <textarea id="edit_notes" 
                                  name="notes" 
                                  x-model="planToEdit.notes"
                                  rows="3" 
                                  maxlength="2000"
                                  class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm"></textarea>
                    </div>

                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" @click="closeEditModal()" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700">
                            Mettre à jour
                        </button>
                    </div>
                </form>
            </div>
        </div>

        {{-- Modale pour Enregistrer une Intervention --}}
        <div x-show="showLogModal" 
             x-transition:enter="transition ease-out duration-300"
             x-transition:enter-start="opacity-0 transform scale-90"
             x-transition:enter-end="opacity-100 transform scale-100"
             x-transition:leave="transition ease-in duration-200"
             x-transition:leave-start="opacity-100 transform scale-100"
             x-transition:leave-end="opacity-0 transform scale-90"
             class="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-60" 
             style="display: none;">
            <div @click.away="closeLogModal()" class="bg-white rounded-lg shadow-xl p-6 w-full max-w-2xl mx-4 max-h-[90vh] overflow-y-auto">
                <div class="sm:flex sm:items-start mb-4">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-green-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-green-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                    </div>
                    <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left flex-grow">
                        <h3 class="text-lg font-semibold leading-6 text-gray-900">Enregistrer une Intervention</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-600">
                                Intervention de type <strong x-text="planToLog.maintenance_type?.name"></strong> 
                                pour le véhicule <strong x-text="planToLog.vehicle?.registration_plate"></strong>.
                            </p>
                        </div>
                    </div>
                    <button @click="closeLogModal()" class="text-gray-400 hover:text-gray-600">
                        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                        </svg>
                    </button>
                </div>

                {{-- Informations du véhicule --}}
                <div class="mb-4 p-3 bg-green-50 border border-green-200 rounded-md">
                    <div class="flex items-center">
                        <svg class="h-5 w-5 text-green-600 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17a2 2 0 11-4 0 2 2 0 014 0zM19 17a2 2 0 11-4 0 2 2 0 014 0z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16V6a1 1 0 00-1-1H4a1 1 0 00-1 1v10a1 1 0 001 1h1m8-1a1 1 0 01-1 1H9m4-1V8a1 1 0 011-1h2.586a1 1 0 01.707.293l2.414 2.414a1 1 0 01.293.707V16a1 1 0 01-1 1h-1m-6-1a1 1 0 001 1h1M5 17a2 2 0 104 0M15 17a2 2 0 104 0" />
                        </svg>
                        <div class="text-sm">
                            <span class="font-medium text-green-900">
                                <span x-text="planToLog.vehicle?.brand"></span> 
                                <span x-text="planToLog.vehicle?.model"></span>
                                (<span x-text="planToLog.vehicle?.registration_plate"></span>)
                            </span>
                            <span class="text-green-700 ml-2">
                                • Kilométrage actuel : <span x-text="formatMileage(planToLog.vehicle?.current_mileage)"></span> km
                            </span>
                        </div>
                    </div>
                </div>

                <form x-ref="logForm" :action="logFormUrl" method="POST" class="space-y-4">
                    @csrf
                    {{-- Champs cachés pour passer les IDs nécessaires au contrôleur --}}
                    <input type="hidden" name="maintenance_plan_id" x-model="planToLog.id">
                    <input type="hidden" name="vehicle_id" x-model="planToLog.vehicle_id">
                    <input type="hidden" name="maintenance_type_id" x-model="planToLog.maintenance_type_id">

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label for="performed_on_date" class="block font-medium text-sm text-gray-700">Date de l'intervention <span class="text-red-500">*</span></label>
                            <input id="performed_on_date" 
                                   type="date" 
                                   name="performed_on_date" 
                                   value="{{ now()->format('Y-m-d') }}" 
                                   required 
                                   class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                        </div>

                        <div>
                            <label for="performed_at_mileage" class="block font-medium text-sm text-gray-700">Kilométrage lors de l'intervention <span class="text-red-500">*</span></label>
                            <input id="performed_at_mileage" 
                                   type="number" 
                                   name="performed_at_mileage" 
                                   x-model="planToLog.vehicle?.current_mileage"
                                   required 
                                   class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                        </div>

                        <div>
                            <label for="cost" class="block font-medium text-sm text-gray-700">Coût (DA)</label>
                            <input id="cost" 
                                   type="number" 
                                   name="cost" 
                                   step="0.01" 
                                   class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                        </div>

                        <div>
                            <label for="performed_by" class="block font-medium text-sm text-gray-700">Réalisé par (ex: Garage ABC)</label>
                            <input id="performed_by" 
                                   type="text" 
                                   name="performed_by" 
                                   class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                        </div>
                    </div>

                    <div>
                        <label for="details" class="block font-medium text-sm text-gray-700">Détails de l'intervention / Notes</label>
                        <textarea name="details" 
                                  id="details" 
                                  rows="3" 
                                  class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm"></textarea>
                    </div>

                    <div class="flex justify-end space-x-3 pt-4">
                        <button type="button" @click="closeLogModal()" class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                            Annuler
                        </button>
                        <button type="submit" class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700">
                            Enregistrer l'Intervention
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/maintenance/plans/index.blade.php ---


#############################################
./resources/views/admin/maintenance/dashboard.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Tableau de Bord de la Maintenance') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            {{-- SECTION DES STATISTIQUES CLÉS --}}
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">
                {{-- Carte État de la Flotte --}}
                <div class="bg-white overflow-hidden shadow-sm rounded-lg col-span-1 md:col-span-2 p-6">
                    <h3 class="text-lg font-semibold text-gray-800 mb-4">État Actuel de la Flotte</h3>
                    <div id="fleet-status-chart"></div>
                </div>
                {{-- Cartes KPI --}}
                <div class="bg-white overflow-hidden shadow-sm rounded-lg p-6 flex flex-col justify-center">
                    <h4 class="text-sm font-medium text-gray-500">Maintenance Urgente</h4>
                    <p class="mt-1 text-3xl font-semibold text-orange-600">{{ $urgentPlans->count() }}</p>
                    <p class="text-xs text-gray-500">Plans nécessitant une attention</p>
                </div>
                 <div class="bg-white overflow-hidden shadow-sm rounded-lg p-6 flex flex-col justify-center">
                    <h4 class="text-sm font-medium text-gray-500">Total Véhicules</h4>
                    <p class="mt-1 text-3xl font-semibold text-violet-600">{{ $vehicleStats->sum() }}</p>
                    <p class="text-xs text-gray-500">actifs dans la flotte</p>
                </div>
            </div>

            {{-- SECTION DES JAUGES D'URGENCE --}}
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    <h3 class="text-xl font-semibold text-gray-700 mb-4">Échéances de Maintenance Prioritaires</h3>
                    @if($urgentPlans->isEmpty())
                        <div class="text-center py-8 text-gray-500">Aucune maintenance urgente à signaler.</div>
                    @else
                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            @foreach($urgentPlans as $plan)
                                <div class="border rounded-lg p-4 flex flex-col">
                                    <div class="text-center">
                                        {{-- Placeholder pour la jauge ApexCharts --}}
                                        <div id="gauge-{{ $plan['id'] }}"></div>
                                    </div>
                                    <div class="mt-2 text-center">
                                        <p class="font-semibold text-gray-800">{{ $plan['vehicle_name'] }}</p>
                                        <p class="text-sm text-gray-600">{{ $plan['maintenance_type'] }}</p>
                                        <p class="text-xs font-mono text-gray-500">{{ $plan['plate'] }}</p>
                                        <p class="mt-2 text-sm font-bold {{ $plan['urgency_percent'] >= 90 ? 'text-red-600' : 'text-gray-700' }}">
                                            Échéance : {{ $plan['next_due'] }}
                                        </p>
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    @endif
                </div>
            </div>

        </div>
    </div>

    @push('scripts')
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        if (window.ApexCharts) {
            // --- Configuration du Graphique Circulaire (Donut) ---
            const fleetStatusData = @json($vehicleStats);
            const donutOptions = {
                series: Object.values(fleetStatusData),
                labels: Object.keys(fleetStatusData),
                chart: { type: 'donut', height: 250 },
                colors: ['#10B981', '#F59E0B', '#6D28D9', '#EF4444', '#6B7280'], // Vert, Orange, Violet, Rouge, Gris
                legend: { position: 'bottom' },
                responsive: [{ breakpoint: 480, options: { chart: { width: 200 }, legend: { position: 'bottom' } } }]
            };
            new ApexCharts(document.querySelector("#fleet-status-chart"), donutOptions).render();

            // --- Configuration des Jauges Radiales ---
            const urgentPlansData = @json($urgentPlans);
            urgentPlansData.forEach(plan => {
                const gaugeOptions = {
                    series: [plan.urgency_percent],
                    chart: { type: 'radialBar', height: 200, sparkline: { enabled: true } },
                    plotOptions: {
                        radialBar: {
                            startAngle: -90,
                            endAngle: 90,
                            hollow: { margin: 5, size: '60%' },
                            track: { background: '#e7e7e7', strokeWidth: '97%' },
                            dataLabels: {
                                name: { show: false },
                                value: { offsetY: -2, fontSize: '22px' }
                            }
                        }
                    },
                    grid: { padding: { top: -10 } },
                    fill: {
                        type: 'gradient',
                        gradient: {
                            shade: 'light',
                            type: 'horizontal',
                            shadeIntensity: 0.5,
                            gradientToColors: [plan.urgency_percent > 85 ? '#EF4444' : '#F59E0B'], // Rouge si > 85%, sinon Orange
                            inverseColors: false,
                            opacityFrom: 1,
                            opacityTo: 1,
                            stops: [0, 100]
                        },
                    },
                    labels: ['Progression'],
                };
                new ApexCharts(document.querySelector(`#gauge-${plan.id}`), gaugeOptions).render();
            });
        }
    });
    </script>
    @endpush
</x-app-layout>

--- END OF FILE: ./resources/views/admin/maintenance/dashboard.blade.php ---


#############################################
./resources/views/admin/drivers/create.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Ajouter un Nouveau Chauffeur') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900" x-data="{ currentStep: {{ old('current_step', 1) }} }" x-init="
                    @if ($errors->any())
                        let errors = {{ json_encode($errors->messages()) }};
                        let firstErrorStep = null;

                        const fieldToStepMap = {
                            'first_name': 1, 'last_name': 1, 'birth_date': 1, 'personal_phone': 1, 'address': 1, 'blood_type': 1, 'personal_email': 1, 'photo': 1,
                            'employee_number': 2, 'recruitment_date': 2, 'contract_end_date': 2, 'status_id': 2, 'user_id': 2,
                            'license_number': 3, 'license_category': 3, 'license_issue_date': 3, 'license_authority': 3, 'emergency_contact_name': 3, 'emergency_contact_phone': 3
                        };

                        for (const field in fieldToStepMap) {
                            if (errors.hasOwnProperty(field)) {
                                firstErrorStep = fieldToStepMap[field];
                                break;
                            }
                        }

                        if (firstErrorStep !== null) {
                            currentStep = firstErrorStep;
                        } else if ({{ old('current_step', 0) }} > 0) {
                            currentStep = {{ old('current_step') }};
                        } else {
                            currentStep = 1;
                        }
                    @endif
                ">

                    {{-- Indicateur d'étapes (Stepper) --}}
                    <ol class="flex items-center w-full mb-6">
                        <li class="flex w-full items-center text-violet-600 after:content-[''] after:w-full after:h-1 after:border-b after:border-violet-600 after:border-3 after:inline-block">
                            <span class="flex items-center justify-center w-10 h-10 bg-violet-100 rounded-full lg:h-12 lg:w-12 shrink-0">
                                <svg class="w-4 h-4 text-violet-600 lg:w-6 lg:h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>
                            </span>
                        </li>
                        <li class="flex w-full items-center after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-3 after:inline-block" :class="{ 'text-violet-600 after:border-violet-600': currentStep >= 2 }">
                            <span class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0" :class="{ 'bg-violet-100': currentStep >= 2, 'bg-gray-100': currentStep < 2 }">
                                <span x-show="currentStep < 2">2</span>
                                <svg x-show="currentStep >= 2" class="w-4 h-4 lg:w-6 lg:h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>
                            </span>
                        </li>
                        <li class="flex items-center" :class="{ 'text-violet-600': currentStep === 3 }">
                            <span class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0" :class="{ 'bg-violet-100': currentStep === 3, 'bg-gray-100': currentStep < 3 }">3</span>
                        </li>
                    </ol>

                    @if ($errors->any())
                        <div class="mb-6 bg-red-50 border-l-4 border-red-400 text-red-700 p-4" role="alert">
                            <p class="font-bold">Veuillez corriger les erreurs ci-dessous:</p>
                            <ul class="mt-3 list-disc list-inside text-sm text-red-600">
                                @foreach ($errors->all() as $error)
                                    <li>{{ $error }}</li>
                                @endforeach
                            </ul>
                        </div>
                    @endif

                    <form method="POST" action="{{ route('admin.drivers.store') }}" enctype="multipart/form-data">
                        @csrf
                        <input type="hidden" name="current_step" x-model="currentStep">

                        {{-- Étape 1: Informations Personnelles --}}
                        <section x-show="currentStep === 1">
                            <h3 class="text-lg font-semibold text-gray-800 border-b pb-2 mb-6">Étape 1: Informations Personnelles</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                <div class="md:col-span-2">
                                    <label for="photo" class="block font-medium text-sm text-gray-700">Photo</label>
                                    <input id="photo" name="photo" type="file" class="block w-full text-sm text-gray-500 mt-1 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100"/>
                                    <x-input-error :messages="$errors->get('photo')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="first_name" class="block font-medium text-sm text-gray-700">Prénom <span class="text-red-500">*</span></label>
                                    <x-text-input id="first_name" class="block mt-1 w-full" type="text" name="first_name" :value="old('first_name')" />
                                    <x-input-error :messages="$errors->get('first_name')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="last_name" class="block font-medium text-sm text-gray-700">Nom <span class="text-red-500">*</span></label>
                                    <x-text-input id="last_name" class="block mt-1 w-full" type="text" name="last_name" :value="old('last_name')" />
                                    <x-input-error :messages="$errors->get('last_name')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="birth_date" class="block font-medium text-sm text-gray-700">Date de Naissance</label>
                                    <x-text-input id="birth_date" class="block mt-1 w-full" type="date" name="birth_date" :value="old('birth_date')" />
                                    <x-input-error :messages="$errors->get('birth_date')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="blood_type" class="block font-medium text-sm text-gray-700">Groupe Sanguin</label>
                                    <x-text-input id="blood_type" class="block mt-1 w-full" type="text" placeholder="Ex: O+" name="blood_type" :value="old('blood_type')" />
                                    <x-input-error :messages="$errors->get('blood_type')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="personal_phone" class="block font-medium text-sm text-gray-700">Téléphone Personnel</label>
                                    <x-text-input id="personal_phone" class="block mt-1 w-full" type="text" name="personal_phone" :value="old('personal_phone')" />
                                    <x-input-error :messages="$errors->get('personal_phone')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="personal_email" class="block font-medium text-sm text-gray-700">Adresse Email</label>
                                    <x-text-input id="personal_email" class="block mt-1 w-full" type="email" name="personal_email" :value="old('personal_email')" />
                                    <x-input-error :messages="$errors->get('personal_email')" class="mt-2" />
                                </div>
                                <div class="md:col-span-2">
                                    <label for="address" class="block font-medium text-sm text-gray-700">Adresse</label>
                                    <textarea id="address" name="address" rows="3" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">{{ old('address') }}</textarea>
                                    <x-input-error :messages="$errors->get('address')" class="mt-2" />
                                </div>
                            </div>
                        </section>

                        {{-- Étape 2: Informations Professionnelles --}}
                        <section x-show="currentStep === 2" style="display: none;">
                            <h3 class="text-lg font-semibold text-gray-800 border-b pb-2 mb-6">Étape 2: Informations Professionnelles</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                <div>
                                    <label for="employee_number" class="block font-medium text-sm text-gray-700">Matricule</label>
                                    <x-text-input id="employee_number" class="block mt-1 w-full" type="text" name="employee_number" :value="old('employee_number')" />
                                    <x-input-error :messages="$errors->get('employee_number')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="recruitment_date" class="block font-medium text-sm text-gray-700">Date de Recrutement</label>
                                    <x-text-input id="recruitment_date" class="block mt-1 w-full" type="date" name="recruitment_date" :value="old('recruitment_date')" />
                                    <x-input-error :messages="$errors->get('recruitment_date')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="contract_end_date" class="block font-medium text-sm text-gray-700">Date de Fin de Contrat</label>
                                    <x-text-input id="contract_end_date" name="contract_end_date" :value="old('contract_end_date')" type="date" class="mt-1 block w-full"/>
                                    <x-input-error :messages="$errors->get('contract_end_date')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="status_id" class="block font-medium text-sm text-gray-700">Statut <span class="text-red-500">*</span></label>
                                    <select name="status_id" id="status_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                        <option value="">Sélectionnez un statut</option>
                                        @foreach($driverStatuses as $status)<option value="{{ $status->id }}" @selected(old('status_id') == $status->id)>{{ $status->name }}</option>@endforeach
                                    </select>
                                    <x-input-error :messages="$errors->get('status_id')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="user_id" class="block font-medium text-sm text-gray-700">Lier à un Compte Utilisateur (Optionnel)</label>
                                    <select name="user_id" id="user_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                        <option value="">Ne pas lier de compte</option>
                                        @foreach($linkableUsers as $user)<option value="{{ $user->id }}" @selected(old('user_id') == $user->id)>{{ $user->name }} ({{ $user->email }})</option>@endforeach
                                    </select>
                                    <x-input-error :messages="$errors->get('user_id')" class="mt-2" />
                                </div>
                            </div>
                        </section>

                        {{-- Étape 3: Permis & Urgence --}}
                        <section x-show="currentStep === 3" style="display: none;">
                            <h3 class="text-lg font-semibold text-gray-800 border-b pb-2 mb-6">Étape 3: Permis & Contact d'Urgence</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
                                <div>
                                    <label for="license_number" class="block font-medium text-sm text-gray-700">Numéro de Permis</label>
                                    <x-text-input id="license_number" name="license_number" :value="old('license_number')" class="mt-1 w-full"/>
                                    <x-input-error :messages="$errors->get('license_number')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="license_category" class="block font-medium text-sm text-gray-700">Catégorie(s)</label>
                                    <x-text-input id="license_category" name="license_category" :value="old('license_category')" placeholder="Ex: B, C1E" class="mt-1 w-full"/>
                                    <x-input-error :messages="$errors->get('license_category')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="license_issue_date" class="block font-medium text-sm text-gray-700">Date de Délivrance</label>
                                    <x-text-input id="license_issue_date" name="license_issue_date" :value="old('license_issue_date')" type="date" class="mt-1 w-full"/>
                                    <x-input-error :messages="$errors->get('license_issue_date')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="license_authority" class="block font-medium text-sm text-gray-700">Délivré par</label>
                                    <x-text-input id="license_authority" name="license_authority" :value="old('license_authority')" class="mt-1 w-full"/>
                                    <x-input-error :messages="$errors->get('license_authority')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="emergency_contact_name" class="block font-medium text-sm text-gray-700">Nom du Contact d'Urgence</label>
                                    <x-text-input id="emergency_contact_name" name="emergency_contact_name" :value="old('emergency_contact_name')" class="mt-1 w-full"/>
                                    <x-input-error :messages="$errors->get('emergency_contact_name')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="emergency_contact_phone" class="block font-medium text-sm text-gray-700">Téléphone d'Urgence</label>
                                    <x-text-input id="emergency_contact_phone" name="emergency_contact_phone" :value="old('emergency_contact_phone')" class="mt-1 w-full"/>
                                    <x-input-error :messages="$errors->get('emergency_contact_phone')" class="mt-2" />
                                </div>
                            </div>
                        </section>

                        {{-- Boutons de Navigation --}}
                        <div class="mt-8 pt-6 border-t border-gray-200 flex justify-between items-center">
                            <div>
                                <button type="button" x-show="currentStep > 1" @click="currentStep--" class="inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50">
                                    Précédent
                                </button>
                            </div>
                            <div class="flex items-center gap-4">
                                <a href="{{ route('admin.drivers.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Annuler</a>
                                <button type="button" x-show="currentStep < 3" @click="currentStep++" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                    Suivant
                                </button>
                                <button type="submit" x-show="currentStep === 3" class="inline-flex items-center px-4 py-2 bg-green-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-green-700">
                                    Créer le Chauffeur
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>



--- END OF FILE: ./resources/views/admin/drivers/create.blade.php ---


#############################################
./resources/views/admin/drivers/edit.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">Modifier le Chauffeur : <span class="text-violet-700">{{ $driver->first_name }} {{ $driver->last_name }}</span></h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900" x-data="{ currentStep: 1 }">
                                        {{-- Indicateur d'Étapes (Stepper) --}}
                    {{-- Indicateur d'étapes (Stepper) - Identique à la vue de création --}}
                    <div class="mb-8">
                        <ol class="flex items-center w-full">
                            <li class="flex w-full items-center text-violet-600 after:content-[''] after:w-full after:h-1 after:border-b after:border-violet-600 after:border-3 after:inline-block">
                                <span class="flex items-center justify-center w-10 h-10 bg-violet-100 rounded-full lg:h-12 lg:w-12 shrink-0">
                                    <svg class="w-4 h-4 text-violet-600 lg:w-6 lg:h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>
                                </span>
                            </li>
                            <li class="flex w-full items-center after:content-[''] after:w-full after:h-1 after:border-b after:border-gray-200 after:border-3 after:inline-block" :class="{ 'text-violet-600 after:border-violet-600': currentStep >= 2 }">
                                <span class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0" :class="{ 'bg-violet-100': currentStep >= 2, 'bg-gray-100': currentStep < 2 }">
                                    <span x-show="currentStep < 2">2</span>
                                    <svg x-show="currentStep >= 2" class="w-4 h-4 lg:w-6 lg:h-6" fill="currentColor" viewBox="0 0 20 20"><path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd"/></svg>
                                </span>
                            </li>
                            <li class="flex items-center" :class="{ 'text-violet-600': currentStep === 3 }">
                                <span class="flex items-center justify-center w-10 h-10 rounded-full lg:h-12 lg:w-12 shrink-0" :class="{ 'bg-violet-100': currentStep === 3, 'bg-gray-100': currentStep < 3 }">3</span>
                            </li>
                        </ol>
                    </div>

                    @if ($errors->any())
                        <div class="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                            <p class="font-bold">Veuillez corriger les erreurs ci-dessous :</p>
                        </div>
                    @endif

                    <form method="POST" action="{{ route('admin.drivers.update', $driver) }}" enctype="multipart/form-data">
                        @csrf
                        @method('PUT')
                        {{-- Étape 1: Informations Personnelles --}}

                                                {{-- Étape 1: Informations Personnelles --}}
                        <section x-show="currentStep === 1" class="space-y-6">
                            <h3 class="text-lg font-semibold text-gray-800 border-b pb-2 mb-6">Étape 1: Informations Personnelles</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

                                 {{-- Champ pour la photo avec affichage de l'actuelle --}}
                                <div class="md:col-span-2">
                                    <label for="photo" class="block font-medium text-sm text-gray-700">Photo</label>
                                    <div class="mt-2 flex items-center space-x-4">
                                        @if ($driver->photo_path)
                                            <img src="{{ asset('storage/' . $driver->photo_path) }}" alt="Photo de {{ $driver->first_name }}" class="h-20 w-20 rounded-full object-cover">
                                        @else
                                            <span class="inline-block h-20 w-20 overflow-hidden rounded-full bg-gray-100">
                                                <svg class="h-full w-full text-gray-300" fill="currentColor" viewBox="0 0 24 24">
                                                    <path d="M24 20.993V24H0v-2.997A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" />
                                                </svg>
                                            </span>
                                        @endif
                                        <input id="photo" name="photo" type="file" class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100"/>
                                    </div>
                                    <x-input-error :messages="$errors->get('photo')" class="mt-2" />
                                </div>

                                <div>
                                    <label for="first_name" class="block font-medium text-sm text-gray-700">Prénom <span class="text-red-500">*</span></label>
                                    <x-text-input id="first_name" class="block mt-1 w-full" type="text" name="first_name" :value="old('first_name',$driver->first_name)" required autofocus />
                                    <x-input-error :messages="$errors->get('first_name')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="last_name" class="block font-medium text-sm text-gray-700">Nom <span class="text-red-500">*</span></label>
                                    <x-text-input id="last_name" class="block mt-1 w-full" type="text" name="last_name" :value="old('last_name',$driver->last_name)" required />
                                    <x-input-error :messages="$errors->get('last_name')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="birth_date" class="block font-medium text-sm text-gray-700">Date de Naissance</label>
                                    <x-text-input id="birth_date" class="block mt-1 w-full" type="date" name="birth_date" :value="old('birth_date',$driver->birth_date?->format('Y-m-d'))" />
                                    <x-input-error :messages="$errors->get('birth_date')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="blood_type" class="block font-medium text-sm text-gray-700">Groupe Sanguin</label>
                                    <x-text-input id="blood_type" class="block mt-1 w-full" type="text" placeholder="Ex: O+" name="blood_type" :value="old('blood_type',$driver->blood_type)" />
                                    <x-input-error :messages="$errors->get('blood_type',$driver->blood_type)" class="mt-2" />
                                </div>
                                <div>
                                    <label for="personal_phone" class="block font-medium text-sm text-gray-700">Téléphone Personnel</label>
                                    <x-text-input id="personal_phone" class="block mt-1 w-full" type="text" name="personal_phone" :value="old('personal_phone',$driver->personal_phone)" />
                                    <x-input-error :messages="$errors->get('personal_phone')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="personal_email" class="block font-medium text-sm text-gray-700">Adresse Email</label>
                                    <x-text-input id="personal_email" class="block mt-1 w-full" type="email" name="personal_email" :value="old('personal_email',$driver->personal_email)" />
                                    <x-input-error :messages="$errors->get('personal_email')" class="mt-2" />
                                </div>
                                <div class="md:col-span-2">
                                    <label for="address" class="block font-medium text-sm text-gray-700">Adresse</label>
                                    <textarea id="address" name="address" rows="3" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm" >{{ old('address',$driver->address) }}</textarea>
                                    <x-input-error :messages="$errors->get('address')" class="mt-2" />
                                </div>

                            </div>
                        </section>

                        {{-- ///////////////////////////////LA SUITE  --}}
                                                {{-- Étape 2: Informations Professionnelles --}}
                        <section x-show="currentStep === 2" style="display: none;" class="space-y-6">
                            <h3 class="text-lg font-semibold text-gray-800 border-b pb-2 mb-6">Étape 2: Informations Professionnelles</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="employee_number" class="block font-medium text-sm text-gray-700">Matricule</label>
                                    <x-text-input id="employee_number" class="block mt-1 w-full" type="text" name="employee_number" :value="old('employee_number', $driver->employee_number)" />
                                    <x-input-error :messages="$errors->get('employee_number')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="recruitment_date" class="block font-medium text-sm text-gray-700">Date de Recrutement</label>
                                    <x-text-input id="recruitment_date" class="block mt-1 w-full" type="date" name="recruitment_date" :value="old('recruitment_date',$driver->recruitment_date?->format('Y-m-d'))" />
                                    <x-input-error :messages="$errors->get('recruitment_date',$driver->recruitment_date)" class="mt-2" />
                                </div>
                                <div>
                                    <label for="contract_end_date">Date de Fin de Contrat</label>
                                    <x-text-input id="contract_end_date" name="contract_end_date" :value="old('contract_end_date', $driver->contract_end_date?->format('Y-m-d'))" type="date" class="mt-1 w-full"/>
                                </div>
                                <div>
                                    <label for="status_id" class="block font-medium text-sm text-gray-700">Statut <span class="text-red-500">*</span></label>
                                    <select name="status_id" id="status_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm" required>
                                        <option value="">Sélectionnez un statut</option>
                                        @foreach($driverStatuses as $status)<option value="{{ $status->id }}" @selected(old('status_id',$driver->status_id) == $status->id)>{{ $status->name }}</option>@endforeach
                                    </select>
                                    <x-input-error :messages="$errors->get('status_id')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="user_id" class="block font-medium text-sm text-gray-700">Lier à un Compte Utilisateur (Optionnel)</label>
                                    <select name="user_id" id="user_id" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                                        <option value="">Ne pas lier de compte</option>
                                        @foreach($linkableUsers as $user)<option value="{{ $user->id }}" @selected(old('user_id') == $user->id)>{{ $user->name }} ({{ $user->email }})</option>@endforeach
                                    </select>
                                    <x-input-error :messages="$errors->get('user_id')" class="mt-2" />
                                </div>
                            </div>
                        </section>

                                                {{-- Étape 3: Permis & Urgence --}}
                        <section x-show="currentStep === 3" style="display: none;" class="space-y-6">
                            <h3 class="text-lg font-semibold text-gray-800 border-b pb-2 mb-6">Étape 3: Permis & Contact d'Urgence</h3>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="license_number" class="block font-medium text-sm text-gray-700">Numéro de Permis</label>
                                    <x-text-input id="license_number" class="block mt-1 w-full" type="text" name="license_number" :value="old('license_number',$driver->license_number)" />
                                    <x-input-error :messages="$errors->get('license_number')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="license_category" class="block font-medium text-sm text-gray-700">Catégorie(s) de Permis</label>
                                    <x-text-input id="license_category" class="block mt-1 w-full" type="text" name="license_category" :value="old('license_category',$driver->license_category)" placeholder="Ex: B, C1" />
                                    <x-input-error :messages="$errors->get('license_category')" class="mt-2" />
                                </div>

                                <div>
                                    <label for="license_issue_date">Date de Délivrance</label>
                                    <x-text-input id="license_issue_date" name="license_issue_date" :value="old('license_issue_date', $driver->license_issue_date?->format('Y-m-d'))" type="date" class="mt-1 w-full"/>
                                </div>
                                <div>
                                    <label for="license_authority">Délivré par</label>
                                    <x-text-input id="license_authority" name="license_authority" :value="old('license_authority', $driver->license_authority)" class="mt-1 w-full"/>
                                </div>
                                {{-- Affichage de la date d'expiration calculée --}}
                                @if($driver->license_expiry_date)
                                <div class="md:col-span-2 mt-4 p-4 bg-violet-50 border border-violet-200 rounded-lg">
                                    <p class="text-sm font-medium text-gray-700">Date d'Expiration du Permis (Calculée)</p>
                                    <p class="text-lg font-semibold text-violet-700">{{ $driver->license_expiry_date->format('d/m/Y') }}</p>
                                </div>
                                @endif



                                <div>
                                    <label for="emergency_contact_name" class="block font-medium text-sm text-gray-700">Nom du Contact d'Urgence</label>
                                    <x-text-input id="emergency_contact_name" class="block mt-1 w-full" type="text" name="emergency_contact_name" :value="old('emergency_contact_name',$driver->emergency_contact_name)" />
                                    <x-input-error :messages="$errors->get('emergency_contact_name')" class="mt-2" />
                                </div>
                                <div>
                                    <label for="emergency_contact_phone" class="block font-medium text-sm text-gray-700">Téléphone d'Urgence</label>
                                    <x-text-input id="emergency_contact_phone" class="block mt-1 w-full" type="text" name="emergency_contact_phone" :value="old('emergency_contact_phone',$driver->emergency_contact_phone)" />
                                    <x-input-error :messages="$errors->get('emergency_contact_phone')" class="mt-2" />
                                </div>
                            </div>
                        </section>


                                             {{-- Boutons de Navigation --}}
                        <div class="mt-8 pt-6 border-t border-gray-200 flex justify-between items-center">
                            <div>
                                <button type="button" x-show="currentStep > 1" @click="currentStep--" class="inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50">
                                    Précédent
                                </button>
                            </div>
                            <div class="flex items-center gap-4">
                                <a href="{{ route('admin.drivers.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Annuler</a>
                                <button type="button" x-show="currentStep < 3" @click="currentStep++" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                    Suivant
                                </button>
                                <button type="submit" x-show="currentStep === 3" class="inline-flex items-center px-4 py-2 bg-green-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-green-700">
                                    Enregistrer les Modifications
                                </button>
                            </div>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/drivers/edit.blade.php ---


#############################################
./resources/views/admin/drivers/index.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Gestion des Chauffeurs') }}
        </h2>
    </x-slot>

    {{-- Initialisation d'Alpine.js pour gérer la modale de suppression --}}
    <div x-data="{
            showConfirmModal: false,
            driverToDelete: {},
            deleteFormUrl: '',
            openDeleteModal(event) {
                const button = event.currentTarget;
                this.driverToDelete = JSON.parse(button.dataset.driver);
                this.deleteFormUrl = button.dataset.url;
                this.showConfirmModal = true;
            }
        }"
         class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            {{-- Section des Filtres et de la Recherche --}}
            <div class="mb-6 bg-white p-4 shadow-sm sm:rounded-lg">
                <form action="{{ route('admin.drivers.index') }}" method="GET">
                    <div class="flex flex-col md:flex-row md:items-end md:space-x-4 space-y-2 md:space-y-0">
                        <div class="flex-grow">
                            <label for="search" class="block text-sm font-medium text-gray-700">Recherche</label>
                            <input type="text" name="search" id="search" value="{{ $filters['search'] ?? '' }}" placeholder="Nom, matricule, N° permis..." class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                        </div>
                        <div class="flex-shrink-0">
                            <label for="status_id" class="block text-sm font-medium text-gray-700">Statut</label>
                            <select name="status_id" id="status_id" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                                <option value="">Tous</option>
                                @foreach($driverStatuses as $status)
                                    <option value="{{ $status->id }}" @selected(($filters['status_id'] ?? '') == $status->id)>{{ $status->name }}</option>
                                @endforeach
                            </select>
                        </div>
                        <div class="flex-shrink-0">
                            <label for="per_page" class="block text-sm font-medium text-gray-700">Par page</label>
                            <select name="per_page" id="per_page" onchange="this.form.submit()" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                                @foreach(['10', '20', '50', '100'] as $value)
                                    <option value="{{ $value }}" @selected(($filters['per_page'] ?? '15') == $value)>{{ $value }}</option>
                                @endforeach
                            </select>
                        </div>
                        <div>
                            <label for="view_deleted" class="block text-sm font-medium text-gray-700">Affichage</label>
                            <select name="view_deleted" id="view_deleted" onchange="this.form.submit()" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                                <option value="">Actifs</option>
                                <option value="true" @selected(request('view_deleted'))>Archivés</option>
                            </select>
                        </div>
                        <div class="flex-shrink-0 flex space-x-2">
                            <button type="submit" class="inline-flex items-center justify-center w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700">Filtrer</button>
                            <a href="{{ route('admin.drivers.index') }}" class="inline-flex items-center justify-center w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Reset</a>
                        </div>
                    </div>
                </form>
            </div>

            @if (session('success'))
                <div class="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4" role="alert"><p class="font-bold">{{ session('success') }}</p></div>
            @endif

            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-700">{{ __('Liste des Chauffeurs') }}</h3>
                        @can('create drivers')
                            <a href="{{ route('admin.drivers.create') }}" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                                Ajouter un Chauffeur
                            </a>
                        @endcan
                    </div>

                    <div class="overflow-x-auto border border-gray-200 rounded-lg">
                        <table class="w-full divide-y divide-gray-200">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Chauffeur</th>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Matricule</th>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Statut</th>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Utilisateur Lié</th>
                                    <th class="px-6 py-3 text-right text-xs font-bold text-gray-600 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @forelse ($drivers as $driver)
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-2 whitespace-nowrap">
                                            <div class="flex items-center">
                                                <div class="flex-shrink-0 h-10 w-10">
                                                    @if($driver->photo_path)
                                                        <img class="h-10 w-10 rounded-full object-cover" src="{{ asset('storage/' . $driver->photo_path) }}" alt="Photo de {{ $driver->first_name }}">
                                                    @else
                                                        <span class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center">
                                                            <svg class="h-6 w-6 text-gray-400" fill="currentColor" viewBox="0 0 24 24"><path d="M24 20.993V24H0v-2.997A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" /></svg>
                                                        </span>
                                                    @endif
                                                </div>
                                                <div class="ml-4">
                                                    <div class="text-sm font-semibold text-gray-900">{{ $driver->last_name }} {{ $driver->first_name }}</div>
                                                    <div class="text-sm text-gray-500">{{ $driver->personal_phone ?? '' }}</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-2 whitespace-nowrap text-sm text-gray-500">{{ $driver->employee_number ?? '-' }}</td>
                                        <td class="px-6 py-2 whitespace-nowrap text-sm">
                                            {{-- Logique de couleur pour les statuts --}}
                                            @php
                                                $statusName = $driver->driverStatus?->name ?? 'Indéfini';
                                                $statusClass = 'bg-gray-100 text-gray-800'; // Default
                                                if ($driver->trashed()) {
                                                    $statusName = 'Archivé';
                                                    $statusClass = 'bg-gray-200 text-gray-600';
                                                } else {
                                                    switch ($statusName) {
                                                        case 'Actif': $statusClass = 'bg-green-100 text-green-800'; break;
                                                        case 'En mission': $statusClass = 'bg-blue-100 text-blue-800'; break; // <-- AJOUT
                                                        case 'En congé': $statusClass = 'bg-indigo-100 text-indigo-800'; break;
                                                        case 'Suspendu': $statusClass = 'bg-yellow-100 text-yellow-800'; break;
                                                        case 'Inactif': $statusClass = 'bg-gray-300 text-gray-700'; break;
                                                    }
                                                }
                                            @endphp
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full {{ $statusClass }}">{{ $statusName }}</span>
                                        </td>
                                        <td class="px-6 py-2 whitespace-nowrap text-sm text-gray-500">{{ $driver->user?->email ?? 'Non lié' }}</td>
                                        <td class="px-6 py-2 whitespace-nowrap text-right text-sm font-medium">
                                          {{--///////////////////DEBUT BOUTONS EDIT SUPP ///////--}}
                                            <div class="flex items-center justify-end space-x-2">
                                                 @if ($driver->trashed())
                                                    @can('restore drivers')
                                                        <form method="POST" action="{{ route('admin.drivers.restore', $driver->id) }}">
                                                            @csrf @method('PATCH')
                                                            <button type="submit" title="Restaurer" class="p-2 rounded-full text-gray-400 hover:bg-green-100 hover:text-green-600">
                                                                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1"><path stroke-linecap="round" stroke-linejoin="round" d="M4 4v5h5M7 9a8.25 8.25 0 0110.61 2.61M20 20v-5h-5M17 15a8.25 8.25 0 01-10.61-2.61" /></svg>
                                                            </button>
                                                        </form>
                                                    @endcan
                                                    @can('force delete drivers')
                                                        <button type="button" @click="openDeleteModal($event, true)" data-driver='@json($driver->only(['id', 'first_name', 'last_name']))' data-url="{{ route('admin.drivers.force-delete', $driver->id) }}" title="Supprimer Définitivement" class="p-2 rounded-full text-gray-400 hover:bg-red-100 hover:text-red-600">
                                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1"><path stroke-linecap="round" stroke-linejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" /></svg>
                                                        </button>
                                                    @endcan
                                                @else
                                                    @can('edit drivers')
                                                        <a href="{{ route('admin.drivers.edit', $driver) }}" title="Modifier" class="p-2 rounded-full text-gray-400 hover:bg-violet-100 hover:text-violet-600">
                                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1"><path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536L16.732 3.732z" /></svg>
                                                        </a>
                                                    @endcan
                                                    @can('delete drivers')
                                                        <button type="button" @click="openDeleteModal($event)" data-driver='@json($driver->only(['id', 'first_name', 'last_name']))' data-url="{{ route('admin.drivers.destroy', $driver->id) }}" title="Archiver" class="p-2 rounded-full text-gray-400 hover:bg-yellow-100 hover:text-yellow-600">
                                                            <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="1"><path stroke-linecap="round" stroke-linejoin="round" d="M5 8h14M5 8a2 2 0 110-4h14a2 2 0 110 4H5z" /><path stroke-linecap="round" stroke-linejoin="round" d="M19 8v10a2 2 0 01-2 2H7a2 2 0 01-2-2V8h14z" /></svg>
                                                        </button>
                                                    @endcan
                                                @endif
                                            </div>
                                        {{--///////////////////FIN BOUTONS EDIT SUPP ///////--}}
                                        </td>
                                    </tr>
                                @empty
                                    <tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">Aucun chauffeur trouvé.</td></tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-6">{{ $drivers->withQueryString()->links() }}</div>
                </div>
            </div>
        </div>

        {{-- Fenêtre Modale de Confirmation de Suppression pour les Chauffeurs --}}
        <div x-show="showConfirmModal" x-transition class="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-60" style="display: none;">
            <div @click.away="showConfirmModal = false" class="bg-white rounded-lg shadow-xl p-6 w-full max-w-md mx-4">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-red-600" stroke="currentColor" fill="none" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"/></svg>
                    </div>
                    <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                        <h3 class="text-base font-semibold leading-6 text-gray-900">Supprimer le Chauffeur</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-600">
                                Êtes-vous sûr de vouloir supprimer <strong class="font-bold" x-text="driverToDelete.first_name + ' ' + driverToDelete.last_name"></strong> ?
                            </p>
                            <p class="mt-1 text-sm text-gray-500">Cette action est irréversible.</p>
                        </div>
                    </div>
                </div>
                <div class="mt-5 sm:mt-4 sm:flex sm:flex-row-reverse">
                    <form :action="deleteFormUrl" method="POST">
                        @csrf
                        @method('DELETE')
                        <button type="submit" class="inline-flex w-full justify-center rounded-md bg-red-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-red-700 sm:ml-3 sm:w-auto">Confirmer</button>
                    </form>
                    <button type="button" @click="showConfirmModal = false" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Annuler</button>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/drivers/index.blade.php ---


#############################################
./resources/views/admin/handovers/vehicles/show.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <div class="flex justify-between items-center print:hidden">
            <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                Fiche de Remise N° {{ $handoverForm->id }}
            </h2>
            <div class="space-x-2">
                <a href="{{ route('admin.handovers.vehicles.edit', $handoverForm) }}" class="inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500">
                    <svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536L16.732 3.732z" /></svg>
                    Modifier
                </a>
                <button onclick="window.print()" class="inline-flex items-center px-4 py-2 bg-gray-800 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-gray-700">
                    <svg class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4a2 2 0 00-2-2H9a2 2 0 00-2 2v4a2 2 0 002 2zm8-12V5a2 2 0 00-2-2H9a2 2 0 00-2 2v4h10z" /></svg>
                    Imprimer
                </button>
            </div>
        </div>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8 space-y-6">

            {{-- ZONE D'IMPRESSION --}}
            <div id="print-area" class="bg-white shadow-lg p-8 md:p-12">
                
                {{-- En-tête du document --}}
                <div class="text-center mb-10 border-b-2 border-black pb-4">
                    <h1 class="text-3xl font-bold text-black">FICHE DE REMISE DE VÉHICULE</h1>
                    <p class="text-sm text-gray-600">Générée le : {{ now()->format('d/m/Y') }}</p>
                </div>

                {{-- Section Informations Générales --}}
                <div class="mb-8">
                    <h2 class="text-xl font-bold mb-4 text-gray-800 border-b pb-2">1. Informations Générales</h2>
                    <table class="w-full text-sm mt-4">
                        <tbody>
                            <tr>
                                <td class="font-semibold p-2 border bg-gray-50 w-1/4">Date de Remise</td>
                                <td class="p-2 border">{{ $handoverForm->issue_date->format('d/m/Y') }}</td>
                                <td class="font-semibold p-2 border bg-gray-50 w-1/4">Affectation N°</td>
                                <td class="p-2 border">{{ $handoverForm->assignment->id }}</td>
                            </tr>
                            <tr>
                                <td class="font-semibold p-2 border bg-gray-50">Chauffeur</td>
                                <td class="p-2 border">{{ $handoverForm->assignment->driver->first_name }} {{ $handoverForm->assignment->driver->last_name }}</td>
                                <td class="font-semibold p-2 border bg-gray-50">Matricule Employé</td>
                                <td class="p-2 border">{{ $handoverForm->assignment->driver->employee_number ?? 'N/A' }}</td>
                            </tr>
                            <tr>
                                <td class="font-semibold p-2 border bg-gray-50">Véhicule</td>
                                <td class="p-2 border">{{ $handoverForm->assignment->vehicle->brand }} {{ $handoverForm->assignment->vehicle->model }}</td>
                                <td class="font-semibold p-2 border bg-gray-50">Immatriculation</td>
                                <td class="p-2 border font-mono">{{ $handoverForm->assignment->vehicle->registration_plate }}</td>
                            </tr>
                             <tr>
                                <td class="font-semibold p-2 border bg-gray-50">Kilométrage</td>
                                <td class="p-2 border font-mono">{{ number_format($handoverForm->current_mileage, 0, ',', ' ') }} km</td>
                                <td class="font-semibold p-2 border bg-gray-50">Motif Affectation</td>
                                <td class="p-2 border">{{ $handoverForm->assignment->reason ?? 'Non spécifié' }}</td>
                            </tr>
                        </tbody>
                    </table>
                </div>

                {{-- Section État Visuel --}}
                <div class="mb-8 print:break-before-page">
                    <h2 class="text-xl font-bold mb-4 text-gray-800 border-b pb-2">2. État Visuel et Observations</h2>
                    <div class="flex flex-col md:flex-row gap-6">
                        <div class="w-full md:w-1/3 flex-shrink-0 mx-auto">
                             @if($handoverForm->assignment->vehicle->vehicleType->name === 'Moto')
                                 <img src="{{ asset('images/scooter_sketch.png') }}" alt="Croquis Scooter" class="border">
                             @else
                                 <img src="{{ asset('images/car_sketch.png') }}" alt="Croquis Voiture" class="border">
                             @endif
                        </div>
                        <div class="w-full md:w-2/3">
                            <p class="font-semibold">Observations sur l'état extérieur :</p>
                            <p class="text-gray-700 p-2 border bg-gray-50 min-h-[150px] mt-2 whitespace-pre-wrap">{{ $handoverForm->general_observations ?? 'Aucune.' }}</p>
                        </div>
                    </div>
                </div>

                {{-- Section Checklist --}}
                <div class="mb-8">
                     <h2 class="text-xl font-bold mb-4 text-gray-800 border-b pb-2">3. Checklist de Contrôle</h2>
                    @foreach($checklist as $category => $items)
                        <h3 class="font-semibold text-gray-700 mt-4 mb-2">{{ $category }}</h3>
                        <table class="w-full text-sm border-collapse">
                            @foreach($items->chunk(2) as $chunk)
                                <tr>
                                    @foreach($chunk as $detail)
                                        <td class="p-2 border w-2/5">{{ $detail->item }}</td>
                                        <td class="p-2 border font-semibold w-[10%] text-center">{{ $detail->status }}</td>
                                    @endforeach
                                    @if($chunk->count() < 2)<td class="p-2 border w-2/5"></td><td class="p-2 border w-[10%]"></td>@endif
                                </tr>
                            @endforeach
                        </table>
                    @endforeach
                </div>

                {{-- Section Signatures --}}
                <div class="pt-24">
                    <div class="grid grid-cols-2 gap-16">
                        <div class="border-t-2 border-black pt-2 text-center">
                            <p class="font-semibold">Signature du Responsable</p>
                        </div>
                        <div class="border-t-2 border-black pt-2 text-center">
                            <p class="font-semibold">Signature du Chauffeur</p>
                        </div>
                    </div>
                </div>
            </div>

            {{-- Section de Téléversement (ne s'imprime pas) --}}
            <div class="max-w-4xl mx-auto mt-6 print:hidden">
                <div class="bg-white p-6 shadow-sm sm:rounded-lg">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Archivage de la Fiche Signée</h3>
                    @if ($handoverForm->signed_form_path)
                        <div class="flex items-center justify-between p-3 bg-green-50 rounded-md">
                            <a href="{{ asset('storage/' . $handoverForm->signed_form_path) }}" target="_blank" class="text-green-700 font-semibold hover:underline">Voir la fiche signée actuelle</a>
                            <span class="text-xs text-green-600">Téléversée le {{ $handoverForm->updated_at->format('d/m/Y') }}</span>
                        </div>
                        <p class="text-sm text-gray-500 mt-4">Pour remplacer, téléversez un nouveau fichier :</p>
                    @else
                        <p class="text-sm text-gray-500 mb-2">Aucune fiche signée n'a encore été téléversée.</p>
                    @endif
                    <form action="{{ route('admin.handovers.vehicles.uploadSigned', $handoverForm) }}" method="POST" enctype="multipart/form-data" class="mt-4 flex items-center space-x-4">
                        @csrf
                        <input type="file" name="signed_form" required class="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-violet-50 file:text-violet-700 hover:file:bg-violet-100"/>
                        <button type="submit" class="px-4 py-2 bg-green-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-green-700">Téléverser</button>
                    </form>
                    @error("signed_form") <p class="text-red-500 text-xs mt-1">{{ $message }}</p> @enderror               </div>
            </div>
        </div>

        {{-- Styles spécifiques pour l'impression --}}
        <style>
            @media print {
                body, .x-app-layout-body { background-color: white !important; }
                .print\:hidden { display: none !important; }
                #print-area { box-shadow: none !important; border: none !important; }
                .print\:break-before-page { break-before: page; }
            }
        </style>
    </x-app-layout>
--- END OF FILE: ./resources/views/admin/handovers/vehicles/show.blade.php ---


#############################################
./resources/views/admin/handovers/vehicles/create.blade.php
#############################################
<x-app-layout>
   <x-slot name="header">
       <h2 class="font-semibold text-xl text-gray-800 leading-tight">
           {{ __('Fiche de Remise de Véhicule') }}
       </h2>
   </x-slot>

   <div class="py-12">
       <div class="max-w-5xl mx-auto sm:px-6 lg:px-8">
           <form action="{{ route('admin.handovers.vehicles.store') }}" method="POST" class="space-y-6">
               @csrf
               <input type="hidden" name="assignment_id" value="{{ $assignment->id }}">

               {{-- CARTE 1: INFORMATIONS GÉNÉRALES --}}
               <div class="bg-white p-6 shadow-sm sm:rounded-lg">
                   <div class="text-center mb-6">
                       <h3 class="text-2xl font-bold text-gray-900">FICHE DE REMISE DE VÉHICULE</h3>
                       <p class="text-sm text-gray-500">Pour l'Affectation N° {{ $assignment->id }}</p>
                   </div>
                   <div class="grid grid-cols-1 md:grid-cols-3 gap-x-8 gap-y-6 text-sm border-t border-b border-gray-200 py-6">
                       <div>
                           <p class="text-gray-500 font-semibold">Chauffeur</p>
                           <p class="font-bold text-lg text-gray-900">{{ $assignment->driver->first_name }} {{ $assignment->driver->last_name }}</p>
                           <p class="text-gray-600">Matricule: {{ $assignment->driver->employee_number ?? 'N/A' }}</p>
                           <p class="text-gray-600">Tel: {{ $assignment->driver->personal_phone ?? 'N/A' }}</p>
                       </div>
                       <div>
                           <p class="text-gray-500 font-semibold">Véhicule</p>
                           <p class="font-bold text-lg text-gray-900">{{ $assignment->vehicle->brand }} {{ $assignment->vehicle->model }}</p>
                           <p class="text-gray-600 font-mono">{{ $assignment->vehicle->registration_plate }}</p>
                           <p class="text-gray-600">Kilométrage: <span class="font-semibold">{{ number_format($assignment->vehicle->current_mileage, 0, ',', ' ') }} km</span></p>
                       </div>
                       <div>
                           <label for="issue_date" class="block font-medium text-sm text-gray-700">Date de Remise <span class="text-red-500">*</span></label>
                           <x-text-input id="issue_date" name="issue_date" type="date" class="mt-1 block w-full" :value="old('issue_date', now()->format('Y-m-d'))" required />
                            <x-input-error :messages="$errors->get('issue_date')" class="mt-2" />
                       </div>
                       <div class="md:col-span-3">
                            <label for="reason" class="block font-medium text-sm text-gray-700">Motif de l'affectation</label>
                            <p class="mt-1 p-3 bg-gray-50 rounded-md text-gray-800 w-full border border-gray-200">{{ $assignment->reason ?? 'Non spécifié' }}</p>
                       </div>
                   </div>
               </div>

               {{-- CARTE 2: ÉTAT VISUEL ET OBSERVATIONS --}}
               <div class="bg-white p-6 shadow-sm sm:rounded-lg">
                    <h3 class="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-4 mb-6">État Visuel du Véhicule</h3>
                    <div class="flex flex-col md:flex-row gap-6">
                        <div class="flex-shrink-0 mx-auto bg-white p-2 rounded-lg">
                            @if($assignment->vehicle->vehicleType->name === 'Moto')
                                <img src="{{ asset('images/scooter_sketch.png') }}" alt="Croquis Scooter" class="w-32 border rounded">
                            @else
                                <img src="{{ asset('images/car_sketch.png') }}" alt="Croquis Voiture" class="w-48 border rounded">
                            @endif
                        </div>
                        <div class="flex-1">
                           <label for="general_observations" class="block font-medium text-sm text-gray-700">Observations sur l'état extérieur (rayures, bosses, etc.)</label>
                           <textarea name="general_observations" id="general_observations" rows="5" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">{{ old('general_observations') }}</textarea>
                           <x-input-error :messages="$errors->get('general_observations')" class="mt-2" />
                        </div>
                    </div>
               </div>

               {{-- CARTE 3: CHECKLIST DÉTAILLÉE --}}
               <div class="bg-white p-6 shadow-sm sm:rounded-lg">
                   <h3 class="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-4 mb-6">Checklist des Équipements</h3>
                   @php
                       $isMoto = $assignment->vehicle->vehicleType->name === 'Moto';
                       $checklist = $isMoto ? [
                           'Papiers & Accessoires' => ['Carte Grise', 'Assurance', 'Carte Carburant', 'Clé', 'Casque', 'Top-case'],
                           'État Général' => ['Pneu Avant', 'Pneu Arrière', 'Saute-vent', 'Rétroviseur Gauche', 'Rétroviseur Droit', 'Verrouillage', 'Feux avant', 'Feux arrières', 'Carrosserie Générale', 'Propreté']
                       ] : [
                           'Papiers du véhicule' => ['Carte Grise', 'Assurance', 'Vignette', 'Contrôle technique', 'Permis de circuler', 'Carte Carburant'],
                           'Accessoires Intérieur' => ['Triangle', 'Cric', 'Manivelle/Clé', 'Gilet', 'Tapis', 'Extincteur', 'Trousse de secours', 'Rétroviseur intérieur', 'Pare-soleil', 'Autoradio', 'Propreté'],
                           'Pneumatiques' => ['Roue AV Gauche', 'Roue AV Droite', 'Roue AR Gauche', 'Roue AR Droite', 'Roue de Secours', 'Enjoliveurs'],
                           'État Extérieur' => ['Vitres', 'Pare-brise', 'Rétroviseur Gauche', 'Rétroviseur Droit', 'Verrouillage', 'Poignées', 'Feux avant', 'Feux arrières', 'Essuie-glaces', 'Carrosserie Générale']
                       ];
                       $binaryStatuses = ['Oui', 'Non', 'N/A'];
                       $conditionStatuses = ['Bon', 'Moyen', 'Mauvais', 'N/A'];
                   @endphp

                   @foreach($checklist as $category => $items)
                       <div class="mb-6 pt-4 border-t border-gray-100 first:border-t-0 first:pt-0">
                           <h4 class="font-semibold text-gray-700 mb-4">{{ $category }}</h4>
                           <div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4">
                               @foreach($items as $item)
                                   @php
                                       $statusesToUse = in_array($category, ['Papiers du véhicule', 'Accessoires Intérieur', 'Papiers & Accessoires']) ? $binaryStatuses : $conditionStatuses;
                                   @endphp
                                   <x-handover-status-switcher :item="$item" :category="$category" :statuses="$statusesToUse" />
                               @endforeach
                           </div>
                       </div>
                   @endforeach
               </div>

               {{-- CARTE 4: SIGNATURES ET ACTIONS --}}
               <div class="bg-white p-6 shadow-sm sm:rounded-lg">
                   <div class="grid grid-cols-1 md:grid-cols-2 gap-8 mt-8 pt-8">
                       <div class="border-t-2 border-gray-300 pt-2">
                           <p class="text-center font-semibold text-gray-700">Signature du Chauffeur</p>
                       </div>
                        <div class="border-t-2 border-gray-300 pt-2">
                           <p class="text-center font-semibold text-gray-700">Signature du Responsable</p>
                       </div>
                   </div>
                    <div class="flex items-center justify-end mt-8 gap-4 border-t border-gray-200 pt-6">
                       <a href="{{ route('admin.assignments.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Annuler</a>
                       <button type="submit" class="inline-flex items-center px-6 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700">
                           Créer et Imprimer la Fiche
                       </button>
                   </div>
               </div>
           </form>
       </div>
   </div>
</x-app-layout>
--- END OF FILE: ./resources/views/admin/handovers/vehicles/create.blade.php ---


#############################################
./resources/views/admin/handovers/vehicles/edit.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __("Fiche de Remise de Véhicule") }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-5xl mx-auto sm:px-6 lg:px-8">
            <form action="{{ route('admin.handovers.vehicles.store') }}" method="POST" class="space-y-6">
                @csrf
                <input type="hidden" name="assignment_id" value="{{ $assignment->id }}">

                {{-- CARTE 1: INFORMATIONS GÉNÉRALES --}}
                <div class="bg-white p-6 shadow-sm sm:rounded-lg">
                    <div class="text-center mb-6">
                        <h3 class="text-3xl font-bold text-gray-900 mb-2">FICHE DE REMISE DE VÉHICULE</h3>
                        <p class="text-sm text-gray-500">Pour l'Affectation N° {{ $assignment->id }}</p>
                    </div>

                    {{-- Conteneur Flex pour Date à droite et Infos à gauche --}}
                    <div class="flex flex-col md:flex-row justify-between gap-x-8 text-sm">
                        
                        {{-- Partie gauche : Informations principales --}}
                        <div class="flex-grow">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6 border rounded-md p-6">
                                <div>
                                    <p class="text-gray-500 font-semibold">Chauffeur</p>
                                    <p class="font-bold text-lg text-gray-900">{{ $assignment->driver->first_name }} {{ $assignment->driver->last_name }}</p>
                                    <p class="text-gray-600">Matricule: {{ $assignment->driver->employee_number ?? 'N/A' }}</p>
                                    <p class="text-gray-600">Téléphone: {{ $assignment->driver->personal_phone ?? 'N/A' }}</p>
                                </div>
                                <div>
                                    <p class="text-gray-500 font-semibold">Véhicule</p>
                                    <p class="font-bold text-lg text-gray-900">{{ $assignment->vehicle->brand }} {{ $assignment->vehicle->model }}</p>
                                    <p class="text-gray-600 font-mono">{{ $assignment->vehicle->registration_plate }}</p>
                                    <p class="text-gray-600">Kilométrage Actuel: {{ $assignment->vehicle->current_mileage }} km</p>
                                </div>
                            </div>
                            
                            {{-- Champ "Motif" déplacé ici --}}
                            <div class="mt-4 border rounded-md p-6">
                                <label for="reason" class="block font-medium text-sm text-gray-700">Motif de l'Affectation</label>
                                <x-text-input id="reason" name="reason" type="text" class="mt-1 block w-full" :value="old('reason', $assignment->reason)" placeholder="Indiquer le motif de l'affectation" />
                                <x-input-error :messages="$errors->get('reason')" class="mt-2" />
                            </div>
                        </div>

                        {{-- Partie droite : Date de remise --}}
                        <div class="flex-shrink-0 w-full md:w-1/3 mt-6 md:mt-0">
                             <div class="border rounded-md p-6 h-full">
                                <label for="issue_date" class="block font-medium text-sm text-gray-700">Date de Remise <span class="text-red-500">*</span></label>
                                <x-text-input id="issue_date" name="issue_date" type="date" class="mt-1 block w-full" :value="old('issue_date', now()->format('Y-m-d'))" required />
                                <x-input-error :messages="$errors->get('issue_date')" class="mt-2" />
                            </div>
                        </div>

                    </div>
                </div>

                {{-- CARTE 2: ÉTAT VISUEL ET OBSERVATIONS --}}
                <div class="bg-white p-6 shadow-sm sm:rounded-lg">
                    <h3 class="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-4 mb-6">État Visuel du Véhicule</h3>
                    <div class="flex flex-col md:flex-row gap-6 border rounded-md p-6">
                        <div class="flex-shrink-0 mx-auto bg-gray-100 p-4 rounded-md shadow-inner">
                            @if($assignment->vehicle->vehicleType->name === 'Moto')
                                <img src="{{ asset('images/scooter_sketch.png') }}" alt="Croquis Scooter" class="w-32 rounded">
                            @else
                                <img src="{{ asset('images/car_sketch.png') }}" alt="Croquis Voiture" class="w-48 rounded">
                            @endif
                        </div>
                        <div class="flex-1">
                            <label for="general_observations" class="block font-medium text-sm text-gray-700">Observations sur l'état extérieur (rayures, bosses, etc.)</label>
                            <textarea name="general_observations" id="general_observations" rows="5" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">{{ old('general_observations') }}</textarea>
                            <x-input-error :messages="$errors->get('general_observations')" class="mt-2" />
                        </div>
                    </div>
                </div>

                {{-- CARTE 3: CHECKLIST DÉTAILLÉE --}}
                <div class="bg-white p-6 shadow-sm sm:rounded-lg">
                    <h3 class="text-lg font-semibold text-gray-900 border-b border-gray-200 pb-4 mb-6">Checklist des Équipements</h3>
                    @php
                        $isMoto = $assignment->vehicle->vehicleType->name === 'Moto';
                        $checklistConfig = $isMoto ? [
                            'Papiers & Accessoires' => ['Carte Grise', 'Assurance', 'Carte Carburant', 'Clé', 'Casque', 'Top-case'],
                            'État Général' => ['Pneu Avant', 'Pneu Arrière', 'Saute-vent', 'Rétroviseur Gauche', 'Rétroviseur Droit', 'Verrouillage', 'Feux avant', 'Feux arrières', 'Carrosserie Générale', 'Propreté']
                        ] : [
                            'Papiers du véhicule' => ['Carte Grise', 'Assurance', 'Vignette', 'Contrôle technique', 'Permis de circuler', 'Carte Carburant'],
                            'Accessoires Intérieur' => ['Triangle', 'Cric', 'Manivelle/Clé', 'Gilet', 'Tapis', 'Extincteur', 'Trousse de secours', 'Rétroviseur intérieur', 'Pare-soleil', 'Autoradio', 'Propreté'],
                            'Pneumatiques' => ['Roue AV Gauche', 'Roue AV Droite', 'Roue AR Gauche', 'Roue AR Droite', 'Roue de Secours', 'Enjoliveurs'],
                            'État Extérieur' => ['Vitres', 'Pare-brise', 'Rétroviseur Gauche', 'Rétroviseur Droit', 'Verrouillage', 'Poignées', 'Feux avant', 'Feux arrières', 'Essuie-glaces', 'Carrosserie Générale']
                        ];
                        $binaryStatuses = ['Oui', 'Non', 'N/A'];
                        $conditionStatuses = ['Bon', 'Moyen', 'Mauvais', 'N/A'];
                    @endphp

                    @if($isMoto)
                        {{-- Affichage standard pour les motos --}}
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                             @foreach($checklistConfig as $category => $items)
                                <div class="bg-gray-50 rounded-md p-4 border border-gray-200">
                                    <h4 class="font-semibold text-gray-700 mb-3">{{ $category }}</h4>
                                    <div class="space-y-2">
                                        @foreach($items as $item)
                                            @php
                                                $statusesToUse = $category === 'Papiers & Accessoires' ? $binaryStatuses : $conditionStatuses;
                                            @endphp
                                            <div class="bg-white rounded-md shadow-sm p-2">
                                                <x-handover-status-switcher :item="$item" :category="$category" :statuses="$statusesToUse" />
                                            </div>
                                        @endforeach
                                    </div>
                                </div>
                            @endforeach
                        </div>
                    @else
                        {{-- Affichage réorganisé pour les voitures --}}
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            {{-- Colonne de gauche --}}
                            <div class="space-y-6">
                                {{-- Section: Papiers du véhicule --}}
                                <div class="bg-gray-50 rounded-md p-4 border border-gray-200">
                                    <h4 class="font-semibold text-gray-700 mb-3">Papiers du véhicule</h4>
                                    <div class="space-y-2">
                                        @foreach($checklistConfig['Papiers du véhicule'] as $item)
                                            <div class="bg-white rounded-md shadow-sm p-2">
                                                 <x-handover-status-switcher :item="$item" category="Papiers du véhicule" :statuses="$binaryStatuses" />
                                            </div>
                                        @endforeach
                                    </div>
                                </div>
                                {{-- Section: Accessoires Intérieur --}}
                                <div class="bg-gray-50 rounded-md p-4 border border-gray-200">
                                    <h4 class="font-semibold text-gray-700 mb-3">Accessoires Intérieur</h4>
                                    <div class="space-y-2">
                                        @foreach($checklistConfig['Accessoires Intérieur'] as $item)
                                            <div class="bg-white rounded-md shadow-sm p-2">
                                                 <x-handover-status-switcher :item="$item" category="Accessoires Intérieur" :statuses="$binaryStatuses" />
                                            </div>
                                        @endforeach
                                    </div>
                                </div>
                            </div>

                            {{-- Colonne de droite --}}
                            <div class="space-y-6">
                                {{-- Section: Pneumatiques --}}
                                <div class="bg-gray-50 rounded-md p-4 border border-gray-200">
                                    <h4 class="font-semibold text-gray-700 mb-3">Pneumatiques</h4>
                                    <div class="space-y-2">
                                        @foreach($checklistConfig['Pneumatiques'] as $item)
                                            <div class="bg-white rounded-md shadow-sm p-2">
                                                 <x-handover-status-switcher :item="$item" category="Pneumatiques" :statuses="$conditionStatuses" />
                                            </div>
                                        @endforeach
                                    </div>
                                </div>
                                {{-- Section: État Extérieur --}}
                                <div class="bg-gray-50 rounded-md p-4 border border-gray-200">
                                    <h4 class="font-semibold text-gray-700 mb-3">État Extérieur</h4>
                                    <div class="space-y-2">
                                        @foreach($checklistConfig['État Extérieur'] as $item)
                                            <div class="bg-white rounded-md shadow-sm p-2">
                                                 <x-handover-status-switcher :item="$item" category="État Extérieur" :statuses="$conditionStatuses" />
                                            </div>
                                        @endforeach
                                    </div>
                                </div>
                            </div>
                        </div>
                    @endif
                </div>

                {{-- CARTE 4: SIGNATURES ET ACTIONS --}}
                <div class="bg-white p-6 shadow-sm sm:rounded-lg">
                    <div class="flex items-center justify-end mt-8 gap-4 border-t border-gray-200 pt-6">
                        <a href="{{ route('admin.assignments.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Annuler</a>
                        <button type="submit" class="inline-flex items-center px-6 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700">
                            Créer et Imprimer la Fiche
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</x-app-layout>


--- END OF FILE: ./resources/views/admin/handovers/vehicles/edit.blade.php ---


#############################################
./resources/views/admin/roles/edit.blade.php
#############################################
{{-- resources/views/admin/roles/edit.blade.php --}}
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Modifier le Rôle :') }} <span class="text-violet-700">{{ $role->name }}</span>
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900">
                    <h3 class="text-xl font-semibold text-gray-700 mb-6">{{ __('Assigner les Permissions') }}</h3>

                    <form method="POST" action="{{ route('admin.roles.update', $role) }}">
                        @csrf
                        @method('PUT')

                        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                            @forelse ($permissions as $permission)
                                <div class="flex items-center p-2 border rounded-md">
                                    <input type="checkbox"
                                           name="permissions[]"
                                           id="permission_{{ $permission->id }}"
                                           value="{{ $permission->id }}"
                                           class="h-4 w-4 rounded border-gray-300 text-violet-600 focus:ring-violet-500"
                                           @if($role->hasPermissionTo($permission)) checked @endif>
                                    <label for="permission_{{ $permission->id }}" class="ml-3 block text-sm font-medium text-gray-700">
                                        {{ $permission->name }}
                                    </label>
                                </div>
                            @empty
                                <p class="text-gray-500">Aucune permission trouvée. Veuillez exécuter le seeder.</p>
                            @endforelse
                        </div>

                        <div class="mt-8 flex items-center justify-end gap-4">
                            <a href="{{ route('admin.roles.index') }}" class="inline-flex items-center px-4 py-2 bg-white border border-gray-300 rounded-md font-semibold text-xs text-gray-700 uppercase tracking-widest shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-violet-500 focus:ring-offset-2 disabled:opacity-25 transition ease-in-out duration-150">
                                {{ __('Annuler') }}
                            </a>

                            <button type="submit" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-violet-500 transition ease-in-out duration-150">
                                {{ __('Mettre à jour les Permissions') }}
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/roles/edit.blade.php ---


#############################################
./resources/views/admin/roles/index.blade.php
#############################################
{{-- resources/views/admin/roles/index.blade.php --}}
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Administration - Gestion des Rôles') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            @if (session('success'))
                <div class="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4" role="alert">
                    <p class="font-bold">{{ session('success') }}</p>
                </div>
            @endif

            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    <h3 class="text-xl font-semibold text-gray-700 mb-6">{{ __('Liste des Rôles') }}</h3>
                    <div class="overflow-x-auto border border-gray-200 rounded-lg">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">ID</th>
                                    <th scope="col" class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Nom du Rôle</th>
                                    <th scope="col" class="relative px-6 py-3"><span class="sr-only">Actions</span></th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach ($roles as $role)
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{{ $role->id }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-800">{{ $role->name }}</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                            <a href="{{ route('admin.roles.edit', $role) }}" class="text-violet-600 hover:text-violet-900">Gérer les Permissions</a>
                                        </td>
                                    </tr>
                                @endforeach
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/roles/index.blade.php ---


#############################################
./resources/views/admin/assignments/create.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Créer une Nouvelle Affectation') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900">
                    <h3 class="text-xl font-semibold text-gray-700 mb-6">Détails de l'Affectation</h3>

                    @if ($errors->any())
                        <div class="mb-4 bg-red-100 border-l-4 border-red-500 text-red-700 p-4" role="alert">
                            <p class="font-bold">Veuillez corriger les erreurs :</p>
                            <ul class="mt-2 list-disc list-inside">@foreach ($errors->all() as $error)<li>{{ $error }}</li>@endforeach</ul>
                        </div>
                    @endif

                    <form method="POST" action="{{ route('admin.assignments.store') }}">
                        @csrf
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">

                            <div>
                                <label for="select-vehicle" class="block font-medium text-sm text-gray-700">Véhicule <span class="text-red-500">*</span></label>
                                <select name="vehicle_id" id="select-vehicle" placeholder="Recherchez une immatriculation, marque..." required>
                                    <option value="">Sélectionnez un véhicule disponible</option>
                                    @foreach($availableVehicles as $vehicle)
                                        <option value="{{ $vehicle->id }}" @selected(old('vehicle_id') == $vehicle->id)>
                                            {{ $vehicle->brand }} {{ $vehicle->model }} ({{ $vehicle->registration_plate }})
                                        </option>
                                    @endforeach
                                </select>
                                <x-input-error :messages="$errors->get('vehicle_id')" class="mt-2" />
                            </div>

                            <div>
                                <label for="select-driver" class="block font-medium text-sm text-gray-700">Chauffeur <span class="text-red-500">*</span></label>
                                <select name="driver_id" id="select-driver" placeholder="Recherchez un chauffeur..." required>
                                    <option value="">Sélectionnez un chauffeur disponible</option>
                                    @foreach($availableDrivers as $driver)
                                        <option value="{{ $driver->id }}" @selected(old('driver_id') == $driver->id)>{{ $driver->first_name }} {{ $driver->last_name }}</option>
                                    @endforeach
                                </select>
                                 <x-input-error :messages="$errors->get('driver_id')" class="mt-2" />
                            </div>

                            <div>
                                <label for="start_datetime" class="block font-medium text-sm text-gray-700">Date et Heure de Début <span class="text-red-500">*</span></label>
                                <x-text-input id="start_datetime" class="block mt-1 w-full" type="datetime-local" name="start_datetime" :value="old('start_datetime', now()->format('Y-m-d\TH:i'))" required />
                            </div>

                            <div>
                                <label for="start_mileage" class="block font-medium text-sm text-gray-700">Kilométrage de Début <span class="text-red-500">*</span></label>
                                <x-text-input id="start_mileage" class="block mt-1 w-full" type="number" name="start_mileage" :value="old('start_mileage')" required />
                            </div>

                            <div class="md:col-span-2">
                                <label for="reason" class="block font-medium text-sm text-gray-700">Motif de l'affectation</label>
                                <x-text-input id="reason" name="reason" :value="old('reason')" class="block mt-1 w-full" type="text" />
                            </div>

                            <div class="md:col-span-2">
                                <label for="notes" class="block font-medium text-sm text-gray-700">Notes</label>
                                <textarea id="notes" name="notes" rows="3" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">{{ old('notes') }}</textarea>
                            </div>
                        </div>

                        <div class="mt-8 flex items-center justify-end gap-4">
                            <a href="{{ route('admin.assignments.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Annuler</a>
                            <button type="submit" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                Créer l'Affectation
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @push('scripts')
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // On s'assure que TomSelect a été chargé (depuis app.js)
            if (window.TomSelect) {
                // --- CORRECTION DÉFINITIVE DE LA LOGIQUE ---
                // 1. On prépare un objet JS simple: { id_vehicule: kilometrage, ... }
                const vehicleMileageData = @json($availableVehicles->pluck('current_mileage', 'id'));
                const mileageInput = document.getElementById('start_mileage');

                // 2. On initialise TomSelect pour les véhicules
                let tomSelectVehicle = new TomSelect('#select-vehicle',{
                    create: false,
                    sortField: { field: "text", direction: "asc" },
                    onChange: function(value) {
                        // 3. Au changement, on utilise notre objet JS pour trouver le kilométrage
                        if (mileageInput && value && vehicleMileageData[value] !== undefined) {
                            mileageInput.value = vehicleMileageData[value];
                        } else if (mileageInput) {
                            mileageInput.value = '';
                        }
                    }
                });

                // On initialise TomSelect pour les chauffeurs (sans logique additionnelle)
                new TomSelect('#select-driver',{
                    create: false,
                    sortField: { field: "text", direction: "asc" }
                });

                // 4. Si la page est rechargée après une erreur de validation,
                // on s'assure que le kilométrage est bien pré-rempli pour la valeur "old()".
                if (tomSelectVehicle.getValue()) {
                    tomSelectVehicle.trigger('change', tomSelectVehicle.getValue());
                }
            }
        });
    </script>
    @endpush
</x-app-layout>

--- END OF FILE: ./resources/views/admin/assignments/create.blade.php ---


#############################################
./resources/views/admin/assignments/edit.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Modifier une Affectation') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-4xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-8 text-gray-900">

                    {{-- Section d'information (non modifiable) --}}
                    <div class="mb-8 border-b pb-6">
                        <h3 class="text-lg font-semibold text-gray-800">Résumé de l'Affectation</h3>
                        <div class="mt-4 grid grid-cols-1 md:grid-cols-2 gap-6 text-sm">

                            {{-- Carte Chauffeur --}}
                            <div class="p-4 border rounded-lg flex items-center space-x-4">
                                <div class="flex-shrink-0">
                                    @if($assignment->driver?->photo_path)
                                        <img class="h-16 w-16 rounded-full object-cover" src="{{ asset('storage/' . $assignment->driver->photo_path) }}" alt="Photo">
                                    @else
                                        <span class="h-16 w-16 rounded-full bg-gray-200 flex items-center justify-center">
                                            <svg class="h-10 w-10 text-gray-400" fill="currentColor" viewBox="0 0 24 24"><path d="M24 20.993V24H0v-2.997A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" /></svg>
                                        </span>
                                    @endif
                                </div>
                                <div>
                                    <p class="text-gray-500">Chauffeur</p>
                                    <p class="font-bold text-lg text-gray-900">{{ $assignment->driver?->first_name }} {{ $assignment->driver?->last_name }}</p>
                                    <p class="text-gray-600">{{ $assignment->driver?->personal_phone }}</p>
                                </div>
                            </div>

                            {{-- Carte Véhicule --}}
                            <div class="p-4 border rounded-lg">
                                 <p class="text-gray-500">Véhicule</p>
                                 <p class="font-bold text-lg text-gray-900">{{ $assignment->vehicle?->brand }} {{ $assignment->vehicle?->model }}</p>
                                 <p class="text-gray-600 font-mono">{{ $assignment->vehicle?->registration_plate }}</p>
                            </div>

                            {{-- Dates --}}
                            <div class="p-4 border rounded-lg">
                                <p class="text-gray-500">Début de l'affectation</p>
                                <p class="font-semibold text-gray-900">{{ $assignment->start_datetime->format('d/m/Y à H:i') }}</p>
                            </div>
                            <div class="p-4 border rounded-lg">
                                <p class="text-gray-500">Fin de l'affectation</p>
                                <p class="font-semibold text-gray-900">{{ $assignment->end_datetime ? $assignment->end_datetime->format('d/m/Y à H:i') : 'En cours' }}</p>
                            </div>
                        </div>
                    </div>

                    {{-- Formulaire de modification --}}
                    <form method="POST" action="{{ route('admin.assignments.update', $assignment) }}">
                        @csrf
                        @method('PUT')
                        <div class="space-y-6">
                            <div>
                                <label for="reason" class="block font-medium text-sm text-gray-700">Motif de l'affectation</label>
                                <x-text-input id="reason" class="block mt-1 w-full" type="text" name="reason" :value="old('reason', $assignment->reason)" />
                                <x-input-error :messages="$errors->get('reason')" class="mt-2" />
                            </div>
                            <div>
                                <label for="notes" class="block font-medium text-sm text-gray-700">Notes Complémentaires</label>
                                <textarea id="notes" name="notes" rows="4" class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">{{ old('notes', $assignment->notes) }}</textarea>
                                <x-input-error :messages="$errors->get('notes')" class="mt-2" />
                            </div>
                        </div>

                        <div class="mt-8 flex items-center justify-end gap-4">
                            <a href="{{ route('admin.assignments.index') }}" class="text-sm font-semibold text-gray-600 hover:text-gray-900">Retour à la liste</a>
                            <button type="submit" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                Enregistrer les Modifications
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/assignments/edit.blade.php ---


#############################################
./resources/views/admin/assignments/index.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Gestion des Affectations') }}
        </h2>
    </x-slot>

    <div x-data="{
            showEndModal: false,
            assignmentToEnd: {},
            endFormUrl: '',
            modalErrors: {},
            isSubmitting: false,
            openEndModal(event) {
                const button = event.currentTarget;
                this.assignmentToEnd = JSON.parse(button.dataset.assignment);
                this.endFormUrl = button.dataset.url;
                this.modalErrors = {};
                this.showEndModal = true;
            },
            async submitEndForm() {
                this.isSubmitting = true;
                this.modalErrors = {};
                const formData = new FormData(this.$refs.endForm);
                try {
                    const response = await fetch(this.endFormUrl, {
                        method: 'POST',
                        headers: {
                            'X-CSRF-TOKEN': document.querySelector('meta[name=csrf-token]').content,
                            'X-Requested-With': 'XMLHttpRequest',
                            'Accept': 'application/json',
                        },
                        body: formData,
                    });
                    const data = await response.json();
                    if (!response.ok) {
                        if (response.status === 422) { this.modalErrors = data.errors; }
                        else { throw new Error(data.message || 'Une erreur serveur est survenue.'); }
                    } else {
                        this.showEndModal = false;
                        window.location.reload();
                    }
                } catch (error) {
                    this.modalErrors = { general: [error.message] };
                } finally {
                    this.isSubmitting = false;
                }
            }
        }"
         class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">

            {{-- SECTION FILTRES, RECHERCHE ET PAGINATION --}}
            <div class="mb-6 bg-white p-4 shadow-sm sm:rounded-lg">
                <form action="{{ route('admin.assignments.index') }}" method="GET">
                    <div class="flex flex-col md:flex-row md:items-end md:space-x-4 space-y-2 md:space-y-0">
                        <div class="flex-grow">
                            <label for="search" class="block text-sm font-medium text-gray-700">Recherche</label>
                            <input type="text" name="search" id="search" value="{{ $filters['search'] ?? '' }}" placeholder="Immat, marque, chauffeur..." class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                        </div>
                        <div class="flex-shrink-0">
                            <label for="status" class="block text-sm font-medium text-gray-700">Statut</label>
                            <select name="status" id="status" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                                <option value="">Tous</option>
                                <option value="en_cours" @selected(($filters['status'] ?? '') == 'en_cours')>En cours</option>
                                <option value="terminee" @selected(($filters['status'] ?? '') == 'terminee')>Terminées</option>
                            </select>
                        </div>
                        <div class="flex-shrink-0">
                            <label for="per_page" class="block text-sm font-medium text-gray-700">Par page</label>
                            <select name="per_page" id="per_page" onchange="this.form.submit()" class="mt-1 block w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm text-sm">
                                @foreach(['15', '30', '50'] as $value)
                                    <option value="{{ $value }}" @selected(($filters['per_page'] ?? '15') == $value)>{{ $value }}</option>
                                @endforeach
                            </select>
                        </div>
                        <div class="flex-shrink-0 flex space-x-2">
                            <button type="submit" class="inline-flex items-center justify-center w-full px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-violet-600 hover:bg-violet-700">Filtrer</button>
                            <a href="{{ route('admin.assignments.index') }}" class="inline-flex items-center justify-center w-full px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Reset</a>
                        </div>
                    </div>
                </form>
            </div>

            @if (session('success'))
                <div class="mb-4 bg-green-100 border-l-4 border-green-500 text-green-700 p-4" role="alert"><p class="font-bold">{{ session('success') }}</p></div>
            @endif

            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    <div class="flex justify-between items-center mb-6">
                        <h3 class="text-xl font-semibold text-gray-700">Historique des Affectations</h3>
                        @can('create assignments')
                            <a href="{{ route('admin.assignments.create') }}" class="inline-flex items-center px-4 py-2 bg-violet-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-violet-700">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path></svg>
                                Nouvelle Affectation
                            </a>
                        @endcan
                    </div>

                    <div class="overflow-x-auto border border-gray-200 rounded-lg">
                        <table class="w-full divide-y divide-gray-200">
                            <thead class="bg-gray-100">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Chauffeur</th>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Véhicule</th>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Période</th>
                                    <th class="px-6 py-3 text-left text-xs font-bold text-gray-600 uppercase tracking-wider">Statut</th>
                                    <th class="px-6 py-3 text-right text-xs font-bold text-gray-600 uppercase tracking-wider">Actions</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @forelse ($assignments as $assignment)
                                    <tr class="hover:bg-gray-50">
                                        <td class="px-6 py-2 whitespace-nowrap">
                                            <div class="flex items-center">
                                                <div class="flex-shrink-0 h-10 w-10">
                                                    @if($assignment->driver?->photo_path)
                                                        <img class="h-10 w-10 rounded-full object-cover" src="{{ asset('storage/' . $assignment->driver->photo_path) }}" alt="Photo de {{ $assignment->driver->first_name }}">
                                                    @else
                                                        <span class="h-10 w-10 rounded-full bg-gray-200 flex items-center justify-center"><svg class="h-6 w-6 text-gray-400" fill="currentColor" viewBox="0 0 24 24"><path d="M24 20.993V24H0v-2.997A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" /></svg></span>
                                                    @endif
                                                </div>
                                                <div class="ml-4">
                                                    <div class="text-sm font-semibold text-gray-900">{{ $assignment->driver?->first_name }} {{ $assignment->driver?->last_name }}</div>
                                                    <div class="text-sm text-gray-500">{{ $assignment->driver?->personal_phone ?? '' }}</div>
                                                </div>
                                            </div>
                                        </td>
                                        <td class="px-6 py-2 whitespace-nowrap"><div class="text-sm font-medium text-gray-900">{{ $assignment->vehicle?->brand }} {{ $assignment->vehicle?->model }}</div><div class="text-xs text-gray-500 font-mono">{{ $assignment->vehicle?->registration_plate }}</div></td>
                                        <td class="px-6 py-2 whitespace-nowrap text-sm text-gray-500">
                                            <div>De: {{ $assignment->start_datetime->format('d/m/Y H:i') }}</div>
                                            <div>À: @if($assignment->end_datetime) {{ $assignment->end_datetime->format('d/m/Y H:i') }} @else - @endif</div>
                                        </td>
                                        <td class="px-6 py-2 whitespace-nowrap text-sm">
                                            @if(is_null($assignment->end_datetime))
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-green-100 text-green-800">En cours</span>
                                            @else
                                                <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-gray-100 text-gray-800">Terminée</span>
                                            @endif
                                        </td>
                                        <td class="px-6 py-3 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex items-center justify-end space-x-2">

                                        {{-- Bouton pour la Fiche de Remise --}}
                                        @can('create assignments')
                                            @if($assignment->handoverForm)
                                                <a href="{{ route('admin.handovers.vehicles.show', $assignment->handoverForm) }}" title="Voir la Fiche de Remise" class="p-2 rounded-full text-violet-600 bg-violet-100 hover:bg-violet-200">
                                                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
                                                </a>
                                            @else
                                                {{-- CORRECTION : Le lien pointe maintenant vers la bonne route avec le bon paramètre --}}
                                                <a href="{{ route('admin.handovers.vehicles.create', ['assignment' => $assignment->id]) }}" title="Créer Fiche de Remise" class="p-2 rounded-full text-gray-400 hover:bg-blue-100 hover:text-blue-600">
                                                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9 13h6m-3-3v6m5 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path></svg>
                                                </a>
                                            @endif
                                        @endcan
                                        
                                        @can('edit assignments')
                                            <a href="{{ route('admin.assignments.edit', $assignment) }}" title="Modifier les notes" class="p-2 rounded-full text-gray-400 hover:bg-violet-100 hover:text-violet-600">
                                                <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.536L16.732 3.732z" /></svg>
                                            </a>
                                        @endcan



                                        @if(is_null($assignment->end_datetime))
                                            @can('end assignments')
                                                <button type="button" @click="openEndModal($event)" data-assignment='@json($assignment->load('vehicle'))' data-url="{{ route('admin.assignments.end', $assignment) }}" title="Terminer l'affectation" class="p-2 rounded-full text-gray-400 hover:bg-yellow-100 hover:text-yellow-600">
                                                    <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2"><path stroke-linecap="round" stroke-linejoin="round" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" /></svg>
                                                </button>
                                            @endcan
                                        @endif
                                    </div>
                                </td>
                                    </tr>
                                @empty
                                    <tr><td colspan="5" class="px-6 py-4 text-center text-sm text-gray-500">Aucune affectation trouvée pour les critères sélectionnés.</td></tr>
                                @endforelse
                            </tbody>
                        </table>
                    </div>
                    <div class="mt-6">{{ $assignments->withQueryString()->links() }}</div>
                </div>
            </div>
        </div>

        {{-- La modale pour terminer l'affectation est identique à la version précédente et fonctionnelle --}}
        <div x-show="showEndModal" x-transition class="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-60" style="display: none;">
            <div @click.away="showEndModal = false" class="bg-white rounded-lg shadow-xl p-6 w-full max-w-lg mx-4">
                <div class="sm:flex sm:items-start">
                    <div class="mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-violet-100 sm:mx-0 sm:h-10 sm:w-10">
                        <svg class="h-6 w-6 text-violet-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" d="M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" /></svg>
                    </div>
                    <div class="mt-3 text-center sm:ml-4 sm:mt-0 sm:text-left">
                         <h3 class="text-base font-semibold leading-6 text-gray-900">Terminer l'Affectation</h3>
                        <div class="mt-2">
                            <p class="text-sm text-gray-600">
                                Veuillez renseigner les informations de fin pour le véhicule <strong x-text="assignmentToEnd.vehicle?.registration_plate"></strong>.
                            </p>
                        </div>
                    </div>
                </div>

                {{-- Zone d'affichage des erreurs de validation AJAX --}}
                <div x-show="Object.keys(modalErrors).length > 0" class="mt-4 bg-red-50 p-3 rounded-md text-sm" style="display: none;">
                    <ul class="list-disc list-inside text-red-600">
                        <template x-for="errorMessages in Object.values(modalErrors)">
                            <template x-for="message in errorMessages">
                                <li x-text="message"></li>
                            </template>
                        </template>
                    </ul>
                </div>

                <form @submit.prevent="submitEndForm" x-ref="endForm" class="mt-4 space-y-4">
                    @csrf @method('PATCH')
                    <div>
                        <label for="end_datetime" class="block font-medium text-sm text-gray-700">Date et Heure de Fin <span class="text-red-500">*</span></label>
                        <input id="end_datetime" type="datetime-local" name="end_datetime" required class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                    </div>
                    <div>
                        <label for="end_mileage" class="block font-medium text-sm text-gray-700">Kilométrage de Fin <span class="text-red-500">*</span></label>
                        <input id="end_mileage" type="number" name="end_mileage" :min="assignmentToEnd.start_mileage" required class="block mt-1 w-full border-gray-300 focus:border-violet-500 focus:ring-violet-500 rounded-md shadow-sm">
                    </div>
                    <div class="mt-6 sm:flex sm:flex-row-reverse">
                        <button type="submit" :disabled="isSubmitting" class="inline-flex w-full justify-center rounded-md bg-violet-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-violet-700 sm:ml-3 sm:w-auto disabled:opacity-50">
                            <span x-show="!isSubmitting">Confirmer et Terminer</span>
                            <span x-show="isSubmitting">Enregistrement...</span>
                        </button>
                        <button type="button" @click="showEndModal = false" class="mt-3 inline-flex w-full justify-center rounded-md bg-white px-4 py-2 text-sm font-semibold text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 sm:mt-0 sm:w-auto">Annuler</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/admin/assignments/index.blade.php ---


#############################################
./resources/views/dashboard.blade.php
#############################################
<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Dashboard') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-7xl mx-auto sm:px-6 lg:px-8">
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6 text-gray-900">
                    {{ __("You're logged in!") }}
                </div>
            </div>
        </div>
    </div>
</x-app-layout>

--- END OF FILE: ./resources/views/dashboard.blade.php ---


#############################################
./routes/channels.php
#############################################
<?php

use Illuminate\Support\Facades\Broadcast;

/*
|--------------------------------------------------------------------------
| Broadcast Channels
|--------------------------------------------------------------------------
|
| Here you may register all of the event broadcasting channels that your
| application supports. The given channel authorization callbacks are
| used to check if an authenticated user can listen to the channel.
|
*/

Broadcast::channel('App.Models.User.{id}', function ($user, $id) {
    return (int) $user->id === (int) $id;
});

--- END OF FILE: ./routes/channels.php ---


#############################################
./routes/console.php
#############################################
<?php

use Illuminate\Foundation\Inspiring;
use Illuminate\Support\Facades\Artisan;

/*
|--------------------------------------------------------------------------
| Console Routes
|--------------------------------------------------------------------------
|
| This file is where you may define all of your Closure based console
| commands. Each Closure is bound to a command instance allowing a
| simple approach to interacting with each command's IO methods.
|
*/

Artisan::command('inspire', function () {
    $this->comment(Inspiring::quote());
})->purpose('Display an inspiring quote');

--- END OF FILE: ./routes/console.php ---


#############################################
./routes/web.php
#############################################
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\ProfileController;
use App\Http\Controllers\Admin\DashboardController;
use App\Http\Controllers\Admin\UserController;
use App\Http\Controllers\Admin\RoleController;
use App\Http\Controllers\Admin\DriverController;
use App\Http\Controllers\Admin\VehicleController;
use App\Http\Controllers\Admin\AssignmentController;
use App\Http\Controllers\Admin\OrganizationController;
use App\Http\Controllers\Admin\Maintenance\DashboardController as MaintenanceDashboardController;
use App\Http\Controllers\Admin\Maintenance\MaintenancePlanController;
use App\Http\Controllers\Admin\Maintenance\MaintenanceLogController;
use App\Http\Controllers\Admin\Handover\VehicleHandoverController;

/*
|--------------------------------------------------------------------------
| Web Routes
|--------------------------------------------------------------------------
*/

// --- Routes Publiques et Authentification ---
Route::get('/', function () { return view('welcome'); });

Route::middleware('auth')->group(function () {
    Route::get('/dashboard', [DashboardController::class, 'index'])->name('dashboard');
    Route::get('/profile', [ProfileController::class, 'edit'])->name('profile.edit');
    Route::patch('/profile', [ProfileController::class, 'update'])->name('profile.update');
    Route::delete('/profile', [ProfileController::class, 'destroy'])->name('profile.destroy');
});

// --- GROUPE DE ROUTES POUR L'ADMINISTRATION ---
Route::middleware(['auth'])->prefix('admin')->name('admin.')->group(function () {

    // --- Routes accessibles au Super Admin ET aux Admins d'organisation ---
    Route::middleware(['role:Super Admin|Admin'])->group(function() {

        // --- MAINTENANCE ---
        Route::get('/maintenance', [MaintenanceDashboardController::class, 'index'])->name('maintenance.dashboard');
        Route::resource('maintenance/plans', MaintenancePlanController::class)->names('maintenance.plans');
        Route::resource('maintenance/logs', MaintenanceLogController::class)->only(['create', 'store'])->names('maintenance.logs');

        // --- FICHES DE REMISE ---
        Route::get('/assignments/{assignment}/handovers/create', [VehicleHandoverController::class, 'create'])->name('handovers.vehicles.create');
        Route::post('/handovers/{handover}/upload-signed', [VehicleHandoverController::class, 'uploadSigned'])->name('handovers.vehicles.uploadSigned');
        Route::resource('handovers', VehicleHandoverController::class)->names('handovers.vehicles')->except(['create', 'index']);

        // --- GESTION DES RESSOURCES PRINCIPALES ---
        Route::resource('users', UserController::class);
        Route::resource('drivers', DriverController::class);
        Route::resource('vehicles', VehicleController::class);
        Route::resource('assignments', AssignmentController::class);

        // --- ACTIONS SPÉCIFIQUES (ARCHIVAGE, IMPORT, ETC.) ---
        Route::patch('/drivers/{driver}/restore', [DriverController::class, 'restore'])->name('drivers.restore')->withTrashed();
        Route::delete('/drivers/{driver}/force-delete', [DriverController::class, 'forceDelete'])->name('drivers.force-delete')->withTrashed();

        Route::get('/vehicles/import', [VehicleController::class, 'showImportForm'])->name('vehicles.import.show');
        Route::post('/vehicles/import', [VehicleController::class, 'handleImport'])->name('vehicles.import.handle');
        Route::get('/vehicles/import-template', [VehicleController::class, 'downloadTemplate'])->name('vehicles.import.template');
        Route::get('/vehicles/import/results', [VehicleController::class, 'showImportResults'])->name('vehicles.import.results');
        Route::patch('/vehicles/{vehicle}/restore', [VehicleController::class, 'restore'])->name('vehicles.restore')->withTrashed();
        Route::delete('/vehicles/{vehicle}/force-delete', [VehicleController::class, 'forceDelete'])->name('vehicles.force-delete')->withTrashed();
    });

    // --- Routes accessibles UNIQUEMENT au Super Admin ---
    Route::middleware(['role:Super Admin'])->group(function() {
        Route::resource('organizations', OrganizationController::class);
        Route::resource('roles', RoleController::class)->only(['index', 'edit', 'update']);
    });
});

require __DIR__.'/auth.php';
--- END OF FILE: ./routes/web.php ---


#############################################
./routes/auth.php
#############################################
<?php

use App\Http\Controllers\Auth\AuthenticatedSessionController;
use App\Http\Controllers\Auth\ConfirmablePasswordController;
use App\Http\Controllers\Auth\EmailVerificationNotificationController;
use App\Http\Controllers\Auth\EmailVerificationPromptController;
use App\Http\Controllers\Auth\NewPasswordController;
use App\Http\Controllers\Auth\PasswordController;
use App\Http\Controllers\Auth\PasswordResetLinkController;
use App\Http\Controllers\Auth\RegisteredUserController;
use App\Http\Controllers\Auth\VerifyEmailController;
use Illuminate\Support\Facades\Route;

Route::middleware('guest')->group(function () {
    Route::get('register', [RegisteredUserController::class, 'create'])
                ->name('register');

    Route::post('register', [RegisteredUserController::class, 'store']);

    Route::get('login', [AuthenticatedSessionController::class, 'create'])
                ->name('login');

    Route::post('login', [AuthenticatedSessionController::class, 'store']);

    Route::get('forgot-password', [PasswordResetLinkController::class, 'create'])
                ->name('password.request');

    Route::post('forgot-password', [PasswordResetLinkController::class, 'store'])
                ->name('password.email');

    Route::get('reset-password/{token}', [NewPasswordController::class, 'create'])
                ->name('password.reset');

    Route::post('reset-password', [NewPasswordController::class, 'store'])
                ->name('password.store');
});

Route::middleware('auth')->group(function () {
    Route::get('verify-email', EmailVerificationPromptController::class)
                ->name('verification.notice');

    Route::get('verify-email/{id}/{hash}', VerifyEmailController::class)
                ->middleware(['signed', 'throttle:6,1'])
                ->name('verification.verify');

    Route::post('email/verification-notification', [EmailVerificationNotificationController::class, 'store'])
                ->middleware('throttle:6,1')
                ->name('verification.send');

    Route::get('confirm-password', [ConfirmablePasswordController::class, 'show'])
                ->name('password.confirm');

    Route::post('confirm-password', [ConfirmablePasswordController::class, 'store']);

    Route::put('password', [PasswordController::class, 'update'])->name('password.update');

    Route::post('logout', [AuthenticatedSessionController::class, 'destroy'])
                ->name('logout');
});

--- END OF FILE: ./routes/auth.php ---


#############################################
./routes/api.php
#############################################
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

/*
|--------------------------------------------------------------------------
| API Routes
|--------------------------------------------------------------------------
|
| Here is where you can register API routes for your application. These
| routes are loaded by the RouteServiceProvider and all of them will
| be assigned to the "api" middleware group. Make something great!
|
*/

Route::middleware('auth:sanctum')->get('/user', function (Request $request) {
    return $request->user();
});

--- END OF FILE: ./routes/api.php ---


#############################################
./tests/CreatesApplication.php
#############################################
<?php

namespace Tests;

use Illuminate\Contracts\Console\Kernel;
use Illuminate\Foundation\Application;

trait CreatesApplication
{
    /**
     * Creates the application.
     */
    public function createApplication(): Application
    {
        $app = require __DIR__.'/../bootstrap/app.php';

        $app->make(Kernel::class)->bootstrap();

        return $app;
    }
}

--- END OF FILE: ./tests/CreatesApplication.php ---


#############################################
./tests/TestCase.php
#############################################
<?php

namespace Tests;

use Illuminate\Foundation\Testing\TestCase as BaseTestCase;

abstract class TestCase extends BaseTestCase
{
    use CreatesApplication;
}

--- END OF FILE: ./tests/TestCase.php ---


#############################################
./tests/Unit/ExampleTest.php
#############################################
<?php

namespace Tests\Unit;

use PHPUnit\Framework\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_that_true_is_true(): void
    {
        $this->assertTrue(true);
    }
}

--- END OF FILE: ./tests/Unit/ExampleTest.php ---


#############################################
./tests/Feature/Auth/PasswordConfirmationTest.php
#############################################
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class PasswordConfirmationTest extends TestCase
{
    use RefreshDatabase;

    public function test_confirm_password_screen_can_be_rendered(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->get('/confirm-password');

        $response->assertStatus(200);
    }

    public function test_password_can_be_confirmed(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'password',
        ]);

        $response->assertRedirect();
        $response->assertSessionHasNoErrors();
    }

    public function test_password_is_not_confirmed_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/confirm-password', [
            'password' => 'wrong-password',
        ]);

        $response->assertSessionHasErrors();
    }
}

--- END OF FILE: ./tests/Feature/Auth/PasswordConfirmationTest.php ---


#############################################
./tests/Feature/Auth/PasswordUpdateTest.php
#############################################
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Hash;
use Tests\TestCase;

class PasswordUpdateTest extends TestCase
{
    use RefreshDatabase;

    public function test_password_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertTrue(Hash::check('new-password', $user->refresh()->password));
    }

    public function test_correct_password_must_be_provided_to_update_password(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->put('/password', [
                'current_password' => 'wrong-password',
                'password' => 'new-password',
                'password_confirmation' => 'new-password',
            ]);

        $response
            ->assertSessionHasErrorsIn('updatePassword', 'current_password')
            ->assertRedirect('/profile');
    }
}

--- END OF FILE: ./tests/Feature/Auth/PasswordUpdateTest.php ---


#############################################
./tests/Feature/Auth/RegistrationTest.php
#############################################
<?php

namespace Tests\Feature\Auth;

use App\Providers\RouteServiceProvider;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class RegistrationTest extends TestCase
{
    use RefreshDatabase;

    public function test_registration_screen_can_be_rendered(): void
    {
        $response = $this->get('/register');

        $response->assertStatus(200);
    }

    public function test_new_users_can_register(): void
    {
        $response = $this->post('/register', [
            'name' => 'Test User',
            'email' => 'test@example.com',
            'password' => 'password',
            'password_confirmation' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(RouteServiceProvider::HOME);
    }
}

--- END OF FILE: ./tests/Feature/Auth/RegistrationTest.php ---


#############################################
./tests/Feature/Auth/EmailVerificationTest.php
#############################################
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Auth\Events\Verified;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Event;
use Illuminate\Support\Facades\URL;
use Tests\TestCase;

class EmailVerificationTest extends TestCase
{
    use RefreshDatabase;

    public function test_email_verification_screen_can_be_rendered(): void
    {
        $user = User::factory()->create([
            'email_verified_at' => null,
        ]);

        $response = $this->actingAs($user)->get('/verify-email');

        $response->assertStatus(200);
    }

    public function test_email_can_be_verified(): void
    {
        $user = User::factory()->create([
            'email_verified_at' => null,
        ]);

        Event::fake();

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1($user->email)]
        );

        $response = $this->actingAs($user)->get($verificationUrl);

        Event::assertDispatched(Verified::class);
        $this->assertTrue($user->fresh()->hasVerifiedEmail());
        $response->assertRedirect(RouteServiceProvider::HOME.'?verified=1');
    }

    public function test_email_is_not_verified_with_invalid_hash(): void
    {
        $user = User::factory()->create([
            'email_verified_at' => null,
        ]);

        $verificationUrl = URL::temporarySignedRoute(
            'verification.verify',
            now()->addMinutes(60),
            ['id' => $user->id, 'hash' => sha1('wrong-email')]
        );

        $this->actingAs($user)->get($verificationUrl);

        $this->assertFalse($user->fresh()->hasVerifiedEmail());
    }
}

--- END OF FILE: ./tests/Feature/Auth/EmailVerificationTest.php ---


#############################################
./tests/Feature/Auth/AuthenticationTest.php
#############################################
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use App\Providers\RouteServiceProvider;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class AuthenticationTest extends TestCase
{
    use RefreshDatabase;

    public function test_login_screen_can_be_rendered(): void
    {
        $response = $this->get('/login');

        $response->assertStatus(200);
    }

    public function test_users_can_authenticate_using_the_login_screen(): void
    {
        $user = User::factory()->create();

        $response = $this->post('/login', [
            'email' => $user->email,
            'password' => 'password',
        ]);

        $this->assertAuthenticated();
        $response->assertRedirect(RouteServiceProvider::HOME);
    }

    public function test_users_can_not_authenticate_with_invalid_password(): void
    {
        $user = User::factory()->create();

        $this->post('/login', [
            'email' => $user->email,
            'password' => 'wrong-password',
        ]);

        $this->assertGuest();
    }

    public function test_users_can_logout(): void
    {
        $user = User::factory()->create();

        $response = $this->actingAs($user)->post('/logout');

        $this->assertGuest();
        $response->assertRedirect('/');
    }
}

--- END OF FILE: ./tests/Feature/Auth/AuthenticationTest.php ---


#############################################
./tests/Feature/Auth/PasswordResetTest.php
#############################################
<?php

namespace Tests\Feature\Auth;

use App\Models\User;
use Illuminate\Auth\Notifications\ResetPassword;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Support\Facades\Notification;
use Tests\TestCase;

class PasswordResetTest extends TestCase
{
    use RefreshDatabase;

    public function test_reset_password_link_screen_can_be_rendered(): void
    {
        $response = $this->get('/forgot-password');

        $response->assertStatus(200);
    }

    public function test_reset_password_link_can_be_requested(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class);
    }

    public function test_reset_password_screen_can_be_rendered(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) {
            $response = $this->get('/reset-password/'.$notification->token);

            $response->assertStatus(200);

            return true;
        });
    }

    public function test_password_can_be_reset_with_valid_token(): void
    {
        Notification::fake();

        $user = User::factory()->create();

        $this->post('/forgot-password', ['email' => $user->email]);

        Notification::assertSentTo($user, ResetPassword::class, function ($notification) use ($user) {
            $response = $this->post('/reset-password', [
                'token' => $notification->token,
                'email' => $user->email,
                'password' => 'password',
                'password_confirmation' => 'password',
            ]);

            $response
                ->assertSessionHasNoErrors()
                ->assertRedirect(route('login'));

            return true;
        });
    }
}

--- END OF FILE: ./tests/Feature/Auth/PasswordResetTest.php ---


#############################################
./tests/Feature/ProfileTest.php
#############################################
<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ProfileTest extends TestCase
{
    use RefreshDatabase;

    public function test_profile_page_is_displayed(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->get('/profile');

        $response->assertOk();
    }

    public function test_profile_information_can_be_updated(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => 'test@example.com',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $user->refresh();

        $this->assertSame('Test User', $user->name);
        $this->assertSame('test@example.com', $user->email);
        $this->assertNull($user->email_verified_at);
    }

    public function test_email_verification_status_is_unchanged_when_the_email_address_is_unchanged(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->patch('/profile', [
                'name' => 'Test User',
                'email' => $user->email,
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/profile');

        $this->assertNotNull($user->refresh()->email_verified_at);
    }

    public function test_user_can_delete_their_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->delete('/profile', [
                'password' => 'password',
            ]);

        $response
            ->assertSessionHasNoErrors()
            ->assertRedirect('/');

        $this->assertGuest();
        $this->assertNull($user->fresh());
    }

    public function test_correct_password_must_be_provided_to_delete_account(): void
    {
        $user = User::factory()->create();

        $response = $this
            ->actingAs($user)
            ->from('/profile')
            ->delete('/profile', [
                'password' => 'wrong-password',
            ]);

        $response
            ->assertSessionHasErrorsIn('userDeletion', 'password')
            ->assertRedirect('/profile');

        $this->assertNotNull($user->fresh());
    }
}

--- END OF FILE: ./tests/Feature/ProfileTest.php ---


#############################################
./tests/Feature/ExampleTest.php
#############################################
<?php

namespace Tests\Feature;

// use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class ExampleTest extends TestCase
{
    /**
     * A basic test example.
     */
    public function test_the_application_returns_a_successful_response(): void
    {
        $response = $this->get('/');

        $response->assertStatus(200);
    }
}

--- END OF FILE: ./tests/Feature/ExampleTest.php ---

