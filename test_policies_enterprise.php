<?php

/**
 * üîê TEST COMPLET DES POLICIES ENTERPRISE-GRADE
 *
 * Ce script teste l'acc√®s r√©el de l'Admin FADERCO avec les nouvelles Policies
 * Usage: docker compose exec -u zenfleet_user php php test_policies_enterprise.php
 */

require __DIR__ . '/vendor/autoload.php';

$app = require_once __DIR__ . '/bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "üîê TEST DES POLICIES ENTERPRISE - ZENFLEET\n";
echo str_repeat("=", 80) . "\n\n";

// R√©cup√©rer l'admin FADERCO
$admin = App\Models\User::where('email', 'admin@faderco.dz')->first();

if (!$admin) {
    echo "‚ùå Admin admin@faderco.dz introuvable\n";
    exit(1);
}

echo "‚úÖ Utilisateur: {$admin->email}\n";
echo "   Organisation: {$admin->organization->name} (ID: {$admin->organization_id})\n";
echo "   R√¥le: " . $admin->getRoleNames()->implode(', ') . "\n\n";

// Test des Policies
echo "üß™ TEST DES POLICIES\n";
echo str_repeat("=", 80) . "\n\n";

// 1. Test VehiclePolicy
echo "1. üöó VEHICLE POLICY\n";
echo str_repeat("-", 80) . "\n";

$canViewVehicles = $admin->can('viewAny', App\Models\Vehicle::class);
echo "  viewAny (voir tous les v√©hicules): " . ($canViewVehicles ? "‚úÖ" : "‚ùå") . "\n";

$canCreateVehicles = $admin->can('create', App\Models\Vehicle::class);
echo "  create (cr√©er un v√©hicule): " . ($canCreateVehicles ? "‚úÖ" : "‚ùå") . "\n";

// Test avec un v√©hicule de la m√™me organisation
$ownVehicle = App\Models\Vehicle::where('organization_id', $admin->organization_id)->first();
if ($ownVehicle) {
    $canViewOwn = $admin->can('view', $ownVehicle);
    echo "  view (voir v√©hicule de SON organisation): " . ($canViewOwn ? "‚úÖ" : "‚ùå") . "\n";

    $canUpdateOwn = $admin->can('update', $ownVehicle);
    echo "  update (modifier v√©hicule de SON organisation): " . ($canUpdateOwn ? "‚úÖ" : "‚ùå") . "\n";

    $canDeleteOwn = $admin->can('delete', $ownVehicle);
    echo "  delete (supprimer v√©hicule de SON organisation): " . ($canDeleteOwn ? "‚úÖ" : "‚ùå") . "\n";
}

// Test avec un v√©hicule d'une autre organisation
$otherVehicle = App\Models\Vehicle::where('organization_id', '!=', $admin->organization_id)->first();
if ($otherVehicle) {
    $canViewOther = $admin->can('view', $otherVehicle);
    echo "  view (voir v√©hicule d'AUTRE organisation): " . ($canViewOther ? "‚ùå (correct)" : "‚úÖ (probl√®me!)") . "\n";

    $canUpdateOther = $admin->can('update', $otherVehicle);
    echo "  update (modifier v√©hicule d'AUTRE organisation): " . ($canUpdateOther ? "‚ùå (correct)" : "‚úÖ (probl√®me!)") . "\n";
}

echo "\n";

// 2. Test DriverPolicy
echo "2. üë§ DRIVER POLICY\n";
echo str_repeat("-", 80) . "\n";

$canViewDrivers = $admin->can('viewAny', App\Models\Driver::class);
echo "  viewAny (voir tous les chauffeurs): " . ($canViewDrivers ? "‚úÖ" : "‚ùå") . "\n";

$canCreateDrivers = $admin->can('create', App\Models\Driver::class);
echo "  create (cr√©er un chauffeur): " . ($canCreateDrivers ? "‚úÖ" : "‚ùå") . "\n";

// Test avec un chauffeur de la m√™me organisation
$ownDriver = App\Models\Driver::where('organization_id', $admin->organization_id)->first();
if ($ownDriver) {
    $canViewOwn = $admin->can('view', $ownDriver);
    echo "  view (voir chauffeur de SON organisation): " . ($canViewOwn ? "‚úÖ" : "‚ùå") . "\n";

    $canUpdateOwn = $admin->can('update', $ownDriver);
    echo "  update (modifier chauffeur de SON organisation): " . ($canUpdateOwn ? "‚úÖ" : "‚ùå") . "\n";

    $canDeleteOwn = $admin->can('delete', $ownDriver);
    echo "  delete (supprimer chauffeur de SON organisation): " . ($canDeleteOwn ? "‚úÖ" : "‚ùå") . "\n";
}

// Test isolation multi-tenant
$otherDriver = App\Models\Driver::where('organization_id', '!=', $admin->organization_id)->first();
if ($otherDriver) {
    $canViewOther = $admin->can('view', $otherDriver);
    echo "  view (voir chauffeur d'AUTRE organisation): " . ($canViewOther ? "‚ùå (correct)" : "‚úÖ (probl√®me!)") . "\n";
}

echo "\n";

// 3. Test SupplierPolicy
echo "3. üè¢ SUPPLIER POLICY\n";
echo str_repeat("-", 80) . "\n";

$canViewSuppliers = $admin->can('viewAny', App\Models\Supplier::class);
echo "  viewAny (voir tous les fournisseurs): " . ($canViewSuppliers ? "‚úÖ" : "‚ùå") . "\n";

$canCreateSuppliers = $admin->can('create', App\Models\Supplier::class);
echo "  create (cr√©er un fournisseur): " . ($canCreateSuppliers ? "‚úÖ" : "‚ùå") . "\n";

// Test avec un fournisseur de la m√™me organisation
$ownSupplier = App\Models\Supplier::where('organization_id', $admin->organization_id)->first();
if ($ownSupplier) {
    $canViewOwn = $admin->can('view', $ownSupplier);
    echo "  view (voir fournisseur de SON organisation): " . ($canViewOwn ? "‚úÖ" : "‚ùå") . "\n";

    $canUpdateOwn = $admin->can('update', $ownSupplier);
    echo "  update (modifier fournisseur de SON organisation): " . ($canUpdateOwn ? "‚úÖ" : "‚ùå") . "\n";
}

echo "\n";

// 4. Test AssignmentPolicy
echo "4. üìã ASSIGNMENT POLICY\n";
echo str_repeat("-", 80) . "\n";

$canViewAssignments = $admin->can('viewAny', App\Models\Assignment::class);
echo "  viewAny (voir toutes les affectations): " . ($canViewAssignments ? "‚úÖ" : "‚ùå") . "\n";

$canCreateAssignments = $admin->can('create', App\Models\Assignment::class);
echo "  create (cr√©er une affectation): " . ($canCreateAssignments ? "‚úÖ" : "‚ùå") . "\n";

// Test avec une affectation de la m√™me organisation
$ownAssignment = App\Models\Assignment::where('organization_id', $admin->organization_id)->first();
if ($ownAssignment) {
    $canViewOwn = $admin->can('view', $ownAssignment);
    echo "  view (voir affectation de SON organisation): " . ($canViewOwn ? "‚úÖ" : "‚ùå") . "\n";

    $canUpdateOwn = $admin->can('update', $ownAssignment);
    echo "  update (modifier affectation de SON organisation): " . ($canUpdateOwn ? "‚úÖ" : "‚ùå") . "\n";

    $canEndOwn = $admin->can('end', $ownAssignment);
    echo "  end (terminer affectation de SON organisation): " . ($canEndOwn ? "‚úÖ" : "‚ùå") . "\n";
}

echo "\n";

// R√©sum√© final
echo str_repeat("=", 80) . "\n";
echo "üìä R√âSUM√â FINAL\n";
echo str_repeat("=", 80) . "\n\n";

$testResults = [
    'Vehicle' => $canViewVehicles && $canCreateVehicles,
    'Driver' => $canViewDrivers && $canCreateDrivers,
    'Supplier' => $canViewSuppliers && $canCreateSuppliers,
    'Assignment' => $canViewAssignments && $canCreateAssignments,
];

$allPassed = true;
foreach ($testResults as $model => $passed) {
    echo "  " . ($passed ? "‚úÖ" : "‚ùå") . " {$model}Policy: " . ($passed ? "OP√âRATIONNEL" : "√âCHOU√â") . "\n";
    if (!$passed) {
        $allPassed = false;
    }
}

echo "\n";

if ($allPassed) {
    echo "‚ú® TOUS LES TESTS R√âUSSIS! ‚ú®\n";
    echo "Le syst√®me de permissions Enterprise-Grade est op√©rationnel.\n";
    echo "L'Admin peut maintenant acc√©der √† toutes les pages de son organisation.\n\n";
    exit(0);
} else {
    echo "‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â\n";
    echo "V√©rifiez les permissions et les policies ci-dessus.\n\n";
    exit(1);
}
