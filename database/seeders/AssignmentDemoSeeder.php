<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Assignment;
use App\Models\Vehicle;
use App\Models\Driver;
use App\Models\Organization;
use App\Models\User;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

/**
 * üå± Seeder de d√©monstration pour les affectations
 *
 * G√©n√®re des donn√©es de test enterprise-grade:
 * - Affectations r√©alistes sur plusieurs organisations
 * - Sc√©narios de chevauchement contr√¥l√©s
 * - Donn√©es historiques et futures
 * - Statuts vari√©s pour tests complets
 */
class AssignmentDemoSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        // D√©sactiver temporairement les contraintes d'exclusion pour le seeding
        DB::statement('ALTER TABLE assignments DISABLE TRIGGER ALL;');

        try {
            $this->seedAssignmentsByOrganization();
        } finally {
            // R√©activer les contraintes
            DB::statement('ALTER TABLE assignments ENABLE TRIGGER ALL;');
        }
    }

    private function seedAssignmentsByOrganization(): void
    {
        $organizations = Organization::all();

        foreach ($organizations as $organization) {
            $this->command->info("G√©n√©ration d'affectations pour {$organization->name}...");

            $vehicles = Vehicle::where('organization_id', $organization->id)
                ->where('status', 'active')
                ->get();

            $drivers = Driver::where('organization_id', $organization->id)
                ->where('status', 'active')
                ->get();

            $users = User::where('organization_id', $organization->id)->get();

            if ($vehicles->isEmpty() || $drivers->isEmpty() || $users->isEmpty()) {
                $this->command->warn("Pas assez de ressources pour {$organization->name}, skipping...");
                continue;
            }

            // G√©n√©rer des affectations pour les 30 derniers jours et 30 prochains jours
            $this->generateHistoricalAssignments($organization, $vehicles, $drivers, $users);
            $this->generateCurrentAssignments($organization, $vehicles, $drivers, $users);
            $this->generateFutureAssignments($organization, $vehicles, $drivers, $users);

            $this->command->info("‚úÖ Affectations g√©n√©r√©es pour {$organization->name}");
        }
    }

    /**
     * G√©n√©rer des affectations historiques (30 derniers jours)
     */
    private function generateHistoricalAssignments(
        Organization $organization,
        $vehicles,
        $drivers,
        $users
    ): void {
        $startDate = now()->subDays(30);
        $endDate = now()->subDay();

        for ($i = 0; $i < 50; $i++) {
            $vehicle = $vehicles->random();
            $driver = $drivers->random();
            $creator = $users->random();

            $start = $startDate->copy()->addDays(rand(0, 29))
                ->setTime(rand(6, 20), rand(0, 3) * 15, 0);

            // 90% des affectations historiques sont termin√©es
            $isCompleted = rand(1, 100) <= 90;
            $duration = rand(2, 48); // 2h √† 48h

            $end = $isCompleted ?
                $start->copy()->addHours($duration) :
                null;

            // √âviter les chevauchements basiques
            if ($this->hasBasicOverlap($organization->id, $vehicle->id, $driver->id, $start, $end)) {
                continue;
            }

            Assignment::create([
                'organization_id' => $organization->id,
                'vehicle_id' => $vehicle->id,
                'driver_id' => $driver->id,
                'start_datetime' => $start,
                'end_datetime' => $end,
                'reason' => $this->getRandomReason(),
                'notes' => rand(1, 100) <= 30 ? $this->getRandomNotes() : null,
                'created_by_user_id' => $creator->id,
                'created_at' => $start->copy()->subHours(rand(1, 24)),
                'updated_at' => $start->copy()->subHours(rand(1, 24))
            ]);
        }
    }

    /**
     * G√©n√©rer des affectations en cours
     */
    private function generateCurrentAssignments(
        Organization $organization,
        $vehicles,
        $drivers,
        $users
    ): void {
        // 15-20 affectations en cours
        for ($i = 0; $i < rand(15, 20); $i++) {
            $vehicle = $vehicles->random();
            $driver = $drivers->random();
            $creator = $users->random();

            $start = now()->subDays(rand(0, 7))
                ->setTime(rand(6, 18), rand(0, 3) * 15, 0);

            // 60% sont en cours (sans fin), 40% ont une fin programm√©e
            $hasEnd = rand(1, 100) <= 40;
            $end = $hasEnd ?
                now()->addDays(rand(1, 7))->setTime(rand(8, 20), rand(0, 3) * 15, 0) :
                null;

            if ($this->hasBasicOverlap($organization->id, $vehicle->id, $driver->id, $start, $end)) {
                continue;
            }

            Assignment::create([
                'organization_id' => $organization->id,
                'vehicle_id' => $vehicle->id,
                'driver_id' => $driver->id,
                'start_datetime' => $start,
                'end_datetime' => $end,
                'reason' => $this->getRandomReason(),
                'notes' => rand(1, 100) <= 40 ? $this->getRandomNotes() : null,
                'created_by_user_id' => $creator->id
            ]);
        }
    }

    /**
     * G√©n√©rer des affectations futures (30 prochains jours)
     */
    private function generateFutureAssignments(
        Organization $organization,
        $vehicles,
        $drivers,
        $users
    ): void {
        $startDate = now()->addDay();
        $endDate = now()->addDays(30);

        for ($i = 0; $i < 40; $i++) {
            $vehicle = $vehicles->random();
            $driver = $drivers->random();
            $creator = $users->random();

            $start = $startDate->copy()->addDays(rand(0, 29))
                ->setTime(rand(6, 20), rand(0, 3) * 15, 0);

            // 80% ont une dur√©e d√©finie
            $hasDuration = rand(1, 100) <= 80;
            $duration = rand(2, 24); // 2h √† 24h

            $end = $hasDuration ?
                $start->copy()->addHours($duration) :
                null;

            if ($this->hasBasicOverlap($organization->id, $vehicle->id, $driver->id, $start, $end)) {
                continue;
            }

            Assignment::create([
                'organization_id' => $organization->id,
                'vehicle_id' => $vehicle->id,
                'driver_id' => $driver->id,
                'start_datetime' => $start,
                'end_datetime' => $end,
                'reason' => $this->getRandomReason(),
                'notes' => rand(1, 100) <= 25 ? $this->getRandomNotes() : null,
                'created_by_user_id' => $creator->id
            ]);
        }

        // Cr√©er quelques affectations avec conflits intentionnels pour tester la gestion des erreurs
        $this->createConflictScenarios($organization, $vehicles, $drivers, $users);
    }

    /**
     * Cr√©er des sc√©narios de conflit pour les tests
     */
    private function createConflictScenarios(
        Organization $organization,
        $vehicles,
        $drivers,
        $users
    ): void {
        // Note: Ces affectations ne seront pas cr√©√©es si les contraintes GIST sont actives
        // Elles servent √† tester la gestion des conflits c√¥t√© application

        $vehicle = $vehicles->first();
        $driver = $drivers->first();
        $creator = $users->first();

        $baseStart = now()->addDays(5)->setTime(9, 0, 0);

        // Tentative de chevauchement v√©hicule (sera rejet√©e par les contraintes)
        try {
            Assignment::create([
                'organization_id' => $organization->id,
                'vehicle_id' => $vehicle->id,
                'driver_id' => $drivers->skip(1)->first()->id,
                'start_datetime' => $baseStart,
                'end_datetime' => $baseStart->copy()->addHours(4),
                'reason' => 'Test conflit v√©hicule',
                'created_by_user_id' => $creator->id
            ]);

            // Si la premi√®re passe, essayer un chevauchement
            Assignment::create([
                'organization_id' => $organization->id,
                'vehicle_id' => $vehicle->id,
                'driver_id' => $drivers->skip(2)->first()->id,
                'start_datetime' => $baseStart->copy()->addHours(2),
                'end_datetime' => $baseStart->copy()->addHours(6),
                'reason' => 'Test conflit v√©hicule - chevauchement',
                'created_by_user_id' => $creator->id
            ]);
        } catch (\Exception $e) {
            $this->command->comment("Conflit v√©hicule d√©tect√© (attendu): " . $e->getMessage());
        }
    }

    /**
     * V√©rification basique de chevauchement (sans les contraintes PostgreSQL)
     */
    private function hasBasicOverlap(
        int $organizationId,
        int $vehicleId,
        int $driverId,
        Carbon $start,
        ?Carbon $end
    ): bool {
        $endEffective = $end ?? Carbon::create(2099, 12, 31);

        // V√©rifier les chevauchements v√©hicule
        $vehicleOverlap = Assignment::where('organization_id', $organizationId)
            ->where('vehicle_id', $vehicleId)
            ->where(function ($query) use ($start, $endEffective) {
                $query->where(function ($q) use ($start, $endEffective) {
                    // Affectations avec fin d√©finie
                    $q->whereNotNull('end_datetime')
                      ->where('start_datetime', '<', $endEffective)
                      ->where('end_datetime', '>', $start);
                })->orWhere(function ($q) use ($start) {
                    // Affectations sans fin
                    $q->whereNull('end_datetime')
                      ->where('start_datetime', '<', $start->copy()->addDays(30));
                });
            })
            ->exists();

        if ($vehicleOverlap) return true;

        // V√©rifier les chevauchements chauffeur
        $driverOverlap = Assignment::where('organization_id', $organizationId)
            ->where('driver_id', $driverId)
            ->where(function ($query) use ($start, $endEffective) {
                $query->where(function ($q) use ($start, $endEffective) {
                    $q->whereNotNull('end_datetime')
                      ->where('start_datetime', '<', $endEffective)
                      ->where('end_datetime', '>', $start);
                })->orWhere(function ($q) use ($start) {
                    $q->whereNull('end_datetime')
                      ->where('start_datetime', '<', $start->copy()->addDays(30));
                });
            })
            ->exists();

        return $driverOverlap;
    }

    /**
     * Motifs d'affectation r√©alistes
     */
    private function getRandomReason(): string
    {
        $reasons = [
            'Mission commerciale',
            'Formation conducteur',
            'Maintenance pr√©ventive',
            'Transport √©quipe',
            'Livraison urgente',
            'Rendez-vous client',
            'D√©placement si√®ge social',
            'Mission longue dur√©e',
            'Remplacement v√©hicule',
            'Test nouveau conducteur',
            'Formation s√©curit√©',
            'Audit qualit√©',
            'Intervention technique',
            'Transport mat√©riel',
            'R√©union partenaires',
            'Salon professionnel',
            'Inspection v√©hicule',
            'Formation √©co-conduite',
            'Mission de nuit',
            'Urgence op√©rationnelle'
        ];

        return $reasons[array_rand($reasons)];
    }

    /**
     * Notes compl√©mentaires al√©atoires
     */
    private function getRandomNotes(): string
    {
        $notes = [
            'Pr√©voir plein d\'essence avant d√©part',
            'V√©rifier pression pneus',
            'Retour pr√©vu avant 18h',
            'Contact client: 06.12.34.56.78',
            'Attention: v√©hicule en rodage',
            'Kilom√©trage √† noter au retour',
            'Eviter autoroutes si possible',
            'Mat√©riel fragile √† transporter',
            'Mission confidentielle',
            'Pr√©voir temps suppl√©mentaire',
            'V√©rifier √©tat v√©hicule retour',
            'Facture parking √† conserver',
            'Itin√©raire GPS fourni',
            'Contact urgence: 07.89.01.23.45',
            'Pr√©voir badge parking',
            'Attention: zone urbaine',
            'Mission formation - patience requise',
            'V√©rifier papiers v√©hicule',
            'Pr√©voir kit premi√®re urgence',
            'Retour diff√©r√© possible'
        ];

        return $notes[array_rand($notes)];
    }
}