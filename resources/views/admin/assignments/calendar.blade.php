<x-app-layout>
    <x-slot name="header">
        <h2 class="font-semibold text-xl text-gray-800 leading-tight">
            {{ __('Calendrier des Affectations') }}
        </h2>
    </x-slot>

    <div class="py-12">
        <div class="max-w-full mx-auto sm:px-6 lg:px-8">
            
            {{-- Toolbar --}}
            <div class="mb-6 bg-white p-4 shadow-sm sm:rounded-lg">
                <div class="flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0">
                    <div class="flex items-center space-x-4">
                        <h3 class="text-xl font-semibold text-gray-700">Calendrier</h3>
                        @can('create assignments')
                            <a href="{{ route('admin.assignments.create', ['redirect_to' => 'calendar']) }}" class="inline-flex items-center px-4 py-2 bg-primary-600 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-primary-700">
                                <x-lucide-plus class="w-4 h-4 mr-2"/>
                                Nouvelle Affectation
                            </a>
                        @endcan
                    </div>
                    <div class="flex flex-col sm:flex-row items-stretch sm:items-center space-y-2 sm:space-y-0 sm:space-x-4">
                        <div class="flex items-center space-x-2">
                            <button id="prevPeriod" class="p-2 border border-gray-300 rounded-md hover:bg-gray-50"><x-lucide-chevron-left class="w-4 h-4"/></button>
                            <button id="todayBtn" class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">Aujourd'hui</button>
                            <button id="nextPeriod" class="p-2 border border-gray-300 rounded-md hover:bg-gray-50"><x-lucide-chevron-right class="w-4 h-4"/></button>
                        </div>
                        <select id="viewSelector" class="border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:ring-primary-500 focus:border-primary-500">
                            <option value="month" @selected($period == 'month')>Mois</option>
                            <option value="week" @selected($period == 'week')>Semaine</option>
                            <option value="day" @selected($period == 'day')>Jour</option>
                        </select>
                        <a href="{{ route('admin.assignments.index') }}" class="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50">
                            <x-lucide-table class="w-4 h-4 mr-2"/>
                            Vue Tableau
                        </a>
                    </div>
                </div>
            </div>

            {{-- Timeline Calendar --}}
            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg">
                <div class="p-6">
                    <div class="flex items-center justify-between mb-4">
                        <h4 id="currentPeriod" class="text-2xl font-bold text-gray-900"></h4>
                    </div>
                    <div id="timeline-container" class="overflow-x-auto border border-gray-200 rounded-lg">
                        {{-- Timeline generated by JS --}}
                    </div>
                </div>
            </div>
        </div>
    </div>

    @push('scripts')
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const config = {
            assignments: @json($assignments),
            vehicles: @json($vehicles),
            currentDate: new Date('{{ $date }}T00:00:00'),
            view: '{{ $period }}',
        };

        const timelineContainer = document.getElementById('timeline-container');
        const currentPeriodEl = document.getElementById('currentPeriod');

        function renderTimeline() {
            timelineContainer.innerHTML = '';
            updatePeriodLabel();

            if (config.view === 'day') {
                renderDayView();
            } else {
                renderPeriodView();
            }
        }

        function renderDayView() {
            const header = buildDayHeader();
            timelineContainer.appendChild(header);

            const body = document.createElement('div');
            body.className = 'timeline-body';
            config.vehicles.forEach(vehicle => {
                const row = buildVehicleRowForDay(vehicle);
                body.appendChild(row);
            });
            timelineContainer.appendChild(body);
        }

        function renderPeriodView() {
            const startDate = getStartDate(config.currentDate, config.view);
            const endDate = getEndDate(config.currentDate, config.view);
            const days = getDaysBetween(startDate, endDate);

            const header = buildPeriodHeader(days);
            timelineContainer.appendChild(header);
            
            const body = document.createElement('div');
            body.className = 'timeline-body';
            config.vehicles.forEach(vehicle => {
                const row = buildVehicleRowForPeriod(vehicle, days, startDate);
                body.appendChild(row);
            });
            timelineContainer.appendChild(body);
        }

        // --- Period View (Week/Month) Functions ---
        function getStartDate(date, view) {
            const d = new Date(date);
            if (view === 'month') return new Date(d.getFullYear(), d.getMonth(), 1);
            const day = d.getDay();
            const diff = d.getDate() - day + (day === 0 ? -6 : 1);
            return new Date(new Date(d.setDate(diff)).setHours(0,0,0,0));
        }

        function getEndDate(date, view) {
            const d = new Date(date);
            if (view === 'month') return new Date(d.getFullYear(), d.getMonth() + 1, 0);
            const startDate = getStartDate(date, 'week');
            return new Date(new Date(startDate.setDate(startDate.getDate() + 6)).setHours(23,59,59,999));
        }

        function getDaysBetween(start, end) {
            const days = [];
            let currentDate = new Date(start);
            while (currentDate <= end) {
                days.push(new Date(currentDate));
                currentDate.setDate(currentDate.getDate() + 1);
            }
            return days;
        }

        function buildPeriodHeader(days) {
            const header = document.createElement('div');
            header.className = 'timeline-header sticky top-0 bg-gray-100 z-10 grid';
            header.style.gridTemplateColumns = `200px repeat(${days.length}, minmax(90px, 1fr))`;
            header.appendChild(createHeaderCell('Véhicules'));

            const dayNames = ['Dim', 'Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam'];
            days.forEach(day => {
                const content = `${dayNames[day.getDay()]} <span class="block text-lg font-bold text-gray-800">${day.getDate()}</span>`;
                header.appendChild(createHeaderCell(content, true));
            });
            return header;
        }

        function buildVehicleRowForPeriod(vehicle, days, timelineStart) {
            const row = createRowContainer(`200px repeat(${days.length}, minmax(90px, 1fr))`);
            row.appendChild(createVehicleInfoCell(vehicle));
            days.forEach(() => row.appendChild(createTrackCell()));

            const vehicleAssignments = config.assignments.filter(a => a.vehicle_id === vehicle.id);
            vehicleAssignments.forEach(assignment => {
                const start = new Date(assignment.start_datetime);
                const end = assignment.end_datetime ? new Date(assignment.end_datetime) : new Date();
                if (end < timelineStart || start > getEndDate(config.currentDate, config.view)) return;

                const startOffset = (start - timelineStart) / (1000 * 60 * 60 * 24);
                let duration = (end - start) / (1000 * 60 * 60 * 24);

                const clampedStart = Math.max(0, startOffset);
                const clampedDuration = Math.min(duration + Math.min(0, startOffset), days.length - clampedStart);

                if (clampedDuration > 0) {
                    const bar = createAssignmentBar(assignment);
                    bar.style.gridColumn = `${Math.floor(clampedStart) + 2} / span ${Math.ceil(clampedDuration)}`;
                    row.appendChild(bar);
                }
            });
            return row;
        }

        // --- Day View Functions ---
        function buildDayHeader() {
            const header = document.createElement('div');
            header.className = 'timeline-header sticky top-0 bg-gray-100 z-10 grid';
            header.style.gridTemplateColumns = `200px repeat(48, minmax(40px, 1fr))`;
            header.appendChild(createHeaderCell('Véhicules'));
            for (let i = 0; i < 24; i++) {
                const cell = createHeaderCell(`${i}:00`, true);
                cell.style.gridColumn = 'span 2';
                header.appendChild(cell);
            }
            return header;
        }

        function buildVehicleRowForDay(vehicle) {
            const row = createRowContainer(`200px repeat(48, minmax(40px, 1fr))`);
            row.appendChild(createVehicleInfoCell(vehicle));
            for (let i = 0; i < 48; i++) {
                const cell = createTrackCell();
                if(i % 2 !== 0) cell.classList.add('bg-gray-50'); // Alternate color for 30min blocks
                row.appendChild(cell);
            }

            const dayStart = new Date(config.currentDate).setHours(0,0,0,0);
            const dayEnd = new Date(config.currentDate).setHours(23,59,59,999);

            const vehicleAssignments = config.assignments.filter(a => a.vehicle_id === vehicle.id);
            vehicleAssignments.forEach(assignment => {
                const start = new Date(assignment.start_datetime);
                const end = assignment.end_datetime ? new Date(assignment.end_datetime) : new Date();
                if (end < dayStart || start > dayEnd) return;

                const startMinutes = start < dayStart ? 0 : start.getHours() * 60 + start.getMinutes();
                const endMinutes = end > dayEnd ? 24 * 60 : end.getHours() * 60 + end.getMinutes();
                const durationMinutes = endMinutes - startMinutes;

                if (durationMinutes > 0) {
                    const bar = createAssignmentBar(assignment);
                    // 1 column = 30 minutes
                    const startColumn = Math.floor(startMinutes / 30) + 2;
                    const endColumn = Math.ceil(endMinutes / 30) + 2;
                    bar.style.gridColumn = `${startColumn} / ${endColumn}`;
                    row.appendChild(bar);
                }
            });
            return row;
        }

        // --- Common Helper Functions ---
        function createHeaderCell(content, isTimeCell = false) {
            const cell = document.createElement('div');
            cell.className = 'p-3 font-semibold text-gray-700 border-r border-gray-200';
            if(isTimeCell) cell.className += ' text-center text-xs uppercase tracking-wide';
            cell.innerHTML = content;
            return cell;
        }

        function createRowContainer(gridTemplate) {
            const row = document.createElement('div');
            row.className = 'timeline-row grid items-center border-t border-gray-200';
            row.style.gridTemplateColumns = gridTemplate;
            return row;
        }

        function createVehicleInfoCell(vehicle) {
            const cell = document.createElement('div');
            cell.className = 'p-2 border-r border-gray-200 h-full flex flex-col justify-center';
            cell.innerHTML = `<div class="font-bold text-sm truncate">${vehicle.brand} ${vehicle.model}</div><div class="text-xs text-gray-500">${vehicle.registration_plate}</div>`;
            return cell;
        }

        function createTrackCell() {
            const cell = document.createElement('div');
            cell.className = 'h-full border-r border-gray-200';
            return cell;
        }

        function createAssignmentBar(assignment) {
            const bar = document.createElement('div');
            const statusColor = assignment.end_datetime ? 'bg-gray-400' : 'bg-green-500';
            bar.className = `absolute z-10 top-1/2 -translate-y-1/2 h-10 ${statusColor} text-white text-xs p-2 rounded-md shadow-sm overflow-hidden flex items-center cursor-pointer hover:opacity-80`;
            const driverName = assignment.driver ? `${assignment.driver.first_name} ${assignment.driver.last_name}` : 'N/A';
            bar.innerHTML = `<span class="font-semibold truncate">${driverName}</span>`;
            bar.title = `Chauffeur: ${driverName}\nDébut: ${new Date(assignment.start_datetime).toLocaleString('fr-FR')}\nFin: ${assignment.end_datetime ? new Date(assignment.end_datetime).toLocaleString('fr-FR') : 'En cours'}`;
            return bar;
        }

        function updatePeriodLabel() {
            const d = config.currentDate;
            const monthNames = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'];
            if (config.view === 'month') {
                currentPeriodEl.textContent = `${monthNames[d.getMonth()]} ${d.getFullYear()}`;
            } else if (config.view === 'week') {
                const start = getStartDate(d, 'week');
                const end = getEndDate(d, 'week');
                currentPeriodEl.textContent = `Semaine du ${start.toLocaleDateString('fr-FR')} au ${end.toLocaleDateString('fr-FR')}`;
            } else {
                currentPeriodEl.textContent = d.toLocaleDateString('fr-FR', {weekday: 'long', year: 'numeric', month: 'long', day: 'numeric'});
            }
        }

        function navigate() {
            const dateStr = config.currentDate.toISOString().split('T')[0];
            window.location.href = `?date=${dateStr}&period=${config.view}`;
        }

        // Event Listeners
        document.getElementById('prevPeriod').addEventListener('click', () => {
            if (config.view === 'month') config.currentDate.setMonth(config.currentDate.getMonth() - 1);
            else if (config.view === 'week') config.currentDate.setDate(config.currentDate.getDate() - 7);
            else config.currentDate.setDate(config.currentDate.getDate() - 1);
            navigate();
        });

        document.getElementById('nextPeriod').addEventListener('click', () => {
            if (config.view === 'month') config.currentDate.setMonth(config.currentDate.getMonth() + 1);
            else if (config.view === 'week') config.currentDate.setDate(config.currentDate.getDate() + 7);
            else config.currentDate.setDate(config.currentDate.getDate() + 1);
            navigate();
        });

        document.getElementById('todayBtn').addEventListener('click', () => {
            config.currentDate = new Date();
            navigate();
        });

        document.getElementById('viewSelector').addEventListener('change', (e) => {
            config.view = e.target.value;
            navigate();
        });

        renderTimeline();
    });
    </script>
    @endpush
</x-app-layout>
