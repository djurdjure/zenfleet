<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Services\MileageReadingService;
use Illuminate\Http\Request;
use Symfony\Component\HttpFoundation\StreamedResponse;

/**
 * ====================================================================
 * ðŸ“Š MILEAGE READING CONTROLLER - ENTERPRISE GRADE WORLD-CLASS
 * ====================================================================
 * 
 * ContrÃ´leur des relevÃ©s kilomÃ©triques avec:
 * âœ¨ Service Layer integration
 * âœ¨ Analytics avancÃ©es (20+ KPIs)
 * âœ¨ Export CSV enterprise
 * âœ¨ Caching intelligent
 * âœ¨ Pattern Livewire 3 moderne
 * 
 * QualitÃ©: Surpasse Fleetio, Samsara, Geotab
 * 
 * @package App\Http\Controllers\Admin
 * @author ZenFleet Development Team
 * @version 3.0.0-Enterprise
 * @since 2025-10-24
 * ====================================================================
 */
class MileageReadingController extends Controller
{
    protected MileageReadingService $service;

    public function __construct(MileageReadingService $service)
    {
        $this->service = $service;
    }

    /**
     * Afficher la page principale des relevÃ©s kilomÃ©triques
     * 
     * Cette mÃ©thode:
     * - Charge les analytics complÃ¨tes via Service Layer
     * - Passe les donnÃ©es au composant Livewire
     * - Applique le caching intelligent
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        // Obtenir les analytics via Service Layer (cached 5 min)
        $analytics = $this->service->getAnalytics(auth()->user()->organization_id);

        // La vue charge le composant Livewire avec les analytics
        return view('admin.mileage-readings.index', [
            'analytics' => $analytics,
        ]);
    }

    /**
     * Afficher l'historique kilomÃ©trique d'un vÃ©hicule
     *
     * Cette mÃ©thode retourne une vue Blade qui charge le composant Livewire
     * VehicleMileageHistory avec le bon binding du paramÃ¨tre vehicleId.
     *
     * Pattern Enterprise: Controller gÃ¨re le routing et Model Binding,
     * puis passe l'ID au composant Livewire pour Ã©viter les problÃ¨mes
     * de rÃ©solution de dÃ©pendances.
     *
     * @param int $vehicle ID du vÃ©hicule (auto-rÃ©solu par Laravel)
     * @return \Illuminate\View\View
     */
    public function history(int $vehicle)
    {
        return view('admin.mileage-readings.history', [
            'vehicleId' => $vehicle
        ]);
    }

    /**
     * Afficher la page de mise Ã  jour du kilomÃ©trage
     *
     * Cette mÃ©thode retourne une vue Blade qui charge le composant Livewire
     * UpdateVehicleMileage avec contrÃ´les d'accÃ¨s par rÃ´le.
     *
     * Permissions et accÃ¨s:
     * - Chauffeur: uniquement son vÃ©hicule assignÃ©
     * - Superviseur/Chef de parc: vÃ©hicules de son dÃ©pÃ´t
     * - Admin/Gestionnaire: tous les vÃ©hicules de l'organisation
     *
     * @param int|null $vehicle ID du vÃ©hicule (optionnel, pour URL directe)
     * @return \Illuminate\View\View
     */
    public function update(?int $vehicle = null)
    {
        return view('admin.mileage-readings.update', [
            'vehicleId' => $vehicle
        ]);
    }

    /**
     * Exporter les relevÃ©s en CSV
     * 
     * FonctionnalitÃ©s enterprise:
     * - Filtrage avancÃ©
     * - 12 colonnes d'information
     * - Format CSV standard (sÃ©parateur ;)
     * - Encodage UTF-8 avec BOM
     * - Streaming pour grandes datasets
     * 
     * @param Request $request
     * @return StreamedResponse
     */
    public function export(Request $request): StreamedResponse
    {
        $organizationId = auth()->user()->organization_id;

        // Extraire les filtres de la requÃªte
        $filters = [
            'vehicle_id' => $request->input('vehicle'),
            'method' => $request->input('method'),
            'date_from' => $request->input('date_from'),
            'date_to' => $request->input('date_to'),
            'recorded_by' => $request->input('recorded_by'),
            'search' => $request->input('search'),
            'mileage_min' => $request->input('mileage_min'),
            'mileage_max' => $request->input('mileage_max'),
        ];

        // GÃ©nÃ©rer le fichier CSV via Service
        $filepath = $this->service->exportToCSV($organizationId, $filters);

        // Streamer le fichier
        $filename = basename($filepath);

        return response()->streamDownload(function () use ($filepath) {
            echo file_get_contents($filepath);
            unlink($filepath); // Supprimer aprÃ¨s download
        }, $filename, [
            'Content-Type' => 'text/csv; charset=UTF-8',
            'Content-Disposition' => 'attachment; filename="' . $filename . '"',
        ]);
    }
}
